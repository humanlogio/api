// @generated by protoc-gen-es v1.10.1 with parameter "target=ts,import_extension=none"
// @generated from file types/v1/stack.proto (package types.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, Timestamp } from "@bufbuild/protobuf";

/**
 * @generated from message types.v1.StackPointer
 */
export class StackPointer extends Message<StackPointer> {
  /**
   * @generated from oneof types.v1.StackPointer.scheme
   */
  scheme: {
    /**
     * @generated from field: types.v1.StackPointer.RemoteGit remote = 1;
     */
    value: StackPointer_RemoteGit;
    case: "remote";
  } | {
    /**
     * @generated from field: types.v1.StackPointer.LocalGit localhost = 2;
     */
    value: StackPointer_LocalGit;
    case: "localhost";
  } | {
    /**
     * @generated from field: types.v1.StackPointer.Virtual db = 3;
     */
    value: StackPointer_Virtual;
    case: "db";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<StackPointer>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "types.v1.StackPointer";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "remote", kind: "message", T: StackPointer_RemoteGit, oneof: "scheme" },
    { no: 2, name: "localhost", kind: "message", T: StackPointer_LocalGit, oneof: "scheme" },
    { no: 3, name: "db", kind: "message", T: StackPointer_Virtual, oneof: "scheme" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StackPointer {
    return new StackPointer().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StackPointer {
    return new StackPointer().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StackPointer {
    return new StackPointer().fromJsonString(jsonString, options);
  }

  static equals(a: StackPointer | PlainMessage<StackPointer> | undefined, b: StackPointer | PlainMessage<StackPointer> | undefined): boolean {
    return proto3.util.equals(StackPointer, a, b);
  }
}

/**
 * @generated from message types.v1.StackPointer.RemoteGit
 */
export class StackPointer_RemoteGit extends Message<StackPointer_RemoteGit> {
  /**
   * @generated from field: string remote_url = 1;
   */
  remoteUrl = "";

  /**
   * @generated from field: string ref = 2;
   */
  ref = "";

  /**
   * @generated from field: string dashboard_dir = 3;
   */
  dashboardDir = "";

  /**
   * @generated from field: string alert_dir = 4;
   */
  alertDir = "";

  constructor(data?: PartialMessage<StackPointer_RemoteGit>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "types.v1.StackPointer.RemoteGit";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "remote_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "ref", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "dashboard_dir", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "alert_dir", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StackPointer_RemoteGit {
    return new StackPointer_RemoteGit().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StackPointer_RemoteGit {
    return new StackPointer_RemoteGit().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StackPointer_RemoteGit {
    return new StackPointer_RemoteGit().fromJsonString(jsonString, options);
  }

  static equals(a: StackPointer_RemoteGit | PlainMessage<StackPointer_RemoteGit> | undefined, b: StackPointer_RemoteGit | PlainMessage<StackPointer_RemoteGit> | undefined): boolean {
    return proto3.util.equals(StackPointer_RemoteGit, a, b);
  }
}

/**
 * @generated from message types.v1.StackPointer.LocalGit
 */
export class StackPointer_LocalGit extends Message<StackPointer_LocalGit> {
  /**
   * @generated from field: string path = 1;
   */
  path = "";

  /**
   * @generated from field: string dashboard_dir = 2;
   */
  dashboardDir = "";

  /**
   * @generated from field: string alert_dir = 3;
   */
  alertDir = "";

  constructor(data?: PartialMessage<StackPointer_LocalGit>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "types.v1.StackPointer.LocalGit";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "dashboard_dir", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "alert_dir", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StackPointer_LocalGit {
    return new StackPointer_LocalGit().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StackPointer_LocalGit {
    return new StackPointer_LocalGit().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StackPointer_LocalGit {
    return new StackPointer_LocalGit().fromJsonString(jsonString, options);
  }

  static equals(a: StackPointer_LocalGit | PlainMessage<StackPointer_LocalGit> | undefined, b: StackPointer_LocalGit | PlainMessage<StackPointer_LocalGit> | undefined): boolean {
    return proto3.util.equals(StackPointer_LocalGit, a, b);
  }
}

/**
 * @generated from message types.v1.StackPointer.Virtual
 */
export class StackPointer_Virtual extends Message<StackPointer_Virtual> {
  /**
   * @generated from field: string uri = 1;
   */
  uri = "";

  constructor(data?: PartialMessage<StackPointer_Virtual>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "types.v1.StackPointer.Virtual";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "uri", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StackPointer_Virtual {
    return new StackPointer_Virtual().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StackPointer_Virtual {
    return new StackPointer_Virtual().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StackPointer_Virtual {
    return new StackPointer_Virtual().fromJsonString(jsonString, options);
  }

  static equals(a: StackPointer_Virtual | PlainMessage<StackPointer_Virtual> | undefined, b: StackPointer_Virtual | PlainMessage<StackPointer_Virtual> | undefined): boolean {
    return proto3.util.equals(StackPointer_Virtual, a, b);
  }
}

/**
 * @generated from message types.v1.Stack
 */
export class Stack extends Message<Stack> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: types.v1.StackPointer pointer = 2;
   */
  pointer?: StackPointer;

  /**
   * @generated from field: google.protobuf.Timestamp created_at = 300;
   */
  createdAt?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp updated_at = 301;
   */
  updatedAt?: Timestamp;

  constructor(data?: PartialMessage<Stack>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "types.v1.Stack";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "pointer", kind: "message", T: StackPointer },
    { no: 300, name: "created_at", kind: "message", T: Timestamp },
    { no: 301, name: "updated_at", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Stack {
    return new Stack().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Stack {
    return new Stack().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Stack {
    return new Stack().fromJsonString(jsonString, options);
  }

  static equals(a: Stack | PlainMessage<Stack> | undefined, b: Stack | PlainMessage<Stack> | undefined): boolean {
    return proto3.util.equals(Stack, a, b);
  }
}

