// @generated by protoc-gen-es v1.10.1 with parameter "target=ts,import_extension=none"
// @generated from file types/v1/database.proto (package types.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64, Timestamp } from "@bufbuild/protobuf";
import { Val } from "./types_pb";

/**
 * @generated from message types.v1.SignalStats
 */
export class SignalStats extends Message<SignalStats> {
  /**
   * @generated from field: uint64 count = 1;
   */
  count = protoInt64.zero;

  /**
   * @generated from field: google.protobuf.Timestamp oldest_entry = 2;
   */
  oldestEntry?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp youngest_entry = 3;
   */
  youngestEntry?: Timestamp;

  /**
   * @generated from field: optional uint64 storage_size_bytes = 4;
   */
  storageSizeBytes?: bigint;

  /**
   * @generated from field: optional uint64 ingested_size_bytes = 5;
   */
  ingestedSizeBytes?: bigint;

  constructor(data?: PartialMessage<SignalStats>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "types.v1.SignalStats";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "count", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "oldest_entry", kind: "message", T: Timestamp },
    { no: 3, name: "youngest_entry", kind: "message", T: Timestamp },
    { no: 4, name: "storage_size_bytes", kind: "scalar", T: 4 /* ScalarType.UINT64 */, opt: true },
    { no: 5, name: "ingested_size_bytes", kind: "scalar", T: 4 /* ScalarType.UINT64 */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SignalStats {
    return new SignalStats().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SignalStats {
    return new SignalStats().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SignalStats {
    return new SignalStats().fromJsonString(jsonString, options);
  }

  static equals(a: SignalStats | PlainMessage<SignalStats> | undefined, b: SignalStats | PlainMessage<SignalStats> | undefined): boolean {
    return proto3.util.equals(SignalStats, a, b);
  }
}

/**
 * @generated from message types.v1.DatabaseStats
 */
export class DatabaseStats extends Message<DatabaseStats> {
  /**
   * @generated from field: types.v1.SignalStats logs = 1;
   */
  logs?: SignalStats;

  /**
   * @generated from field: types.v1.SignalStats spans = 2;
   */
  spans?: SignalStats;

  /**
   * @generated from field: types.v1.SignalStats metrics = 3;
   */
  metrics?: SignalStats;

  /**
   * @generated from field: types.v1.Val extra = 10;
   */
  extra?: Val;

  constructor(data?: PartialMessage<DatabaseStats>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "types.v1.DatabaseStats";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "logs", kind: "message", T: SignalStats },
    { no: 2, name: "spans", kind: "message", T: SignalStats },
    { no: 3, name: "metrics", kind: "message", T: SignalStats },
    { no: 10, name: "extra", kind: "message", T: Val },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DatabaseStats {
    return new DatabaseStats().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DatabaseStats {
    return new DatabaseStats().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DatabaseStats {
    return new DatabaseStats().fromJsonString(jsonString, options);
  }

  static equals(a: DatabaseStats | PlainMessage<DatabaseStats> | undefined, b: DatabaseStats | PlainMessage<DatabaseStats> | undefined): boolean {
    return proto3.util.equals(DatabaseStats, a, b);
  }
}

