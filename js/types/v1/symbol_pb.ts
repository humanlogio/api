// @generated by protoc-gen-es v1.10.0 with parameter "target=ts,import_extension=none"
// @generated from file types/v1/symbol.proto (package types.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { VarType } from "./types_pb";

/**
 * @generated from message types.v1.Symbol
 */
export class Symbol extends Message<Symbol> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: types.v1.VarType type = 2;
   */
  type?: VarType;

  constructor(data?: PartialMessage<Symbol>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "types.v1.Symbol";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "type", kind: "message", T: VarType },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Symbol {
    return new Symbol().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Symbol {
    return new Symbol().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Symbol {
    return new Symbol().fromJsonString(jsonString, options);
  }

  static equals(a: Symbol | PlainMessage<Symbol> | undefined, b: Symbol | PlainMessage<Symbol> | undefined): boolean {
    return proto3.util.equals(Symbol, a, b);
  }
}

