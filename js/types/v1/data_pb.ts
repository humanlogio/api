// @generated by protoc-gen-es v2.8.0 with parameter "target=ts,import_extension=none"
// @generated from file types/v1/data.proto (package types.v1, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage } from "@bufbuild/protobuf/codegenv2";
import { fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv2";
import { file_google_protobuf_timestamp } from "@bufbuild/protobuf/wkt";
import type { Log } from "./otel_logging_pb";
import { file_types_v1_otel_logging } from "./otel_logging_pb";
import type { Span } from "./otel_tracing_pb";
import { file_types_v1_otel_tracing } from "./otel_tracing_pb";
import type { Query } from "./query_pb";
import { file_types_v1_query } from "./query_pb";
import type { Table } from "./types_pb";
import { file_types_v1_types } from "./types_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file types/v1/data.proto.
 */
export const file_types_v1_data: GenFile = /*@__PURE__*/
  fileDesc("ChN0eXBlcy92MS9kYXRhLnByb3RvEgh0eXBlcy52MSKjAQoERGF0YRIqCgpzdWJxdWVyaWVzGGQgASgLMhQudHlwZXMudjEuU3VicXVlcmllc0gAEiQKCWZyZWVfZm9ybRhlIAEoCzIPLnR5cGVzLnYxLlRhYmxlSAASHgoEbG9ncxhmIAEoCzIOLnR5cGVzLnYxLkxvZ3NIABIgCgVzcGFucxhnIAEoCzIPLnR5cGVzLnYxLlNwYW5zSABCBwoFc2hhcGUiLgoKU3VicXVlcmllcxIgCgdxdWVyaWVzGAEgAygLMg8udHlwZXMudjEuUXVlcnkiIwoETG9ncxIbCgRsb2dzGAEgAygLMg0udHlwZXMudjEuTG9nIiYKBVNwYW5zEh0KBXNwYW5zGAEgAygLMg4udHlwZXMudjEuU3BhbkKJAQoMY29tLnR5cGVzLnYxQglEYXRhUHJvdG9QAVotZ2l0aHViLmNvbS9odW1hbmxvZ2lvL2FwaS9nby90eXBlcy92MTt0eXBlc3YxogIDVFhYqgIIVHlwZXMuVjHKAghUeXBlc1xWMeICFFR5cGVzXFYxXEdQQk1ldGFkYXRh6gIJVHlwZXM6OlYxYgZwcm90bzM", [file_google_protobuf_timestamp, file_types_v1_otel_logging, file_types_v1_otel_tracing, file_types_v1_query, file_types_v1_types]);

/**
 * @generated from message types.v1.Data
 */
export type Data = Message<"types.v1.Data"> & {
  /**
   * @generated from oneof types.v1.Data.shape
   */
  shape: {
    /**
     * @generated from field: types.v1.Subqueries subqueries = 100;
     */
    value: Subqueries;
    case: "subqueries";
  } | {
    /**
     * @generated from field: types.v1.Table free_form = 101;
     */
    value: Table;
    case: "freeForm";
  } | {
    /**
     * @generated from field: types.v1.Logs logs = 102;
     */
    value: Logs;
    case: "logs";
  } | {
    /**
     * @generated from field: types.v1.Spans spans = 103;
     */
    value: Spans;
    case: "spans";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message types.v1.Data.
 * Use `create(DataSchema)` to create a new message.
 */
export const DataSchema: GenMessage<Data> = /*@__PURE__*/
  messageDesc(file_types_v1_data, 0);

/**
 * @generated from message types.v1.Subqueries
 */
export type Subqueries = Message<"types.v1.Subqueries"> & {
  /**
   * @generated from field: repeated types.v1.Query queries = 1;
   */
  queries: Query[];
};

/**
 * Describes the message types.v1.Subqueries.
 * Use `create(SubqueriesSchema)` to create a new message.
 */
export const SubqueriesSchema: GenMessage<Subqueries> = /*@__PURE__*/
  messageDesc(file_types_v1_data, 1);

/**
 * @generated from message types.v1.Logs
 */
export type Logs = Message<"types.v1.Logs"> & {
  /**
   * @generated from field: repeated types.v1.Log logs = 1;
   */
  logs: Log[];
};

/**
 * Describes the message types.v1.Logs.
 * Use `create(LogsSchema)` to create a new message.
 */
export const LogsSchema: GenMessage<Logs> = /*@__PURE__*/
  messageDesc(file_types_v1_data, 2);

/**
 * @generated from message types.v1.Spans
 */
export type Spans = Message<"types.v1.Spans"> & {
  /**
   * @generated from field: repeated types.v1.Span spans = 1;
   */
  spans: Span[];
};

/**
 * Describes the message types.v1.Spans.
 * Use `create(SpansSchema)` to create a new message.
 */
export const SpansSchema: GenMessage<Spans> = /*@__PURE__*/
  messageDesc(file_types_v1_data, 3);

