// @generated by protoc-gen-es v1.10.0 with parameter "target=ts,import_extension=none"
// @generated from file svc/localhost/v1/service.proto (package svc.localhost.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Version } from "../../../types/v1/version_pb";
import { ResMeta } from "../../../types/v1/meta_pb";
import { User } from "../../../types/v1/user_pb";
import { Organization } from "../../../types/v1/organization_pb";

/**
 * @generated from message svc.localhost.v1.PingRequest
 */
export class PingRequest extends Message<PingRequest> {
  constructor(data?: PartialMessage<PingRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "svc.localhost.v1.PingRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PingRequest {
    return new PingRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PingRequest {
    return new PingRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PingRequest {
    return new PingRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PingRequest | PlainMessage<PingRequest> | undefined, b: PingRequest | PlainMessage<PingRequest> | undefined): boolean {
    return proto3.util.equals(PingRequest, a, b);
  }
}

/**
 * @generated from message svc.localhost.v1.PingResponse
 */
export class PingResponse extends Message<PingResponse> {
  /**
   * @generated from field: types.v1.Version client_version = 1;
   */
  clientVersion?: Version;

  /**
   * @generated from field: string architecture = 2;
   */
  architecture = "";

  /**
   * @generated from field: string operating_system = 3;
   */
  operatingSystem = "";

  /**
   * logged_in_user is set if the CLI is logged in.
   * if the CLI is alive but not logged in, this field
   * is null
   *
   * @generated from field: svc.localhost.v1.PingResponse.UserDetails logged_in_user = 4;
   */
  loggedInUser?: PingResponse_UserDetails;

  /**
   * @generated from field: types.v1.ResMeta meta = 1000;
   */
  meta?: ResMeta;

  constructor(data?: PartialMessage<PingResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "svc.localhost.v1.PingResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "client_version", kind: "message", T: Version },
    { no: 2, name: "architecture", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "operating_system", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "logged_in_user", kind: "message", T: PingResponse_UserDetails },
    { no: 1000, name: "meta", kind: "message", T: ResMeta },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PingResponse {
    return new PingResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PingResponse {
    return new PingResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PingResponse {
    return new PingResponse().fromJsonString(jsonString, options);
  }

  static equals(a: PingResponse | PlainMessage<PingResponse> | undefined, b: PingResponse | PlainMessage<PingResponse> | undefined): boolean {
    return proto3.util.equals(PingResponse, a, b);
  }
}

/**
 * @generated from message svc.localhost.v1.PingResponse.UserDetails
 */
export class PingResponse_UserDetails extends Message<PingResponse_UserDetails> {
  /**
   * @generated from field: types.v1.User user = 1;
   */
  user?: User;

  /**
   * @generated from field: types.v1.Organization current_organization = 2;
   */
  currentOrganization?: Organization;

  /**
   * @generated from field: types.v1.Organization default_organization = 3;
   */
  defaultOrganization?: Organization;

  constructor(data?: PartialMessage<PingResponse_UserDetails>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "svc.localhost.v1.PingResponse.UserDetails";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user", kind: "message", T: User },
    { no: 2, name: "current_organization", kind: "message", T: Organization },
    { no: 3, name: "default_organization", kind: "message", T: Organization },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PingResponse_UserDetails {
    return new PingResponse_UserDetails().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PingResponse_UserDetails {
    return new PingResponse_UserDetails().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PingResponse_UserDetails {
    return new PingResponse_UserDetails().fromJsonString(jsonString, options);
  }

  static equals(a: PingResponse_UserDetails | PlainMessage<PingResponse_UserDetails> | undefined, b: PingResponse_UserDetails | PlainMessage<PingResponse_UserDetails> | undefined): boolean {
    return proto3.util.equals(PingResponse_UserDetails, a, b);
  }
}

/**
 * @generated from message svc.localhost.v1.DoLoginRequest
 */
export class DoLoginRequest extends Message<DoLoginRequest> {
  constructor(data?: PartialMessage<DoLoginRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "svc.localhost.v1.DoLoginRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DoLoginRequest {
    return new DoLoginRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DoLoginRequest {
    return new DoLoginRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DoLoginRequest {
    return new DoLoginRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DoLoginRequest | PlainMessage<DoLoginRequest> | undefined, b: DoLoginRequest | PlainMessage<DoLoginRequest> | undefined): boolean {
    return proto3.util.equals(DoLoginRequest, a, b);
  }
}

/**
 * @generated from message svc.localhost.v1.DoLoginResponse
 */
export class DoLoginResponse extends Message<DoLoginResponse> {
  constructor(data?: PartialMessage<DoLoginResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "svc.localhost.v1.DoLoginResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DoLoginResponse {
    return new DoLoginResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DoLoginResponse {
    return new DoLoginResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DoLoginResponse {
    return new DoLoginResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DoLoginResponse | PlainMessage<DoLoginResponse> | undefined, b: DoLoginResponse | PlainMessage<DoLoginResponse> | undefined): boolean {
    return proto3.util.equals(DoLoginResponse, a, b);
  }
}

/**
 * @generated from message svc.localhost.v1.DoLogoutRequest
 */
export class DoLogoutRequest extends Message<DoLogoutRequest> {
  constructor(data?: PartialMessage<DoLogoutRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "svc.localhost.v1.DoLogoutRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DoLogoutRequest {
    return new DoLogoutRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DoLogoutRequest {
    return new DoLogoutRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DoLogoutRequest {
    return new DoLogoutRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DoLogoutRequest | PlainMessage<DoLogoutRequest> | undefined, b: DoLogoutRequest | PlainMessage<DoLogoutRequest> | undefined): boolean {
    return proto3.util.equals(DoLogoutRequest, a, b);
  }
}

/**
 * @generated from message svc.localhost.v1.DoLogoutResponse
 */
export class DoLogoutResponse extends Message<DoLogoutResponse> {
  constructor(data?: PartialMessage<DoLogoutResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "svc.localhost.v1.DoLogoutResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DoLogoutResponse {
    return new DoLogoutResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DoLogoutResponse {
    return new DoLogoutResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DoLogoutResponse {
    return new DoLogoutResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DoLogoutResponse | PlainMessage<DoLogoutResponse> | undefined, b: DoLogoutResponse | PlainMessage<DoLogoutResponse> | undefined): boolean {
    return proto3.util.equals(DoLogoutResponse, a, b);
  }
}

/**
 * @generated from message svc.localhost.v1.DoUpdateRequest
 */
export class DoUpdateRequest extends Message<DoUpdateRequest> {
  constructor(data?: PartialMessage<DoUpdateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "svc.localhost.v1.DoUpdateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DoUpdateRequest {
    return new DoUpdateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DoUpdateRequest {
    return new DoUpdateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DoUpdateRequest {
    return new DoUpdateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DoUpdateRequest | PlainMessage<DoUpdateRequest> | undefined, b: DoUpdateRequest | PlainMessage<DoUpdateRequest> | undefined): boolean {
    return proto3.util.equals(DoUpdateRequest, a, b);
  }
}

/**
 * @generated from message svc.localhost.v1.DoUpdateResponse
 */
export class DoUpdateResponse extends Message<DoUpdateResponse> {
  constructor(data?: PartialMessage<DoUpdateResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "svc.localhost.v1.DoUpdateResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DoUpdateResponse {
    return new DoUpdateResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DoUpdateResponse {
    return new DoUpdateResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DoUpdateResponse {
    return new DoUpdateResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DoUpdateResponse | PlainMessage<DoUpdateResponse> | undefined, b: DoUpdateResponse | PlainMessage<DoUpdateResponse> | undefined): boolean {
    return proto3.util.equals(DoUpdateResponse, a, b);
  }
}

