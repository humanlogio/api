// @generated by protoc-gen-es v1.10.0 with parameter "target=ts,import_extension=none"
// @generated from file svc/dashboard/v1/service.proto (package svc.environment.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { Dashboard } from "../../../types/v1/dashboard_pb";
import { Cursor } from "../../../types/v1/cursor_pb";

/**
 * @generated from message svc.environment.v1.GetDashboardRequest
 */
export class GetDashboardRequest extends Message<GetDashboardRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<GetDashboardRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "svc.environment.v1.GetDashboardRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetDashboardRequest {
    return new GetDashboardRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetDashboardRequest {
    return new GetDashboardRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetDashboardRequest {
    return new GetDashboardRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetDashboardRequest | PlainMessage<GetDashboardRequest> | undefined, b: GetDashboardRequest | PlainMessage<GetDashboardRequest> | undefined): boolean {
    return proto3.util.equals(GetDashboardRequest, a, b);
  }
}

/**
 * @generated from message svc.environment.v1.GetDashboardResponse
 */
export class GetDashboardResponse extends Message<GetDashboardResponse> {
  /**
   * @generated from field: types.v1.Dashboard dashboard = 1;
   */
  dashboard?: Dashboard;

  constructor(data?: PartialMessage<GetDashboardResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "svc.environment.v1.GetDashboardResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "dashboard", kind: "message", T: Dashboard },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetDashboardResponse {
    return new GetDashboardResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetDashboardResponse {
    return new GetDashboardResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetDashboardResponse {
    return new GetDashboardResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetDashboardResponse | PlainMessage<GetDashboardResponse> | undefined, b: GetDashboardResponse | PlainMessage<GetDashboardResponse> | undefined): boolean {
    return proto3.util.equals(GetDashboardResponse, a, b);
  }
}

/**
 * @generated from message svc.environment.v1.ListDashboardRequest
 */
export class ListDashboardRequest extends Message<ListDashboardRequest> {
  /**
   * @generated from field: types.v1.Cursor cursor = 1;
   */
  cursor?: Cursor;

  /**
   * @generated from field: int32 limit = 2;
   */
  limit = 0;

  /**
   * @generated from field: int64 environment_id = 3;
   */
  environmentId = protoInt64.zero;

  constructor(data?: PartialMessage<ListDashboardRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "svc.environment.v1.ListDashboardRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "cursor", kind: "message", T: Cursor },
    { no: 2, name: "limit", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "environment_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListDashboardRequest {
    return new ListDashboardRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListDashboardRequest {
    return new ListDashboardRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListDashboardRequest {
    return new ListDashboardRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListDashboardRequest | PlainMessage<ListDashboardRequest> | undefined, b: ListDashboardRequest | PlainMessage<ListDashboardRequest> | undefined): boolean {
    return proto3.util.equals(ListDashboardRequest, a, b);
  }
}

/**
 * @generated from message svc.environment.v1.ListDashboardResponse
 */
export class ListDashboardResponse extends Message<ListDashboardResponse> {
  /**
   * @generated from field: types.v1.Cursor next = 1;
   */
  next?: Cursor;

  /**
   * @generated from field: repeated svc.environment.v1.ListDashboardResponse.ListItem items = 2;
   */
  items: ListDashboardResponse_ListItem[] = [];

  constructor(data?: PartialMessage<ListDashboardResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "svc.environment.v1.ListDashboardResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "next", kind: "message", T: Cursor },
    { no: 2, name: "items", kind: "message", T: ListDashboardResponse_ListItem, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListDashboardResponse {
    return new ListDashboardResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListDashboardResponse {
    return new ListDashboardResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListDashboardResponse {
    return new ListDashboardResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListDashboardResponse | PlainMessage<ListDashboardResponse> | undefined, b: ListDashboardResponse | PlainMessage<ListDashboardResponse> | undefined): boolean {
    return proto3.util.equals(ListDashboardResponse, a, b);
  }
}

/**
 * @generated from message svc.environment.v1.ListDashboardResponse.ListItem
 */
export class ListDashboardResponse_ListItem extends Message<ListDashboardResponse_ListItem> {
  /**
   * @generated from field: types.v1.Dashboard dashboard = 1;
   */
  dashboard?: Dashboard;

  constructor(data?: PartialMessage<ListDashboardResponse_ListItem>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "svc.environment.v1.ListDashboardResponse.ListItem";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "dashboard", kind: "message", T: Dashboard },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListDashboardResponse_ListItem {
    return new ListDashboardResponse_ListItem().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListDashboardResponse_ListItem {
    return new ListDashboardResponse_ListItem().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListDashboardResponse_ListItem {
    return new ListDashboardResponse_ListItem().fromJsonString(jsonString, options);
  }

  static equals(a: ListDashboardResponse_ListItem | PlainMessage<ListDashboardResponse_ListItem> | undefined, b: ListDashboardResponse_ListItem | PlainMessage<ListDashboardResponse_ListItem> | undefined): boolean {
    return proto3.util.equals(ListDashboardResponse_ListItem, a, b);
  }
}

