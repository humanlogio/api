// @generated by protoc-gen-es v1.10.0 with parameter "target=ts,import_extension=none"
// @generated from file svc/alert/v1/service.proto (package svc.alert.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Duration, Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { AlertGroup, AlertRule } from "../../../types/v1/alert_pb";
import { Obj } from "../../../types/v1/types_pb";
import { Cursor } from "../../../types/v1/cursor_pb";
import { Query } from "../../../types/v1/query_pb";

/**
 * @generated from message svc.alert.v1.CreateAlertGroupRequest
 */
export class CreateAlertGroupRequest extends Message<CreateAlertGroupRequest> {
  /**
   * @generated from field: int64 environment_id = 101;
   */
  environmentId = protoInt64.zero;

  /**
   * @generated from field: string stack_id = 102;
   */
  stackId = "";

  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: google.protobuf.Duration interval = 2;
   */
  interval?: Duration;

  /**
   * @generated from field: google.protobuf.Duration query_offset = 3;
   */
  queryOffset?: Duration;

  /**
   * @generated from field: int32 limit = 4;
   */
  limit = 0;

  /**
   * @generated from field: repeated types.v1.AlertRule rules = 5;
   */
  rules: AlertRule[] = [];

  /**
   * @generated from field: types.v1.Obj labels = 6;
   */
  labels?: Obj;

  constructor(data?: PartialMessage<CreateAlertGroupRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "svc.alert.v1.CreateAlertGroupRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 101, name: "environment_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 102, name: "stack_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "interval", kind: "message", T: Duration },
    { no: 3, name: "query_offset", kind: "message", T: Duration },
    { no: 4, name: "limit", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 5, name: "rules", kind: "message", T: AlertRule, repeated: true },
    { no: 6, name: "labels", kind: "message", T: Obj },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateAlertGroupRequest {
    return new CreateAlertGroupRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateAlertGroupRequest {
    return new CreateAlertGroupRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateAlertGroupRequest {
    return new CreateAlertGroupRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateAlertGroupRequest | PlainMessage<CreateAlertGroupRequest> | undefined, b: CreateAlertGroupRequest | PlainMessage<CreateAlertGroupRequest> | undefined): boolean {
    return proto3.util.equals(CreateAlertGroupRequest, a, b);
  }
}

/**
 * @generated from message svc.alert.v1.CreateAlertGroupResponse
 */
export class CreateAlertGroupResponse extends Message<CreateAlertGroupResponse> {
  /**
   * @generated from field: types.v1.AlertGroup alert_group = 1;
   */
  alertGroup?: AlertGroup;

  constructor(data?: PartialMessage<CreateAlertGroupResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "svc.alert.v1.CreateAlertGroupResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "alert_group", kind: "message", T: AlertGroup },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateAlertGroupResponse {
    return new CreateAlertGroupResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateAlertGroupResponse {
    return new CreateAlertGroupResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateAlertGroupResponse {
    return new CreateAlertGroupResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateAlertGroupResponse | PlainMessage<CreateAlertGroupResponse> | undefined, b: CreateAlertGroupResponse | PlainMessage<CreateAlertGroupResponse> | undefined): boolean {
    return proto3.util.equals(CreateAlertGroupResponse, a, b);
  }
}

/**
 * @generated from message svc.alert.v1.GetAlertGroupRequest
 */
export class GetAlertGroupRequest extends Message<GetAlertGroupRequest> {
  /**
   * @generated from field: int64 environment_id = 101;
   */
  environmentId = protoInt64.zero;

  /**
   * @generated from field: string stack_id = 102;
   */
  stackId = "";

  /**
   * @generated from field: string name = 1;
   */
  name = "";

  constructor(data?: PartialMessage<GetAlertGroupRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "svc.alert.v1.GetAlertGroupRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 101, name: "environment_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 102, name: "stack_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAlertGroupRequest {
    return new GetAlertGroupRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAlertGroupRequest {
    return new GetAlertGroupRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAlertGroupRequest {
    return new GetAlertGroupRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetAlertGroupRequest | PlainMessage<GetAlertGroupRequest> | undefined, b: GetAlertGroupRequest | PlainMessage<GetAlertGroupRequest> | undefined): boolean {
    return proto3.util.equals(GetAlertGroupRequest, a, b);
  }
}

/**
 * @generated from message svc.alert.v1.GetAlertGroupResponse
 */
export class GetAlertGroupResponse extends Message<GetAlertGroupResponse> {
  /**
   * @generated from field: types.v1.AlertGroup alert_group = 1;
   */
  alertGroup?: AlertGroup;

  constructor(data?: PartialMessage<GetAlertGroupResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "svc.alert.v1.GetAlertGroupResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "alert_group", kind: "message", T: AlertGroup },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAlertGroupResponse {
    return new GetAlertGroupResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAlertGroupResponse {
    return new GetAlertGroupResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAlertGroupResponse {
    return new GetAlertGroupResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetAlertGroupResponse | PlainMessage<GetAlertGroupResponse> | undefined, b: GetAlertGroupResponse | PlainMessage<GetAlertGroupResponse> | undefined): boolean {
    return proto3.util.equals(GetAlertGroupResponse, a, b);
  }
}

/**
 * @generated from message svc.alert.v1.UpdateAlertGroupRequest
 */
export class UpdateAlertGroupRequest extends Message<UpdateAlertGroupRequest> {
  /**
   * @generated from field: int64 environment_id = 101;
   */
  environmentId = protoInt64.zero;

  /**
   * @generated from field: string stack_id = 102;
   */
  stackId = "";

  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: repeated svc.alert.v1.UpdateAlertGroupRequest.Mutation mutations = 2;
   */
  mutations: UpdateAlertGroupRequest_Mutation[] = [];

  constructor(data?: PartialMessage<UpdateAlertGroupRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "svc.alert.v1.UpdateAlertGroupRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 101, name: "environment_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 102, name: "stack_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "mutations", kind: "message", T: UpdateAlertGroupRequest_Mutation, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateAlertGroupRequest {
    return new UpdateAlertGroupRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateAlertGroupRequest {
    return new UpdateAlertGroupRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateAlertGroupRequest {
    return new UpdateAlertGroupRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateAlertGroupRequest | PlainMessage<UpdateAlertGroupRequest> | undefined, b: UpdateAlertGroupRequest | PlainMessage<UpdateAlertGroupRequest> | undefined): boolean {
    return proto3.util.equals(UpdateAlertGroupRequest, a, b);
  }
}

/**
 * @generated from message svc.alert.v1.UpdateAlertGroupRequest.Mutation
 */
export class UpdateAlertGroupRequest_Mutation extends Message<UpdateAlertGroupRequest_Mutation> {
  /**
   * @generated from oneof svc.alert.v1.UpdateAlertGroupRequest.Mutation.do
   */
  do: {
    /**
     * @generated from field: string set_name = 1;
     */
    value: string;
    case: "setName";
  } | {
    /**
     * @generated from field: google.protobuf.Duration set_interval = 2;
     */
    value: Duration;
    case: "setInterval";
  } | {
    /**
     * @generated from field: google.protobuf.Duration set_query_offset = 3;
     */
    value: Duration;
    case: "setQueryOffset";
  } | {
    /**
     * @generated from field: int32 set_limit = 4;
     */
    value: number;
    case: "setLimit";
  } | {
    /**
     * @generated from field: types.v1.Obj set_labels = 5;
     */
    value: Obj;
    case: "setLabels";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<UpdateAlertGroupRequest_Mutation>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "svc.alert.v1.UpdateAlertGroupRequest.Mutation";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "set_name", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "do" },
    { no: 2, name: "set_interval", kind: "message", T: Duration, oneof: "do" },
    { no: 3, name: "set_query_offset", kind: "message", T: Duration, oneof: "do" },
    { no: 4, name: "set_limit", kind: "scalar", T: 5 /* ScalarType.INT32 */, oneof: "do" },
    { no: 5, name: "set_labels", kind: "message", T: Obj, oneof: "do" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateAlertGroupRequest_Mutation {
    return new UpdateAlertGroupRequest_Mutation().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateAlertGroupRequest_Mutation {
    return new UpdateAlertGroupRequest_Mutation().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateAlertGroupRequest_Mutation {
    return new UpdateAlertGroupRequest_Mutation().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateAlertGroupRequest_Mutation | PlainMessage<UpdateAlertGroupRequest_Mutation> | undefined, b: UpdateAlertGroupRequest_Mutation | PlainMessage<UpdateAlertGroupRequest_Mutation> | undefined): boolean {
    return proto3.util.equals(UpdateAlertGroupRequest_Mutation, a, b);
  }
}

/**
 * @generated from message svc.alert.v1.UpdateAlertGroupResponse
 */
export class UpdateAlertGroupResponse extends Message<UpdateAlertGroupResponse> {
  /**
   * @generated from field: types.v1.AlertGroup alert_group = 1;
   */
  alertGroup?: AlertGroup;

  constructor(data?: PartialMessage<UpdateAlertGroupResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "svc.alert.v1.UpdateAlertGroupResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "alert_group", kind: "message", T: AlertGroup },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateAlertGroupResponse {
    return new UpdateAlertGroupResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateAlertGroupResponse {
    return new UpdateAlertGroupResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateAlertGroupResponse {
    return new UpdateAlertGroupResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateAlertGroupResponse | PlainMessage<UpdateAlertGroupResponse> | undefined, b: UpdateAlertGroupResponse | PlainMessage<UpdateAlertGroupResponse> | undefined): boolean {
    return proto3.util.equals(UpdateAlertGroupResponse, a, b);
  }
}

/**
 * @generated from message svc.alert.v1.DeleteAlertGroupRequest
 */
export class DeleteAlertGroupRequest extends Message<DeleteAlertGroupRequest> {
  /**
   * @generated from field: int64 environment_id = 101;
   */
  environmentId = protoInt64.zero;

  /**
   * @generated from field: string stack_id = 102;
   */
  stackId = "";

  /**
   * @generated from field: string name = 1;
   */
  name = "";

  constructor(data?: PartialMessage<DeleteAlertGroupRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "svc.alert.v1.DeleteAlertGroupRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 101, name: "environment_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 102, name: "stack_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteAlertGroupRequest {
    return new DeleteAlertGroupRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteAlertGroupRequest {
    return new DeleteAlertGroupRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteAlertGroupRequest {
    return new DeleteAlertGroupRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteAlertGroupRequest | PlainMessage<DeleteAlertGroupRequest> | undefined, b: DeleteAlertGroupRequest | PlainMessage<DeleteAlertGroupRequest> | undefined): boolean {
    return proto3.util.equals(DeleteAlertGroupRequest, a, b);
  }
}

/**
 * @generated from message svc.alert.v1.DeleteAlertGroupResponse
 */
export class DeleteAlertGroupResponse extends Message<DeleteAlertGroupResponse> {
  constructor(data?: PartialMessage<DeleteAlertGroupResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "svc.alert.v1.DeleteAlertGroupResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteAlertGroupResponse {
    return new DeleteAlertGroupResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteAlertGroupResponse {
    return new DeleteAlertGroupResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteAlertGroupResponse {
    return new DeleteAlertGroupResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteAlertGroupResponse | PlainMessage<DeleteAlertGroupResponse> | undefined, b: DeleteAlertGroupResponse | PlainMessage<DeleteAlertGroupResponse> | undefined): boolean {
    return proto3.util.equals(DeleteAlertGroupResponse, a, b);
  }
}

/**
 * @generated from message svc.alert.v1.ListAlertGroupRequest
 */
export class ListAlertGroupRequest extends Message<ListAlertGroupRequest> {
  /**
   * @generated from field: int64 environment_id = 101;
   */
  environmentId = protoInt64.zero;

  /**
   * @generated from field: string stack_id = 102;
   */
  stackId = "";

  /**
   * @generated from field: types.v1.Cursor cursor = 2;
   */
  cursor?: Cursor;

  /**
   * @generated from field: int32 limit = 3;
   */
  limit = 0;

  constructor(data?: PartialMessage<ListAlertGroupRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "svc.alert.v1.ListAlertGroupRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 101, name: "environment_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 102, name: "stack_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "cursor", kind: "message", T: Cursor },
    { no: 3, name: "limit", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListAlertGroupRequest {
    return new ListAlertGroupRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListAlertGroupRequest {
    return new ListAlertGroupRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListAlertGroupRequest {
    return new ListAlertGroupRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListAlertGroupRequest | PlainMessage<ListAlertGroupRequest> | undefined, b: ListAlertGroupRequest | PlainMessage<ListAlertGroupRequest> | undefined): boolean {
    return proto3.util.equals(ListAlertGroupRequest, a, b);
  }
}

/**
 * @generated from message svc.alert.v1.ListAlertGroupResponse
 */
export class ListAlertGroupResponse extends Message<ListAlertGroupResponse> {
  /**
   * @generated from field: types.v1.Cursor next = 100;
   */
  next?: Cursor;

  /**
   * @generated from field: repeated svc.alert.v1.ListAlertGroupResponse.ListItem items = 200;
   */
  items: ListAlertGroupResponse_ListItem[] = [];

  constructor(data?: PartialMessage<ListAlertGroupResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "svc.alert.v1.ListAlertGroupResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 100, name: "next", kind: "message", T: Cursor },
    { no: 200, name: "items", kind: "message", T: ListAlertGroupResponse_ListItem, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListAlertGroupResponse {
    return new ListAlertGroupResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListAlertGroupResponse {
    return new ListAlertGroupResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListAlertGroupResponse {
    return new ListAlertGroupResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListAlertGroupResponse | PlainMessage<ListAlertGroupResponse> | undefined, b: ListAlertGroupResponse | PlainMessage<ListAlertGroupResponse> | undefined): boolean {
    return proto3.util.equals(ListAlertGroupResponse, a, b);
  }
}

/**
 * @generated from message svc.alert.v1.ListAlertGroupResponse.ListItem
 */
export class ListAlertGroupResponse_ListItem extends Message<ListAlertGroupResponse_ListItem> {
  /**
   * @generated from field: types.v1.AlertGroup alert_group = 2;
   */
  alertGroup?: AlertGroup;

  constructor(data?: PartialMessage<ListAlertGroupResponse_ListItem>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "svc.alert.v1.ListAlertGroupResponse.ListItem";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "alert_group", kind: "message", T: AlertGroup },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListAlertGroupResponse_ListItem {
    return new ListAlertGroupResponse_ListItem().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListAlertGroupResponse_ListItem {
    return new ListAlertGroupResponse_ListItem().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListAlertGroupResponse_ListItem {
    return new ListAlertGroupResponse_ListItem().fromJsonString(jsonString, options);
  }

  static equals(a: ListAlertGroupResponse_ListItem | PlainMessage<ListAlertGroupResponse_ListItem> | undefined, b: ListAlertGroupResponse_ListItem | PlainMessage<ListAlertGroupResponse_ListItem> | undefined): boolean {
    return proto3.util.equals(ListAlertGroupResponse_ListItem, a, b);
  }
}

/**
 * @generated from message svc.alert.v1.CreateAlertRuleRequest
 */
export class CreateAlertRuleRequest extends Message<CreateAlertRuleRequest> {
  /**
   * @generated from field: int64 environment_id = 101;
   */
  environmentId = protoInt64.zero;

  /**
   * @generated from field: string stack_id = 102;
   */
  stackId = "";

  /**
   * @generated from field: string group_name = 103;
   */
  groupName = "";

  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: types.v1.Query expr = 2;
   */
  expr?: Query;

  /**
   * @generated from field: types.v1.Obj labels = 3;
   */
  labels?: Obj;

  /**
   * @generated from field: types.v1.Obj annotations = 4;
   */
  annotations?: Obj;

  /**
   * @generated from field: google.protobuf.Duration for = 51;
   */
  for?: Duration;

  /**
   * @generated from field: google.protobuf.Duration keep_firing_for = 52;
   */
  keepFiringFor?: Duration;

  constructor(data?: PartialMessage<CreateAlertRuleRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "svc.alert.v1.CreateAlertRuleRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 101, name: "environment_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 102, name: "stack_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 103, name: "group_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "expr", kind: "message", T: Query },
    { no: 3, name: "labels", kind: "message", T: Obj },
    { no: 4, name: "annotations", kind: "message", T: Obj },
    { no: 51, name: "for", kind: "message", T: Duration },
    { no: 52, name: "keep_firing_for", kind: "message", T: Duration },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateAlertRuleRequest {
    return new CreateAlertRuleRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateAlertRuleRequest {
    return new CreateAlertRuleRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateAlertRuleRequest {
    return new CreateAlertRuleRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateAlertRuleRequest | PlainMessage<CreateAlertRuleRequest> | undefined, b: CreateAlertRuleRequest | PlainMessage<CreateAlertRuleRequest> | undefined): boolean {
    return proto3.util.equals(CreateAlertRuleRequest, a, b);
  }
}

/**
 * @generated from message svc.alert.v1.CreateAlertRuleResponse
 */
export class CreateAlertRuleResponse extends Message<CreateAlertRuleResponse> {
  /**
   * @generated from field: types.v1.AlertRule alert_rule = 1;
   */
  alertRule?: AlertRule;

  constructor(data?: PartialMessage<CreateAlertRuleResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "svc.alert.v1.CreateAlertRuleResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "alert_rule", kind: "message", T: AlertRule },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateAlertRuleResponse {
    return new CreateAlertRuleResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateAlertRuleResponse {
    return new CreateAlertRuleResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateAlertRuleResponse {
    return new CreateAlertRuleResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateAlertRuleResponse | PlainMessage<CreateAlertRuleResponse> | undefined, b: CreateAlertRuleResponse | PlainMessage<CreateAlertRuleResponse> | undefined): boolean {
    return proto3.util.equals(CreateAlertRuleResponse, a, b);
  }
}

/**
 * @generated from message svc.alert.v1.GetAlertRuleRequest
 */
export class GetAlertRuleRequest extends Message<GetAlertRuleRequest> {
  /**
   * @generated from field: int64 environment_id = 101;
   */
  environmentId = protoInt64.zero;

  /**
   * @generated from field: string stack_id = 102;
   */
  stackId = "";

  /**
   * @generated from field: string group_name = 103;
   */
  groupName = "";

  /**
   * @generated from field: string name = 1;
   */
  name = "";

  constructor(data?: PartialMessage<GetAlertRuleRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "svc.alert.v1.GetAlertRuleRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 101, name: "environment_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 102, name: "stack_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 103, name: "group_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAlertRuleRequest {
    return new GetAlertRuleRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAlertRuleRequest {
    return new GetAlertRuleRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAlertRuleRequest {
    return new GetAlertRuleRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetAlertRuleRequest | PlainMessage<GetAlertRuleRequest> | undefined, b: GetAlertRuleRequest | PlainMessage<GetAlertRuleRequest> | undefined): boolean {
    return proto3.util.equals(GetAlertRuleRequest, a, b);
  }
}

/**
 * @generated from message svc.alert.v1.GetAlertRuleResponse
 */
export class GetAlertRuleResponse extends Message<GetAlertRuleResponse> {
  /**
   * @generated from field: types.v1.AlertRule alert_rule = 1;
   */
  alertRule?: AlertRule;

  constructor(data?: PartialMessage<GetAlertRuleResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "svc.alert.v1.GetAlertRuleResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "alert_rule", kind: "message", T: AlertRule },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAlertRuleResponse {
    return new GetAlertRuleResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAlertRuleResponse {
    return new GetAlertRuleResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAlertRuleResponse {
    return new GetAlertRuleResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetAlertRuleResponse | PlainMessage<GetAlertRuleResponse> | undefined, b: GetAlertRuleResponse | PlainMessage<GetAlertRuleResponse> | undefined): boolean {
    return proto3.util.equals(GetAlertRuleResponse, a, b);
  }
}

/**
 * @generated from message svc.alert.v1.UpdateAlertRuleRequest
 */
export class UpdateAlertRuleRequest extends Message<UpdateAlertRuleRequest> {
  /**
   * @generated from field: int64 environment_id = 101;
   */
  environmentId = protoInt64.zero;

  /**
   * @generated from field: string stack_id = 102;
   */
  stackId = "";

  /**
   * @generated from field: string group_name = 103;
   */
  groupName = "";

  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: repeated svc.alert.v1.UpdateAlertRuleRequest.Mutation mutations = 2;
   */
  mutations: UpdateAlertRuleRequest_Mutation[] = [];

  constructor(data?: PartialMessage<UpdateAlertRuleRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "svc.alert.v1.UpdateAlertRuleRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 101, name: "environment_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 102, name: "stack_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 103, name: "group_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "mutations", kind: "message", T: UpdateAlertRuleRequest_Mutation, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateAlertRuleRequest {
    return new UpdateAlertRuleRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateAlertRuleRequest {
    return new UpdateAlertRuleRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateAlertRuleRequest {
    return new UpdateAlertRuleRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateAlertRuleRequest | PlainMessage<UpdateAlertRuleRequest> | undefined, b: UpdateAlertRuleRequest | PlainMessage<UpdateAlertRuleRequest> | undefined): boolean {
    return proto3.util.equals(UpdateAlertRuleRequest, a, b);
  }
}

/**
 * @generated from message svc.alert.v1.UpdateAlertRuleRequest.Mutation
 */
export class UpdateAlertRuleRequest_Mutation extends Message<UpdateAlertRuleRequest_Mutation> {
  /**
   * @generated from oneof svc.alert.v1.UpdateAlertRuleRequest.Mutation.do
   */
  do: {
    /**
     * @generated from field: string set_name = 1;
     */
    value: string;
    case: "setName";
  } | {
    /**
     * @generated from field: types.v1.Query set_expr = 2;
     */
    value: Query;
    case: "setExpr";
  } | {
    /**
     * @generated from field: types.v1.Obj set_labels = 3;
     */
    value: Obj;
    case: "setLabels";
  } | {
    /**
     * @generated from field: types.v1.Obj set_annotations = 4;
     */
    value: Obj;
    case: "setAnnotations";
  } | {
    /**
     * @generated from field: google.protobuf.Duration set_for = 51;
     */
    value: Duration;
    case: "setFor";
  } | {
    /**
     * @generated from field: google.protobuf.Duration set_keep_firing_for = 52;
     */
    value: Duration;
    case: "setKeepFiringFor";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<UpdateAlertRuleRequest_Mutation>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "svc.alert.v1.UpdateAlertRuleRequest.Mutation";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "set_name", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "do" },
    { no: 2, name: "set_expr", kind: "message", T: Query, oneof: "do" },
    { no: 3, name: "set_labels", kind: "message", T: Obj, oneof: "do" },
    { no: 4, name: "set_annotations", kind: "message", T: Obj, oneof: "do" },
    { no: 51, name: "set_for", kind: "message", T: Duration, oneof: "do" },
    { no: 52, name: "set_keep_firing_for", kind: "message", T: Duration, oneof: "do" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateAlertRuleRequest_Mutation {
    return new UpdateAlertRuleRequest_Mutation().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateAlertRuleRequest_Mutation {
    return new UpdateAlertRuleRequest_Mutation().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateAlertRuleRequest_Mutation {
    return new UpdateAlertRuleRequest_Mutation().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateAlertRuleRequest_Mutation | PlainMessage<UpdateAlertRuleRequest_Mutation> | undefined, b: UpdateAlertRuleRequest_Mutation | PlainMessage<UpdateAlertRuleRequest_Mutation> | undefined): boolean {
    return proto3.util.equals(UpdateAlertRuleRequest_Mutation, a, b);
  }
}

/**
 * @generated from message svc.alert.v1.UpdateAlertRuleResponse
 */
export class UpdateAlertRuleResponse extends Message<UpdateAlertRuleResponse> {
  /**
   * @generated from field: types.v1.AlertRule alert_rule = 1;
   */
  alertRule?: AlertRule;

  constructor(data?: PartialMessage<UpdateAlertRuleResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "svc.alert.v1.UpdateAlertRuleResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "alert_rule", kind: "message", T: AlertRule },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateAlertRuleResponse {
    return new UpdateAlertRuleResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateAlertRuleResponse {
    return new UpdateAlertRuleResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateAlertRuleResponse {
    return new UpdateAlertRuleResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateAlertRuleResponse | PlainMessage<UpdateAlertRuleResponse> | undefined, b: UpdateAlertRuleResponse | PlainMessage<UpdateAlertRuleResponse> | undefined): boolean {
    return proto3.util.equals(UpdateAlertRuleResponse, a, b);
  }
}

/**
 * @generated from message svc.alert.v1.DeleteAlertRuleRequest
 */
export class DeleteAlertRuleRequest extends Message<DeleteAlertRuleRequest> {
  /**
   * @generated from field: int64 environment_id = 101;
   */
  environmentId = protoInt64.zero;

  /**
   * @generated from field: string stack_id = 102;
   */
  stackId = "";

  /**
   * @generated from field: string group_name = 103;
   */
  groupName = "";

  /**
   * @generated from field: string name = 1;
   */
  name = "";

  constructor(data?: PartialMessage<DeleteAlertRuleRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "svc.alert.v1.DeleteAlertRuleRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 101, name: "environment_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 102, name: "stack_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 103, name: "group_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteAlertRuleRequest {
    return new DeleteAlertRuleRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteAlertRuleRequest {
    return new DeleteAlertRuleRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteAlertRuleRequest {
    return new DeleteAlertRuleRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteAlertRuleRequest | PlainMessage<DeleteAlertRuleRequest> | undefined, b: DeleteAlertRuleRequest | PlainMessage<DeleteAlertRuleRequest> | undefined): boolean {
    return proto3.util.equals(DeleteAlertRuleRequest, a, b);
  }
}

/**
 * @generated from message svc.alert.v1.DeleteAlertRuleResponse
 */
export class DeleteAlertRuleResponse extends Message<DeleteAlertRuleResponse> {
  constructor(data?: PartialMessage<DeleteAlertRuleResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "svc.alert.v1.DeleteAlertRuleResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteAlertRuleResponse {
    return new DeleteAlertRuleResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteAlertRuleResponse {
    return new DeleteAlertRuleResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteAlertRuleResponse {
    return new DeleteAlertRuleResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteAlertRuleResponse | PlainMessage<DeleteAlertRuleResponse> | undefined, b: DeleteAlertRuleResponse | PlainMessage<DeleteAlertRuleResponse> | undefined): boolean {
    return proto3.util.equals(DeleteAlertRuleResponse, a, b);
  }
}

/**
 * @generated from message svc.alert.v1.ListAlertRuleRequest
 */
export class ListAlertRuleRequest extends Message<ListAlertRuleRequest> {
  /**
   * @generated from field: int64 environment_id = 101;
   */
  environmentId = protoInt64.zero;

  /**
   * @generated from field: string stack_id = 102;
   */
  stackId = "";

  /**
   * @generated from field: string group_name = 103;
   */
  groupName = "";

  /**
   * @generated from field: types.v1.Cursor cursor = 2;
   */
  cursor?: Cursor;

  /**
   * @generated from field: int32 limit = 3;
   */
  limit = 0;

  constructor(data?: PartialMessage<ListAlertRuleRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "svc.alert.v1.ListAlertRuleRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 101, name: "environment_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 102, name: "stack_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 103, name: "group_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "cursor", kind: "message", T: Cursor },
    { no: 3, name: "limit", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListAlertRuleRequest {
    return new ListAlertRuleRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListAlertRuleRequest {
    return new ListAlertRuleRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListAlertRuleRequest {
    return new ListAlertRuleRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListAlertRuleRequest | PlainMessage<ListAlertRuleRequest> | undefined, b: ListAlertRuleRequest | PlainMessage<ListAlertRuleRequest> | undefined): boolean {
    return proto3.util.equals(ListAlertRuleRequest, a, b);
  }
}

/**
 * @generated from message svc.alert.v1.ListAlertRuleResponse
 */
export class ListAlertRuleResponse extends Message<ListAlertRuleResponse> {
  /**
   * @generated from field: types.v1.Cursor next = 100;
   */
  next?: Cursor;

  /**
   * @generated from field: repeated svc.alert.v1.ListAlertRuleResponse.ListItem items = 200;
   */
  items: ListAlertRuleResponse_ListItem[] = [];

  constructor(data?: PartialMessage<ListAlertRuleResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "svc.alert.v1.ListAlertRuleResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 100, name: "next", kind: "message", T: Cursor },
    { no: 200, name: "items", kind: "message", T: ListAlertRuleResponse_ListItem, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListAlertRuleResponse {
    return new ListAlertRuleResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListAlertRuleResponse {
    return new ListAlertRuleResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListAlertRuleResponse {
    return new ListAlertRuleResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListAlertRuleResponse | PlainMessage<ListAlertRuleResponse> | undefined, b: ListAlertRuleResponse | PlainMessage<ListAlertRuleResponse> | undefined): boolean {
    return proto3.util.equals(ListAlertRuleResponse, a, b);
  }
}

/**
 * @generated from message svc.alert.v1.ListAlertRuleResponse.ListItem
 */
export class ListAlertRuleResponse_ListItem extends Message<ListAlertRuleResponse_ListItem> {
  /**
   * @generated from field: types.v1.AlertRule alert_rule = 1;
   */
  alertRule?: AlertRule;

  constructor(data?: PartialMessage<ListAlertRuleResponse_ListItem>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "svc.alert.v1.ListAlertRuleResponse.ListItem";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "alert_rule", kind: "message", T: AlertRule },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListAlertRuleResponse_ListItem {
    return new ListAlertRuleResponse_ListItem().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListAlertRuleResponse_ListItem {
    return new ListAlertRuleResponse_ListItem().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListAlertRuleResponse_ListItem {
    return new ListAlertRuleResponse_ListItem().fromJsonString(jsonString, options);
  }

  static equals(a: ListAlertRuleResponse_ListItem | PlainMessage<ListAlertRuleResponse_ListItem> | undefined, b: ListAlertRuleResponse_ListItem | PlainMessage<ListAlertRuleResponse_ListItem> | undefined): boolean {
    return proto3.util.equals(ListAlertRuleResponse_ListItem, a, b);
  }
}

