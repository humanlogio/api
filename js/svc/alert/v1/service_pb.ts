// @generated by protoc-gen-es v1.10.0 with parameter "target=ts,import_extension=none"
// @generated from file svc/alert/v1/service.proto (package svc.alert.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Duration, Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { Query } from "../../../types/v1/query_pb";
import { Obj } from "../../../types/v1/types_pb";
import { AlertRule } from "../../../types/v1/alert_pb";
import { Cursor } from "../../../types/v1/cursor_pb";

/**
 * @generated from message svc.alert.v1.CreateAlertRuleRequest
 */
export class CreateAlertRuleRequest extends Message<CreateAlertRuleRequest> {
  /**
   * @generated from field: int64 environment_id = 101;
   */
  environmentId = protoInt64.zero;

  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: types.v1.Query expr = 2;
   */
  expr?: Query;

  /**
   * @generated from field: types.v1.Obj labels = 3;
   */
  labels?: Obj;

  /**
   * @generated from field: types.v1.Obj annotations = 4;
   */
  annotations?: Obj;

  /**
   * @generated from field: google.protobuf.Duration for = 51;
   */
  for?: Duration;

  /**
   * @generated from field: google.protobuf.Duration keep_firing_for = 52;
   */
  keepFiringFor?: Duration;

  constructor(data?: PartialMessage<CreateAlertRuleRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "svc.alert.v1.CreateAlertRuleRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 101, name: "environment_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "expr", kind: "message", T: Query },
    { no: 3, name: "labels", kind: "message", T: Obj },
    { no: 4, name: "annotations", kind: "message", T: Obj },
    { no: 51, name: "for", kind: "message", T: Duration },
    { no: 52, name: "keep_firing_for", kind: "message", T: Duration },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateAlertRuleRequest {
    return new CreateAlertRuleRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateAlertRuleRequest {
    return new CreateAlertRuleRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateAlertRuleRequest {
    return new CreateAlertRuleRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateAlertRuleRequest | PlainMessage<CreateAlertRuleRequest> | undefined, b: CreateAlertRuleRequest | PlainMessage<CreateAlertRuleRequest> | undefined): boolean {
    return proto3.util.equals(CreateAlertRuleRequest, a, b);
  }
}

/**
 * @generated from message svc.alert.v1.CreateAlertRuleResponse
 */
export class CreateAlertRuleResponse extends Message<CreateAlertRuleResponse> {
  /**
   * @generated from field: types.v1.AlertRule alert_rule = 1;
   */
  alertRule?: AlertRule;

  constructor(data?: PartialMessage<CreateAlertRuleResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "svc.alert.v1.CreateAlertRuleResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "alert_rule", kind: "message", T: AlertRule },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateAlertRuleResponse {
    return new CreateAlertRuleResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateAlertRuleResponse {
    return new CreateAlertRuleResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateAlertRuleResponse {
    return new CreateAlertRuleResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateAlertRuleResponse | PlainMessage<CreateAlertRuleResponse> | undefined, b: CreateAlertRuleResponse | PlainMessage<CreateAlertRuleResponse> | undefined): boolean {
    return proto3.util.equals(CreateAlertRuleResponse, a, b);
  }
}

/**
 * @generated from message svc.alert.v1.GetAlertRuleRequest
 */
export class GetAlertRuleRequest extends Message<GetAlertRuleRequest> {
  /**
   * @generated from field: int64 environment_id = 101;
   */
  environmentId = protoInt64.zero;

  /**
   * @generated from field: int64 id = 1;
   */
  id = protoInt64.zero;

  constructor(data?: PartialMessage<GetAlertRuleRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "svc.alert.v1.GetAlertRuleRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 101, name: "environment_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 1, name: "id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAlertRuleRequest {
    return new GetAlertRuleRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAlertRuleRequest {
    return new GetAlertRuleRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAlertRuleRequest {
    return new GetAlertRuleRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetAlertRuleRequest | PlainMessage<GetAlertRuleRequest> | undefined, b: GetAlertRuleRequest | PlainMessage<GetAlertRuleRequest> | undefined): boolean {
    return proto3.util.equals(GetAlertRuleRequest, a, b);
  }
}

/**
 * @generated from message svc.alert.v1.GetAlertRuleResponse
 */
export class GetAlertRuleResponse extends Message<GetAlertRuleResponse> {
  /**
   * @generated from field: types.v1.AlertRule alert_rule = 1;
   */
  alertRule?: AlertRule;

  constructor(data?: PartialMessage<GetAlertRuleResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "svc.alert.v1.GetAlertRuleResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "alert_rule", kind: "message", T: AlertRule },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAlertRuleResponse {
    return new GetAlertRuleResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAlertRuleResponse {
    return new GetAlertRuleResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAlertRuleResponse {
    return new GetAlertRuleResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetAlertRuleResponse | PlainMessage<GetAlertRuleResponse> | undefined, b: GetAlertRuleResponse | PlainMessage<GetAlertRuleResponse> | undefined): boolean {
    return proto3.util.equals(GetAlertRuleResponse, a, b);
  }
}

/**
 * @generated from message svc.alert.v1.UpdateAlertRuleRequest
 */
export class UpdateAlertRuleRequest extends Message<UpdateAlertRuleRequest> {
  /**
   * @generated from field: int64 environment_id = 101;
   */
  environmentId = protoInt64.zero;

  /**
   * @generated from field: int64 id = 1;
   */
  id = protoInt64.zero;

  /**
   * @generated from field: repeated svc.alert.v1.UpdateAlertRuleRequest.Mutation mutations = 2;
   */
  mutations: UpdateAlertRuleRequest_Mutation[] = [];

  constructor(data?: PartialMessage<UpdateAlertRuleRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "svc.alert.v1.UpdateAlertRuleRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 101, name: "environment_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 1, name: "id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "mutations", kind: "message", T: UpdateAlertRuleRequest_Mutation, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateAlertRuleRequest {
    return new UpdateAlertRuleRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateAlertRuleRequest {
    return new UpdateAlertRuleRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateAlertRuleRequest {
    return new UpdateAlertRuleRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateAlertRuleRequest | PlainMessage<UpdateAlertRuleRequest> | undefined, b: UpdateAlertRuleRequest | PlainMessage<UpdateAlertRuleRequest> | undefined): boolean {
    return proto3.util.equals(UpdateAlertRuleRequest, a, b);
  }
}

/**
 * @generated from message svc.alert.v1.UpdateAlertRuleRequest.Mutation
 */
export class UpdateAlertRuleRequest_Mutation extends Message<UpdateAlertRuleRequest_Mutation> {
  /**
   * @generated from oneof svc.alert.v1.UpdateAlertRuleRequest.Mutation.do
   */
  do: {
    /**
     * @generated from field: string set_name = 1;
     */
    value: string;
    case: "setName";
  } | {
    /**
     * @generated from field: types.v1.Query set_expr = 2;
     */
    value: Query;
    case: "setExpr";
  } | {
    /**
     * @generated from field: types.v1.Obj set_labels = 3;
     */
    value: Obj;
    case: "setLabels";
  } | {
    /**
     * @generated from field: types.v1.Obj set_annotations = 4;
     */
    value: Obj;
    case: "setAnnotations";
  } | {
    /**
     * @generated from field: google.protobuf.Duration set_for = 51;
     */
    value: Duration;
    case: "setFor";
  } | {
    /**
     * @generated from field: google.protobuf.Duration set_keep_firing_for = 52;
     */
    value: Duration;
    case: "setKeepFiringFor";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<UpdateAlertRuleRequest_Mutation>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "svc.alert.v1.UpdateAlertRuleRequest.Mutation";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "set_name", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "do" },
    { no: 2, name: "set_expr", kind: "message", T: Query, oneof: "do" },
    { no: 3, name: "set_labels", kind: "message", T: Obj, oneof: "do" },
    { no: 4, name: "set_annotations", kind: "message", T: Obj, oneof: "do" },
    { no: 51, name: "set_for", kind: "message", T: Duration, oneof: "do" },
    { no: 52, name: "set_keep_firing_for", kind: "message", T: Duration, oneof: "do" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateAlertRuleRequest_Mutation {
    return new UpdateAlertRuleRequest_Mutation().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateAlertRuleRequest_Mutation {
    return new UpdateAlertRuleRequest_Mutation().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateAlertRuleRequest_Mutation {
    return new UpdateAlertRuleRequest_Mutation().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateAlertRuleRequest_Mutation | PlainMessage<UpdateAlertRuleRequest_Mutation> | undefined, b: UpdateAlertRuleRequest_Mutation | PlainMessage<UpdateAlertRuleRequest_Mutation> | undefined): boolean {
    return proto3.util.equals(UpdateAlertRuleRequest_Mutation, a, b);
  }
}

/**
 * @generated from message svc.alert.v1.UpdateAlertRuleResponse
 */
export class UpdateAlertRuleResponse extends Message<UpdateAlertRuleResponse> {
  /**
   * @generated from field: types.v1.AlertRule alert_rule = 1;
   */
  alertRule?: AlertRule;

  constructor(data?: PartialMessage<UpdateAlertRuleResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "svc.alert.v1.UpdateAlertRuleResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "alert_rule", kind: "message", T: AlertRule },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateAlertRuleResponse {
    return new UpdateAlertRuleResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateAlertRuleResponse {
    return new UpdateAlertRuleResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateAlertRuleResponse {
    return new UpdateAlertRuleResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateAlertRuleResponse | PlainMessage<UpdateAlertRuleResponse> | undefined, b: UpdateAlertRuleResponse | PlainMessage<UpdateAlertRuleResponse> | undefined): boolean {
    return proto3.util.equals(UpdateAlertRuleResponse, a, b);
  }
}

/**
 * @generated from message svc.alert.v1.DeleteAlertRuleRequest
 */
export class DeleteAlertRuleRequest extends Message<DeleteAlertRuleRequest> {
  /**
   * @generated from field: int64 environment_id = 101;
   */
  environmentId = protoInt64.zero;

  /**
   * @generated from field: int64 id = 1;
   */
  id = protoInt64.zero;

  constructor(data?: PartialMessage<DeleteAlertRuleRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "svc.alert.v1.DeleteAlertRuleRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 101, name: "environment_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 1, name: "id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteAlertRuleRequest {
    return new DeleteAlertRuleRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteAlertRuleRequest {
    return new DeleteAlertRuleRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteAlertRuleRequest {
    return new DeleteAlertRuleRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteAlertRuleRequest | PlainMessage<DeleteAlertRuleRequest> | undefined, b: DeleteAlertRuleRequest | PlainMessage<DeleteAlertRuleRequest> | undefined): boolean {
    return proto3.util.equals(DeleteAlertRuleRequest, a, b);
  }
}

/**
 * @generated from message svc.alert.v1.DeleteAlertRuleResponse
 */
export class DeleteAlertRuleResponse extends Message<DeleteAlertRuleResponse> {
  constructor(data?: PartialMessage<DeleteAlertRuleResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "svc.alert.v1.DeleteAlertRuleResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteAlertRuleResponse {
    return new DeleteAlertRuleResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteAlertRuleResponse {
    return new DeleteAlertRuleResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteAlertRuleResponse {
    return new DeleteAlertRuleResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteAlertRuleResponse | PlainMessage<DeleteAlertRuleResponse> | undefined, b: DeleteAlertRuleResponse | PlainMessage<DeleteAlertRuleResponse> | undefined): boolean {
    return proto3.util.equals(DeleteAlertRuleResponse, a, b);
  }
}

/**
 * @generated from message svc.alert.v1.ListAlertRulesRequest
 */
export class ListAlertRulesRequest extends Message<ListAlertRulesRequest> {
  /**
   * @generated from field: int64 environment_id = 101;
   */
  environmentId = protoInt64.zero;

  /**
   * @generated from field: types.v1.Cursor cursor = 102;
   */
  cursor?: Cursor;

  /**
   * @generated from field: int32 limit = 103;
   */
  limit = 0;

  constructor(data?: PartialMessage<ListAlertRulesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "svc.alert.v1.ListAlertRulesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 101, name: "environment_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 102, name: "cursor", kind: "message", T: Cursor },
    { no: 103, name: "limit", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListAlertRulesRequest {
    return new ListAlertRulesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListAlertRulesRequest {
    return new ListAlertRulesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListAlertRulesRequest {
    return new ListAlertRulesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListAlertRulesRequest | PlainMessage<ListAlertRulesRequest> | undefined, b: ListAlertRulesRequest | PlainMessage<ListAlertRulesRequest> | undefined): boolean {
    return proto3.util.equals(ListAlertRulesRequest, a, b);
  }
}

/**
 * @generated from message svc.alert.v1.ListAlertRulesResponse
 */
export class ListAlertRulesResponse extends Message<ListAlertRulesResponse> {
  /**
   * @generated from field: types.v1.Cursor next = 100;
   */
  next?: Cursor;

  /**
   * @generated from field: repeated svc.alert.v1.ListAlertRulesResponse.ListItem items = 200;
   */
  items: ListAlertRulesResponse_ListItem[] = [];

  constructor(data?: PartialMessage<ListAlertRulesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "svc.alert.v1.ListAlertRulesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 100, name: "next", kind: "message", T: Cursor },
    { no: 200, name: "items", kind: "message", T: ListAlertRulesResponse_ListItem, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListAlertRulesResponse {
    return new ListAlertRulesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListAlertRulesResponse {
    return new ListAlertRulesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListAlertRulesResponse {
    return new ListAlertRulesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListAlertRulesResponse | PlainMessage<ListAlertRulesResponse> | undefined, b: ListAlertRulesResponse | PlainMessage<ListAlertRulesResponse> | undefined): boolean {
    return proto3.util.equals(ListAlertRulesResponse, a, b);
  }
}

/**
 * @generated from message svc.alert.v1.ListAlertRulesResponse.ListItem
 */
export class ListAlertRulesResponse_ListItem extends Message<ListAlertRulesResponse_ListItem> {
  /**
   * @generated from field: types.v1.AlertRule alert_rule = 2;
   */
  alertRule?: AlertRule;

  constructor(data?: PartialMessage<ListAlertRulesResponse_ListItem>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "svc.alert.v1.ListAlertRulesResponse.ListItem";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "alert_rule", kind: "message", T: AlertRule },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListAlertRulesResponse_ListItem {
    return new ListAlertRulesResponse_ListItem().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListAlertRulesResponse_ListItem {
    return new ListAlertRulesResponse_ListItem().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListAlertRulesResponse_ListItem {
    return new ListAlertRulesResponse_ListItem().fromJsonString(jsonString, options);
  }

  static equals(a: ListAlertRulesResponse_ListItem | PlainMessage<ListAlertRulesResponse_ListItem> | undefined, b: ListAlertRulesResponse_ListItem | PlainMessage<ListAlertRulesResponse_ListItem> | undefined): boolean {
    return proto3.util.equals(ListAlertRulesResponse_ListItem, a, b);
  }
}

