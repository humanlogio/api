// @generated by protoc-gen-es v1.10.1 with parameter "target=ts,import_extension=none"
// @generated from file svc/query/v1/trace_service.proto (package svc.query.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { Span, Trace } from "../../../types/v1/otel_tracing_pb";

/**
 * @generated from message svc.query.v1.GetTraceRequest
 */
export class GetTraceRequest extends Message<GetTraceRequest> {
  /**
   * @generated from field: int64 environment_id = 1;
   */
  environmentId = protoInt64.zero;

  /**
   * @generated from oneof svc.query.v1.GetTraceRequest.by
   */
  by: {
    /**
     * @generated from field: string trace_id = 201;
     */
    value: string;
    case: "traceId";
  } | {
    /**
     * @generated from field: string span_id = 202;
     */
    value: string;
    case: "spanId";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<GetTraceRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "svc.query.v1.GetTraceRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "environment_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 201, name: "trace_id", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "by" },
    { no: 202, name: "span_id", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "by" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetTraceRequest {
    return new GetTraceRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetTraceRequest {
    return new GetTraceRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetTraceRequest {
    return new GetTraceRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetTraceRequest | PlainMessage<GetTraceRequest> | undefined, b: GetTraceRequest | PlainMessage<GetTraceRequest> | undefined): boolean {
    return proto3.util.equals(GetTraceRequest, a, b);
  }
}

/**
 * @generated from message svc.query.v1.GetTraceResponse
 */
export class GetTraceResponse extends Message<GetTraceResponse> {
  /**
   * @generated from field: types.v1.Trace trace = 1;
   */
  trace?: Trace;

  constructor(data?: PartialMessage<GetTraceResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "svc.query.v1.GetTraceResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "trace", kind: "message", T: Trace },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetTraceResponse {
    return new GetTraceResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetTraceResponse {
    return new GetTraceResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetTraceResponse {
    return new GetTraceResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetTraceResponse | PlainMessage<GetTraceResponse> | undefined, b: GetTraceResponse | PlainMessage<GetTraceResponse> | undefined): boolean {
    return proto3.util.equals(GetTraceResponse, a, b);
  }
}

/**
 * @generated from message svc.query.v1.GetSpanRequest
 */
export class GetSpanRequest extends Message<GetSpanRequest> {
  /**
   * @generated from field: int64 environment_id = 1;
   */
  environmentId = protoInt64.zero;

  /**
   * @generated from field: string span_id = 2;
   */
  spanId = "";

  constructor(data?: PartialMessage<GetSpanRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "svc.query.v1.GetSpanRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "environment_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "span_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetSpanRequest {
    return new GetSpanRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetSpanRequest {
    return new GetSpanRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetSpanRequest {
    return new GetSpanRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetSpanRequest | PlainMessage<GetSpanRequest> | undefined, b: GetSpanRequest | PlainMessage<GetSpanRequest> | undefined): boolean {
    return proto3.util.equals(GetSpanRequest, a, b);
  }
}

/**
 * @generated from message svc.query.v1.GetSpanResponse
 */
export class GetSpanResponse extends Message<GetSpanResponse> {
  /**
   * @generated from field: types.v1.Span span = 1;
   */
  span?: Span;

  constructor(data?: PartialMessage<GetSpanResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "svc.query.v1.GetSpanResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "span", kind: "message", T: Span },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetSpanResponse {
    return new GetSpanResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetSpanResponse {
    return new GetSpanResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetSpanResponse {
    return new GetSpanResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetSpanResponse | PlainMessage<GetSpanResponse> | undefined, b: GetSpanResponse | PlainMessage<GetSpanResponse> | undefined): boolean {
    return proto3.util.equals(GetSpanResponse, a, b);
  }
}

