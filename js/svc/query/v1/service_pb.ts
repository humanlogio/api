// @generated by protoc-gen-es v1.10.0 with parameter "target=ts,import_extension=none"
// @generated from file svc/query/v1/service.proto (package svc.query.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Duration, Message, proto3, protoInt64, Timestamp } from "@bufbuild/protobuf";
import { Query } from "../../../types/v1/query_pb";
import { DataStreamType } from "../../../types/v1/types_pb";
import { Cursor } from "../../../types/v1/cursor_pb";
import { Data } from "../../../types/v1/data_pb";
import { Symbol } from "../../../types/v1/symbol_pb";

/**
 * @generated from message svc.query.v1.SummarizeEventsRequest
 */
export class SummarizeEventsRequest extends Message<SummarizeEventsRequest> {
  /**
   * @generated from field: int64 environment_id = 1;
   */
  environmentId = protoInt64.zero;

  /**
   * @generated from field: optional google.protobuf.Timestamp from = 2;
   */
  from?: Timestamp;

  /**
   * @generated from field: optional google.protobuf.Timestamp to = 3;
   */
  to?: Timestamp;

  /**
   * @generated from field: uint32 bucket_count = 4;
   */
  bucketCount = 0;

  constructor(data?: PartialMessage<SummarizeEventsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "svc.query.v1.SummarizeEventsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "environment_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "from", kind: "message", T: Timestamp, opt: true },
    { no: 3, name: "to", kind: "message", T: Timestamp, opt: true },
    { no: 4, name: "bucket_count", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SummarizeEventsRequest {
    return new SummarizeEventsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SummarizeEventsRequest {
    return new SummarizeEventsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SummarizeEventsRequest {
    return new SummarizeEventsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SummarizeEventsRequest | PlainMessage<SummarizeEventsRequest> | undefined, b: SummarizeEventsRequest | PlainMessage<SummarizeEventsRequest> | undefined): boolean {
    return proto3.util.equals(SummarizeEventsRequest, a, b);
  }
}

/**
 * @generated from message svc.query.v1.SummarizeEventsResponse
 */
export class SummarizeEventsResponse extends Message<SummarizeEventsResponse> {
  /**
   * @generated from field: google.protobuf.Duration bucket_width = 1;
   */
  bucketWidth?: Duration;

  /**
   * @generated from field: repeated svc.query.v1.SummarizeEventsResponse.Bucket buckets = 2;
   */
  buckets: SummarizeEventsResponse_Bucket[] = [];

  constructor(data?: PartialMessage<SummarizeEventsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "svc.query.v1.SummarizeEventsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "bucket_width", kind: "message", T: Duration },
    { no: 2, name: "buckets", kind: "message", T: SummarizeEventsResponse_Bucket, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SummarizeEventsResponse {
    return new SummarizeEventsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SummarizeEventsResponse {
    return new SummarizeEventsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SummarizeEventsResponse {
    return new SummarizeEventsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SummarizeEventsResponse | PlainMessage<SummarizeEventsResponse> | undefined, b: SummarizeEventsResponse | PlainMessage<SummarizeEventsResponse> | undefined): boolean {
    return proto3.util.equals(SummarizeEventsResponse, a, b);
  }
}

/**
 * @generated from message svc.query.v1.SummarizeEventsResponse.Bucket
 */
export class SummarizeEventsResponse_Bucket extends Message<SummarizeEventsResponse_Bucket> {
  /**
   * @generated from field: google.protobuf.Timestamp ts = 1;
   */
  ts?: Timestamp;

  /**
   * @generated from field: uint64 event_count = 2;
   */
  eventCount = protoInt64.zero;

  constructor(data?: PartialMessage<SummarizeEventsResponse_Bucket>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "svc.query.v1.SummarizeEventsResponse.Bucket";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ts", kind: "message", T: Timestamp },
    { no: 2, name: "event_count", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SummarizeEventsResponse_Bucket {
    return new SummarizeEventsResponse_Bucket().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SummarizeEventsResponse_Bucket {
    return new SummarizeEventsResponse_Bucket().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SummarizeEventsResponse_Bucket {
    return new SummarizeEventsResponse_Bucket().fromJsonString(jsonString, options);
  }

  static equals(a: SummarizeEventsResponse_Bucket | PlainMessage<SummarizeEventsResponse_Bucket> | undefined, b: SummarizeEventsResponse_Bucket | PlainMessage<SummarizeEventsResponse_Bucket> | undefined): boolean {
    return proto3.util.equals(SummarizeEventsResponse_Bucket, a, b);
  }
}

/**
 * @generated from message svc.query.v1.ParseRequest
 */
export class ParseRequest extends Message<ParseRequest> {
  /**
   * @generated from field: string query = 1;
   */
  query = "";

  constructor(data?: PartialMessage<ParseRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "svc.query.v1.ParseRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "query", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ParseRequest {
    return new ParseRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ParseRequest {
    return new ParseRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ParseRequest {
    return new ParseRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ParseRequest | PlainMessage<ParseRequest> | undefined, b: ParseRequest | PlainMessage<ParseRequest> | undefined): boolean {
    return proto3.util.equals(ParseRequest, a, b);
  }
}

/**
 * @generated from message svc.query.v1.ParseResponse
 */
export class ParseResponse extends Message<ParseResponse> {
  /**
   * @generated from field: types.v1.Query query = 1;
   */
  query?: Query;

  /**
   * @generated from field: types.v1.DataStreamType data_type = 2;
   */
  dataType?: DataStreamType;

  constructor(data?: PartialMessage<ParseResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "svc.query.v1.ParseResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "query", kind: "message", T: Query },
    { no: 2, name: "data_type", kind: "message", T: DataStreamType },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ParseResponse {
    return new ParseResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ParseResponse {
    return new ParseResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ParseResponse {
    return new ParseResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ParseResponse | PlainMessage<ParseResponse> | undefined, b: ParseResponse | PlainMessage<ParseResponse> | undefined): boolean {
    return proto3.util.equals(ParseResponse, a, b);
  }
}

/**
 * @generated from message svc.query.v1.FormatRequest
 */
export class FormatRequest extends Message<FormatRequest> {
  /**
   * @generated from oneof svc.query.v1.FormatRequest.query
   */
  query: {
    /**
     * @generated from field: string raw = 1;
     */
    value: string;
    case: "raw";
  } | {
    /**
     * @generated from field: types.v1.Query parsed = 2;
     */
    value: Query;
    case: "parsed";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<FormatRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "svc.query.v1.FormatRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "raw", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "query" },
    { no: 2, name: "parsed", kind: "message", T: Query, oneof: "query" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FormatRequest {
    return new FormatRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FormatRequest {
    return new FormatRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FormatRequest {
    return new FormatRequest().fromJsonString(jsonString, options);
  }

  static equals(a: FormatRequest | PlainMessage<FormatRequest> | undefined, b: FormatRequest | PlainMessage<FormatRequest> | undefined): boolean {
    return proto3.util.equals(FormatRequest, a, b);
  }
}

/**
 * @generated from message svc.query.v1.FormatResponse
 */
export class FormatResponse extends Message<FormatResponse> {
  /**
   * @generated from field: string formatted = 1;
   */
  formatted = "";

  constructor(data?: PartialMessage<FormatResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "svc.query.v1.FormatResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "formatted", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FormatResponse {
    return new FormatResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FormatResponse {
    return new FormatResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FormatResponse {
    return new FormatResponse().fromJsonString(jsonString, options);
  }

  static equals(a: FormatResponse | PlainMessage<FormatResponse> | undefined, b: FormatResponse | PlainMessage<FormatResponse> | undefined): boolean {
    return proto3.util.equals(FormatResponse, a, b);
  }
}

/**
 * @generated from message svc.query.v1.QueryRequest
 */
export class QueryRequest extends Message<QueryRequest> {
  /**
   * @generated from field: int64 environment_id = 101;
   */
  environmentId = protoInt64.zero;

  /**
   * @generated from field: types.v1.Cursor cursor = 102;
   */
  cursor?: Cursor;

  /**
   * @generated from field: int32 limit = 103;
   */
  limit = 0;

  /**
   * @generated from field: types.v1.Query query = 2;
   */
  query?: Query;

  constructor(data?: PartialMessage<QueryRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "svc.query.v1.QueryRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 101, name: "environment_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 102, name: "cursor", kind: "message", T: Cursor },
    { no: 103, name: "limit", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "query", kind: "message", T: Query },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryRequest {
    return new QueryRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryRequest {
    return new QueryRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryRequest {
    return new QueryRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryRequest | PlainMessage<QueryRequest> | undefined, b: QueryRequest | PlainMessage<QueryRequest> | undefined): boolean {
    return proto3.util.equals(QueryRequest, a, b);
  }
}

/**
 * @generated from message svc.query.v1.QueryResponse
 */
export class QueryResponse extends Message<QueryResponse> {
  /**
   * @generated from field: types.v1.Cursor next = 100;
   */
  next?: Cursor;

  /**
   * @generated from field: types.v1.Data data = 200;
   */
  data?: Data;

  constructor(data?: PartialMessage<QueryResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "svc.query.v1.QueryResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 100, name: "next", kind: "message", T: Cursor },
    { no: 200, name: "data", kind: "message", T: Data },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryResponse {
    return new QueryResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryResponse {
    return new QueryResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryResponse {
    return new QueryResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryResponse | PlainMessage<QueryResponse> | undefined, b: QueryResponse | PlainMessage<QueryResponse> | undefined): boolean {
    return proto3.util.equals(QueryResponse, a, b);
  }
}

/**
 * @generated from message svc.query.v1.StreamRequest
 */
export class StreamRequest extends Message<StreamRequest> {
  /**
   * @generated from field: int64 environment_id = 101;
   */
  environmentId = protoInt64.zero;

  /**
   * @generated from field: types.v1.Query query = 2;
   */
  query?: Query;

  /**
   * max_batch_size is how many objects to batch per individual response
   * - min: 1
   * - max: 1000
   *
   * @generated from field: int64 max_batch_size = 300;
   */
  maxBatchSize = protoInt64.zero;

  /**
   * max_batching_for is how long to wait before sending whatever response
   * have been batched so far, regardless of the `max_batch_size`. 0 means
   * wait indefinitely
   * - min: 16ms
   *
   * @generated from field: google.protobuf.Duration max_batching_for = 301;
   */
  maxBatchingFor?: Duration;

  constructor(data?: PartialMessage<StreamRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "svc.query.v1.StreamRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 101, name: "environment_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "query", kind: "message", T: Query },
    { no: 300, name: "max_batch_size", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 301, name: "max_batching_for", kind: "message", T: Duration },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StreamRequest {
    return new StreamRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StreamRequest {
    return new StreamRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StreamRequest {
    return new StreamRequest().fromJsonString(jsonString, options);
  }

  static equals(a: StreamRequest | PlainMessage<StreamRequest> | undefined, b: StreamRequest | PlainMessage<StreamRequest> | undefined): boolean {
    return proto3.util.equals(StreamRequest, a, b);
  }
}

/**
 * @generated from message svc.query.v1.StreamResponse
 */
export class StreamResponse extends Message<StreamResponse> {
  /**
   * @generated from field: types.v1.Data data = 100;
   */
  data?: Data;

  constructor(data?: PartialMessage<StreamResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "svc.query.v1.StreamResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 100, name: "data", kind: "message", T: Data },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StreamResponse {
    return new StreamResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StreamResponse {
    return new StreamResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StreamResponse {
    return new StreamResponse().fromJsonString(jsonString, options);
  }

  static equals(a: StreamResponse | PlainMessage<StreamResponse> | undefined, b: StreamResponse | PlainMessage<StreamResponse> | undefined): boolean {
    return proto3.util.equals(StreamResponse, a, b);
  }
}

/**
 * @generated from message svc.query.v1.ListSymbolsRequest
 */
export class ListSymbolsRequest extends Message<ListSymbolsRequest> {
  /**
   * @generated from field: int64 environment_id = 101;
   */
  environmentId = protoInt64.zero;

  /**
   * @generated from field: types.v1.Cursor cursor = 102;
   */
  cursor?: Cursor;

  /**
   * @generated from field: int32 limit = 103;
   */
  limit = 0;

  constructor(data?: PartialMessage<ListSymbolsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "svc.query.v1.ListSymbolsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 101, name: "environment_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 102, name: "cursor", kind: "message", T: Cursor },
    { no: 103, name: "limit", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListSymbolsRequest {
    return new ListSymbolsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListSymbolsRequest {
    return new ListSymbolsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListSymbolsRequest {
    return new ListSymbolsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListSymbolsRequest | PlainMessage<ListSymbolsRequest> | undefined, b: ListSymbolsRequest | PlainMessage<ListSymbolsRequest> | undefined): boolean {
    return proto3.util.equals(ListSymbolsRequest, a, b);
  }
}

/**
 * @generated from message svc.query.v1.ListSymbolsResponse
 */
export class ListSymbolsResponse extends Message<ListSymbolsResponse> {
  /**
   * @generated from field: types.v1.Cursor next = 100;
   */
  next?: Cursor;

  /**
   * @generated from field: repeated svc.query.v1.ListSymbolsResponse.ListItem items = 200;
   */
  items: ListSymbolsResponse_ListItem[] = [];

  constructor(data?: PartialMessage<ListSymbolsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "svc.query.v1.ListSymbolsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 100, name: "next", kind: "message", T: Cursor },
    { no: 200, name: "items", kind: "message", T: ListSymbolsResponse_ListItem, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListSymbolsResponse {
    return new ListSymbolsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListSymbolsResponse {
    return new ListSymbolsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListSymbolsResponse {
    return new ListSymbolsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListSymbolsResponse | PlainMessage<ListSymbolsResponse> | undefined, b: ListSymbolsResponse | PlainMessage<ListSymbolsResponse> | undefined): boolean {
    return proto3.util.equals(ListSymbolsResponse, a, b);
  }
}

/**
 * @generated from message svc.query.v1.ListSymbolsResponse.ListItem
 */
export class ListSymbolsResponse_ListItem extends Message<ListSymbolsResponse_ListItem> {
  /**
   * @generated from field: types.v1.Symbol symbol = 2;
   */
  symbol?: Symbol;

  constructor(data?: PartialMessage<ListSymbolsResponse_ListItem>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "svc.query.v1.ListSymbolsResponse.ListItem";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "symbol", kind: "message", T: Symbol },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListSymbolsResponse_ListItem {
    return new ListSymbolsResponse_ListItem().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListSymbolsResponse_ListItem {
    return new ListSymbolsResponse_ListItem().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListSymbolsResponse_ListItem {
    return new ListSymbolsResponse_ListItem().fromJsonString(jsonString, options);
  }

  static equals(a: ListSymbolsResponse_ListItem | PlainMessage<ListSymbolsResponse_ListItem> | undefined, b: ListSymbolsResponse_ListItem | PlainMessage<ListSymbolsResponse_ListItem> | undefined): boolean {
    return proto3.util.equals(ListSymbolsResponse_ListItem, a, b);
  }
}

