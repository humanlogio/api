// @generated by protoc-gen-es v1.10.0 with parameter "target=ts,import_extension=none"
// @generated from file svc/share/v1/service.proto (package svc.share.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { PublicUser } from "../../../types/v1/user_pb";
import { SharedResult, SharedResultVisibility } from "../../../types/v1/shared_result_pb";
import { Cursor } from "../../../types/v1/cursor_pb";
import { QueryHistoryEntry } from "../../../types/v1/query_history_entry_pb";
import { Data } from "../../../types/v1/data_pb";

/**
 * @generated from message svc.share.v1.ViewSharedResultRequest
 */
export class ViewSharedResultRequest extends Message<ViewSharedResultRequest> {
  /**
   * @generated from field: string share_id = 1;
   */
  shareId = "";

  /**
   * @generated from field: string random_prefix = 2;
   */
  randomPrefix = "";

  constructor(data?: PartialMessage<ViewSharedResultRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "svc.share.v1.ViewSharedResultRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "share_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "random_prefix", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ViewSharedResultRequest {
    return new ViewSharedResultRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ViewSharedResultRequest {
    return new ViewSharedResultRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ViewSharedResultRequest {
    return new ViewSharedResultRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ViewSharedResultRequest | PlainMessage<ViewSharedResultRequest> | undefined, b: ViewSharedResultRequest | PlainMessage<ViewSharedResultRequest> | undefined): boolean {
    return proto3.util.equals(ViewSharedResultRequest, a, b);
  }
}

/**
 * @generated from message svc.share.v1.ViewSharedResultResponse
 */
export class ViewSharedResultResponse extends Message<ViewSharedResultResponse> {
  /**
   * @generated from field: types.v1.PublicUser shared_by = 1;
   */
  sharedBy?: PublicUser;

  /**
   * @generated from field: types.v1.SharedResult shared_result = 2;
   */
  sharedResult?: SharedResult;

  constructor(data?: PartialMessage<ViewSharedResultResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "svc.share.v1.ViewSharedResultResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "shared_by", kind: "message", T: PublicUser },
    { no: 2, name: "shared_result", kind: "message", T: SharedResult },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ViewSharedResultResponse {
    return new ViewSharedResultResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ViewSharedResultResponse {
    return new ViewSharedResultResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ViewSharedResultResponse {
    return new ViewSharedResultResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ViewSharedResultResponse | PlainMessage<ViewSharedResultResponse> | undefined, b: ViewSharedResultResponse | PlainMessage<ViewSharedResultResponse> | undefined): boolean {
    return proto3.util.equals(ViewSharedResultResponse, a, b);
  }
}

/**
 * @generated from message svc.share.v1.ListSharedResultRequest
 */
export class ListSharedResultRequest extends Message<ListSharedResultRequest> {
  /**
   * @generated from field: types.v1.Cursor cursor = 1;
   */
  cursor?: Cursor;

  /**
   * @generated from field: int32 limit = 2;
   */
  limit = 0;

  /**
   * @generated from field: types.v1.PublicUser shared_by = 3;
   */
  sharedBy?: PublicUser;

  constructor(data?: PartialMessage<ListSharedResultRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "svc.share.v1.ListSharedResultRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "cursor", kind: "message", T: Cursor },
    { no: 2, name: "limit", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "shared_by", kind: "message", T: PublicUser },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListSharedResultRequest {
    return new ListSharedResultRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListSharedResultRequest {
    return new ListSharedResultRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListSharedResultRequest {
    return new ListSharedResultRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListSharedResultRequest | PlainMessage<ListSharedResultRequest> | undefined, b: ListSharedResultRequest | PlainMessage<ListSharedResultRequest> | undefined): boolean {
    return proto3.util.equals(ListSharedResultRequest, a, b);
  }
}

/**
 * @generated from message svc.share.v1.ListSharedResultResponse
 */
export class ListSharedResultResponse extends Message<ListSharedResultResponse> {
  /**
   * @generated from field: types.v1.Cursor next = 1;
   */
  next?: Cursor;

  /**
   * @generated from field: repeated svc.share.v1.ListSharedResultResponse.ListItem items = 2;
   */
  items: ListSharedResultResponse_ListItem[] = [];

  constructor(data?: PartialMessage<ListSharedResultResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "svc.share.v1.ListSharedResultResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "next", kind: "message", T: Cursor },
    { no: 2, name: "items", kind: "message", T: ListSharedResultResponse_ListItem, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListSharedResultResponse {
    return new ListSharedResultResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListSharedResultResponse {
    return new ListSharedResultResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListSharedResultResponse {
    return new ListSharedResultResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListSharedResultResponse | PlainMessage<ListSharedResultResponse> | undefined, b: ListSharedResultResponse | PlainMessage<ListSharedResultResponse> | undefined): boolean {
    return proto3.util.equals(ListSharedResultResponse, a, b);
  }
}

/**
 * @generated from message svc.share.v1.ListSharedResultResponse.ListItem
 */
export class ListSharedResultResponse_ListItem extends Message<ListSharedResultResponse_ListItem> {
  /**
   * @generated from field: types.v1.SharedResult shared_result = 1;
   */
  sharedResult?: SharedResult;

  constructor(data?: PartialMessage<ListSharedResultResponse_ListItem>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "svc.share.v1.ListSharedResultResponse.ListItem";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "shared_result", kind: "message", T: SharedResult },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListSharedResultResponse_ListItem {
    return new ListSharedResultResponse_ListItem().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListSharedResultResponse_ListItem {
    return new ListSharedResultResponse_ListItem().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListSharedResultResponse_ListItem {
    return new ListSharedResultResponse_ListItem().fromJsonString(jsonString, options);
  }

  static equals(a: ListSharedResultResponse_ListItem | PlainMessage<ListSharedResultResponse_ListItem> | undefined, b: ListSharedResultResponse_ListItem | PlainMessage<ListSharedResultResponse_ListItem> | undefined): boolean {
    return proto3.util.equals(ListSharedResultResponse_ListItem, a, b);
  }
}

/**
 * @generated from message svc.share.v1.CreateUserSharedResultRequest
 */
export class CreateUserSharedResultRequest extends Message<CreateUserSharedResultRequest> {
  /**
   * @generated from field: types.v1.QueryHistoryEntry query = 1;
   */
  query?: QueryHistoryEntry;

  /**
   * @generated from field: types.v1.Data result = 2;
   */
  result?: Data;

  /**
   * @generated from field: types.v1.SharedResultVisibility visibility = 3;
   */
  visibility = SharedResultVisibility.INVALID;

  constructor(data?: PartialMessage<CreateUserSharedResultRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "svc.share.v1.CreateUserSharedResultRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "query", kind: "message", T: QueryHistoryEntry },
    { no: 2, name: "result", kind: "message", T: Data },
    { no: 3, name: "visibility", kind: "enum", T: proto3.getEnumType(SharedResultVisibility) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateUserSharedResultRequest {
    return new CreateUserSharedResultRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateUserSharedResultRequest {
    return new CreateUserSharedResultRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateUserSharedResultRequest {
    return new CreateUserSharedResultRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateUserSharedResultRequest | PlainMessage<CreateUserSharedResultRequest> | undefined, b: CreateUserSharedResultRequest | PlainMessage<CreateUserSharedResultRequest> | undefined): boolean {
    return proto3.util.equals(CreateUserSharedResultRequest, a, b);
  }
}

/**
 * @generated from message svc.share.v1.CreateUserSharedResultResponse
 */
export class CreateUserSharedResultResponse extends Message<CreateUserSharedResultResponse> {
  /**
   * @generated from field: types.v1.SharedResult shared_result = 1;
   */
  sharedResult?: SharedResult;

  constructor(data?: PartialMessage<CreateUserSharedResultResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "svc.share.v1.CreateUserSharedResultResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "shared_result", kind: "message", T: SharedResult },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateUserSharedResultResponse {
    return new CreateUserSharedResultResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateUserSharedResultResponse {
    return new CreateUserSharedResultResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateUserSharedResultResponse {
    return new CreateUserSharedResultResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateUserSharedResultResponse | PlainMessage<CreateUserSharedResultResponse> | undefined, b: CreateUserSharedResultResponse | PlainMessage<CreateUserSharedResultResponse> | undefined): boolean {
    return proto3.util.equals(CreateUserSharedResultResponse, a, b);
  }
}

/**
 * @generated from message svc.share.v1.GetUserSharedResultRequest
 */
export class GetUserSharedResultRequest extends Message<GetUserSharedResultRequest> {
  /**
   * @generated from field: int64 id = 1;
   */
  id = protoInt64.zero;

  constructor(data?: PartialMessage<GetUserSharedResultRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "svc.share.v1.GetUserSharedResultRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetUserSharedResultRequest {
    return new GetUserSharedResultRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetUserSharedResultRequest {
    return new GetUserSharedResultRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetUserSharedResultRequest {
    return new GetUserSharedResultRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetUserSharedResultRequest | PlainMessage<GetUserSharedResultRequest> | undefined, b: GetUserSharedResultRequest | PlainMessage<GetUserSharedResultRequest> | undefined): boolean {
    return proto3.util.equals(GetUserSharedResultRequest, a, b);
  }
}

/**
 * @generated from message svc.share.v1.GetUserSharedResultResponse
 */
export class GetUserSharedResultResponse extends Message<GetUserSharedResultResponse> {
  /**
   * @generated from field: types.v1.SharedResult shared_result = 1;
   */
  sharedResult?: SharedResult;

  constructor(data?: PartialMessage<GetUserSharedResultResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "svc.share.v1.GetUserSharedResultResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "shared_result", kind: "message", T: SharedResult },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetUserSharedResultResponse {
    return new GetUserSharedResultResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetUserSharedResultResponse {
    return new GetUserSharedResultResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetUserSharedResultResponse {
    return new GetUserSharedResultResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetUserSharedResultResponse | PlainMessage<GetUserSharedResultResponse> | undefined, b: GetUserSharedResultResponse | PlainMessage<GetUserSharedResultResponse> | undefined): boolean {
    return proto3.util.equals(GetUserSharedResultResponse, a, b);
  }
}

/**
 * @generated from message svc.share.v1.UpdateUserSharedResultRequest
 */
export class UpdateUserSharedResultRequest extends Message<UpdateUserSharedResultRequest> {
  /**
   * @generated from field: int64 id = 1;
   */
  id = protoInt64.zero;

  /**
   * @generated from field: types.v1.SharedResultVisibility visibility = 2;
   */
  visibility = SharedResultVisibility.INVALID;

  constructor(data?: PartialMessage<UpdateUserSharedResultRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "svc.share.v1.UpdateUserSharedResultRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "visibility", kind: "enum", T: proto3.getEnumType(SharedResultVisibility) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateUserSharedResultRequest {
    return new UpdateUserSharedResultRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateUserSharedResultRequest {
    return new UpdateUserSharedResultRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateUserSharedResultRequest {
    return new UpdateUserSharedResultRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateUserSharedResultRequest | PlainMessage<UpdateUserSharedResultRequest> | undefined, b: UpdateUserSharedResultRequest | PlainMessage<UpdateUserSharedResultRequest> | undefined): boolean {
    return proto3.util.equals(UpdateUserSharedResultRequest, a, b);
  }
}

/**
 * @generated from message svc.share.v1.UpdateUserSharedResultResponse
 */
export class UpdateUserSharedResultResponse extends Message<UpdateUserSharedResultResponse> {
  /**
   * @generated from field: types.v1.SharedResult shared_result = 1;
   */
  sharedResult?: SharedResult;

  constructor(data?: PartialMessage<UpdateUserSharedResultResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "svc.share.v1.UpdateUserSharedResultResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "shared_result", kind: "message", T: SharedResult },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateUserSharedResultResponse {
    return new UpdateUserSharedResultResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateUserSharedResultResponse {
    return new UpdateUserSharedResultResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateUserSharedResultResponse {
    return new UpdateUserSharedResultResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateUserSharedResultResponse | PlainMessage<UpdateUserSharedResultResponse> | undefined, b: UpdateUserSharedResultResponse | PlainMessage<UpdateUserSharedResultResponse> | undefined): boolean {
    return proto3.util.equals(UpdateUserSharedResultResponse, a, b);
  }
}

/**
 * @generated from message svc.share.v1.DeleteUserSharedResultRequest
 */
export class DeleteUserSharedResultRequest extends Message<DeleteUserSharedResultRequest> {
  /**
   * @generated from field: int64 id = 1;
   */
  id = protoInt64.zero;

  constructor(data?: PartialMessage<DeleteUserSharedResultRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "svc.share.v1.DeleteUserSharedResultRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteUserSharedResultRequest {
    return new DeleteUserSharedResultRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteUserSharedResultRequest {
    return new DeleteUserSharedResultRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteUserSharedResultRequest {
    return new DeleteUserSharedResultRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteUserSharedResultRequest | PlainMessage<DeleteUserSharedResultRequest> | undefined, b: DeleteUserSharedResultRequest | PlainMessage<DeleteUserSharedResultRequest> | undefined): boolean {
    return proto3.util.equals(DeleteUserSharedResultRequest, a, b);
  }
}

/**
 * @generated from message svc.share.v1.DeleteUserSharedResultResponse
 */
export class DeleteUserSharedResultResponse extends Message<DeleteUserSharedResultResponse> {
  constructor(data?: PartialMessage<DeleteUserSharedResultResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "svc.share.v1.DeleteUserSharedResultResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteUserSharedResultResponse {
    return new DeleteUserSharedResultResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteUserSharedResultResponse {
    return new DeleteUserSharedResultResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteUserSharedResultResponse {
    return new DeleteUserSharedResultResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteUserSharedResultResponse | PlainMessage<DeleteUserSharedResultResponse> | undefined, b: DeleteUserSharedResultResponse | PlainMessage<DeleteUserSharedResultResponse> | undefined): boolean {
    return proto3.util.equals(DeleteUserSharedResultResponse, a, b);
  }
}

/**
 * @generated from message svc.share.v1.ListUserSharedResultRequest
 */
export class ListUserSharedResultRequest extends Message<ListUserSharedResultRequest> {
  /**
   * @generated from field: types.v1.Cursor cursor = 1;
   */
  cursor?: Cursor;

  /**
   * @generated from field: int32 limit = 2;
   */
  limit = 0;

  constructor(data?: PartialMessage<ListUserSharedResultRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "svc.share.v1.ListUserSharedResultRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "cursor", kind: "message", T: Cursor },
    { no: 2, name: "limit", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListUserSharedResultRequest {
    return new ListUserSharedResultRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListUserSharedResultRequest {
    return new ListUserSharedResultRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListUserSharedResultRequest {
    return new ListUserSharedResultRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListUserSharedResultRequest | PlainMessage<ListUserSharedResultRequest> | undefined, b: ListUserSharedResultRequest | PlainMessage<ListUserSharedResultRequest> | undefined): boolean {
    return proto3.util.equals(ListUserSharedResultRequest, a, b);
  }
}

/**
 * @generated from message svc.share.v1.ListUserSharedResultResponse
 */
export class ListUserSharedResultResponse extends Message<ListUserSharedResultResponse> {
  /**
   * @generated from field: types.v1.Cursor next = 1;
   */
  next?: Cursor;

  /**
   * @generated from field: repeated svc.share.v1.ListUserSharedResultResponse.ListItem items = 2;
   */
  items: ListUserSharedResultResponse_ListItem[] = [];

  constructor(data?: PartialMessage<ListUserSharedResultResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "svc.share.v1.ListUserSharedResultResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "next", kind: "message", T: Cursor },
    { no: 2, name: "items", kind: "message", T: ListUserSharedResultResponse_ListItem, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListUserSharedResultResponse {
    return new ListUserSharedResultResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListUserSharedResultResponse {
    return new ListUserSharedResultResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListUserSharedResultResponse {
    return new ListUserSharedResultResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListUserSharedResultResponse | PlainMessage<ListUserSharedResultResponse> | undefined, b: ListUserSharedResultResponse | PlainMessage<ListUserSharedResultResponse> | undefined): boolean {
    return proto3.util.equals(ListUserSharedResultResponse, a, b);
  }
}

/**
 * @generated from message svc.share.v1.ListUserSharedResultResponse.ListItem
 */
export class ListUserSharedResultResponse_ListItem extends Message<ListUserSharedResultResponse_ListItem> {
  /**
   * @generated from field: types.v1.SharedResult shared_result = 1;
   */
  sharedResult?: SharedResult;

  constructor(data?: PartialMessage<ListUserSharedResultResponse_ListItem>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "svc.share.v1.ListUserSharedResultResponse.ListItem";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "shared_result", kind: "message", T: SharedResult },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListUserSharedResultResponse_ListItem {
    return new ListUserSharedResultResponse_ListItem().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListUserSharedResultResponse_ListItem {
    return new ListUserSharedResultResponse_ListItem().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListUserSharedResultResponse_ListItem {
    return new ListUserSharedResultResponse_ListItem().fromJsonString(jsonString, options);
  }

  static equals(a: ListUserSharedResultResponse_ListItem | PlainMessage<ListUserSharedResultResponse_ListItem> | undefined, b: ListUserSharedResultResponse_ListItem | PlainMessage<ListUserSharedResultResponse_ListItem> | undefined): boolean {
    return proto3.util.equals(ListUserSharedResultResponse_ListItem, a, b);
  }
}

