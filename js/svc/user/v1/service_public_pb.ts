// @generated by protoc-gen-es v1.10.0 with parameter "target=ts,import_extension=none"
// @generated from file svc/user/v1/service_public.proto (package svc.user.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { PublicUser } from "../../../types/v1/user_pb";
import { FavoriteQuery } from "../../../types/v1/favorite_query_pb";
import { Cursor } from "../../../types/v1/cursor_pb";

/**
 * @generated from message svc.user.v1.GetPublicUserRequest
 */
export class GetPublicUserRequest extends Message<GetPublicUserRequest> {
  /**
   * @generated from field: string username = 1;
   */
  username = "";

  constructor(data?: PartialMessage<GetPublicUserRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "svc.user.v1.GetPublicUserRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "username", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetPublicUserRequest {
    return new GetPublicUserRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetPublicUserRequest {
    return new GetPublicUserRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetPublicUserRequest {
    return new GetPublicUserRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetPublicUserRequest | PlainMessage<GetPublicUserRequest> | undefined, b: GetPublicUserRequest | PlainMessage<GetPublicUserRequest> | undefined): boolean {
    return proto3.util.equals(GetPublicUserRequest, a, b);
  }
}

/**
 * @generated from message svc.user.v1.GetPublicUserResponse
 */
export class GetPublicUserResponse extends Message<GetPublicUserResponse> {
  /**
   * @generated from field: types.v1.PublicUser user = 1;
   */
  user?: PublicUser;

  constructor(data?: PartialMessage<GetPublicUserResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "svc.user.v1.GetPublicUserResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user", kind: "message", T: PublicUser },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetPublicUserResponse {
    return new GetPublicUserResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetPublicUserResponse {
    return new GetPublicUserResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetPublicUserResponse {
    return new GetPublicUserResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetPublicUserResponse | PlainMessage<GetPublicUserResponse> | undefined, b: GetPublicUserResponse | PlainMessage<GetPublicUserResponse> | undefined): boolean {
    return proto3.util.equals(GetPublicUserResponse, a, b);
  }
}

/**
 * @generated from message svc.user.v1.GetPublicFavoriteQueryRequest
 */
export class GetPublicFavoriteQueryRequest extends Message<GetPublicFavoriteQueryRequest> {
  /**
   * @generated from field: string username = 1;
   */
  username = "";

  constructor(data?: PartialMessage<GetPublicFavoriteQueryRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "svc.user.v1.GetPublicFavoriteQueryRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "username", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetPublicFavoriteQueryRequest {
    return new GetPublicFavoriteQueryRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetPublicFavoriteQueryRequest {
    return new GetPublicFavoriteQueryRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetPublicFavoriteQueryRequest {
    return new GetPublicFavoriteQueryRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetPublicFavoriteQueryRequest | PlainMessage<GetPublicFavoriteQueryRequest> | undefined, b: GetPublicFavoriteQueryRequest | PlainMessage<GetPublicFavoriteQueryRequest> | undefined): boolean {
    return proto3.util.equals(GetPublicFavoriteQueryRequest, a, b);
  }
}

/**
 * @generated from message svc.user.v1.GetPublicFavoriteQueryResponse
 */
export class GetPublicFavoriteQueryResponse extends Message<GetPublicFavoriteQueryResponse> {
  /**
   * @generated from field: types.v1.FavoriteQuery favorite = 1;
   */
  favorite?: FavoriteQuery;

  constructor(data?: PartialMessage<GetPublicFavoriteQueryResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "svc.user.v1.GetPublicFavoriteQueryResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "favorite", kind: "message", T: FavoriteQuery },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetPublicFavoriteQueryResponse {
    return new GetPublicFavoriteQueryResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetPublicFavoriteQueryResponse {
    return new GetPublicFavoriteQueryResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetPublicFavoriteQueryResponse {
    return new GetPublicFavoriteQueryResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetPublicFavoriteQueryResponse | PlainMessage<GetPublicFavoriteQueryResponse> | undefined, b: GetPublicFavoriteQueryResponse | PlainMessage<GetPublicFavoriteQueryResponse> | undefined): boolean {
    return proto3.util.equals(GetPublicFavoriteQueryResponse, a, b);
  }
}

/**
 * @generated from message svc.user.v1.ListPublicFavoriteQueryRequest
 */
export class ListPublicFavoriteQueryRequest extends Message<ListPublicFavoriteQueryRequest> {
  /**
   * @generated from field: string username = 1;
   */
  username = "";

  /**
   * @generated from field: types.v1.Cursor cursor = 2;
   */
  cursor?: Cursor;

  /**
   * @generated from field: int32 limit = 3;
   */
  limit = 0;

  constructor(data?: PartialMessage<ListPublicFavoriteQueryRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "svc.user.v1.ListPublicFavoriteQueryRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "username", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "cursor", kind: "message", T: Cursor },
    { no: 3, name: "limit", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListPublicFavoriteQueryRequest {
    return new ListPublicFavoriteQueryRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListPublicFavoriteQueryRequest {
    return new ListPublicFavoriteQueryRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListPublicFavoriteQueryRequest {
    return new ListPublicFavoriteQueryRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListPublicFavoriteQueryRequest | PlainMessage<ListPublicFavoriteQueryRequest> | undefined, b: ListPublicFavoriteQueryRequest | PlainMessage<ListPublicFavoriteQueryRequest> | undefined): boolean {
    return proto3.util.equals(ListPublicFavoriteQueryRequest, a, b);
  }
}

/**
 * @generated from message svc.user.v1.ListPublicFavoriteQueryResponse
 */
export class ListPublicFavoriteQueryResponse extends Message<ListPublicFavoriteQueryResponse> {
  /**
   * @generated from field: types.v1.Cursor next = 1;
   */
  next?: Cursor;

  /**
   * @generated from field: repeated svc.user.v1.ListPublicFavoriteQueryResponse.ListItem items = 2;
   */
  items: ListPublicFavoriteQueryResponse_ListItem[] = [];

  constructor(data?: PartialMessage<ListPublicFavoriteQueryResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "svc.user.v1.ListPublicFavoriteQueryResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "next", kind: "message", T: Cursor },
    { no: 2, name: "items", kind: "message", T: ListPublicFavoriteQueryResponse_ListItem, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListPublicFavoriteQueryResponse {
    return new ListPublicFavoriteQueryResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListPublicFavoriteQueryResponse {
    return new ListPublicFavoriteQueryResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListPublicFavoriteQueryResponse {
    return new ListPublicFavoriteQueryResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListPublicFavoriteQueryResponse | PlainMessage<ListPublicFavoriteQueryResponse> | undefined, b: ListPublicFavoriteQueryResponse | PlainMessage<ListPublicFavoriteQueryResponse> | undefined): boolean {
    return proto3.util.equals(ListPublicFavoriteQueryResponse, a, b);
  }
}

/**
 * @generated from message svc.user.v1.ListPublicFavoriteQueryResponse.ListItem
 */
export class ListPublicFavoriteQueryResponse_ListItem extends Message<ListPublicFavoriteQueryResponse_ListItem> {
  /**
   * @generated from field: types.v1.FavoriteQuery favorite = 1;
   */
  favorite?: FavoriteQuery;

  constructor(data?: PartialMessage<ListPublicFavoriteQueryResponse_ListItem>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "svc.user.v1.ListPublicFavoriteQueryResponse.ListItem";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "favorite", kind: "message", T: FavoriteQuery },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListPublicFavoriteQueryResponse_ListItem {
    return new ListPublicFavoriteQueryResponse_ListItem().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListPublicFavoriteQueryResponse_ListItem {
    return new ListPublicFavoriteQueryResponse_ListItem().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListPublicFavoriteQueryResponse_ListItem {
    return new ListPublicFavoriteQueryResponse_ListItem().fromJsonString(jsonString, options);
  }

  static equals(a: ListPublicFavoriteQueryResponse_ListItem | PlainMessage<ListPublicFavoriteQueryResponse_ListItem> | undefined, b: ListPublicFavoriteQueryResponse_ListItem | PlainMessage<ListPublicFavoriteQueryResponse_ListItem> | undefined): boolean {
    return proto3.util.equals(ListPublicFavoriteQueryResponse_ListItem, a, b);
  }
}

