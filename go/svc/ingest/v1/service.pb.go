// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        (unknown)
// source: svc/ingest/v1/service.proto

package ingestv1

import (
	v1 "github.com/humanlogio/api/go/types/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetHeartbeatRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// may change the heartbeat if specified
	MachineId     *uint64 `protobuf:"varint,1,opt,name=machine_id,json=machineId,proto3,oneof" json:"machine_id,omitempty"`
	SessionId     *uint64 `protobuf:"varint,2,opt,name=session_id,json=sessionId,proto3,oneof" json:"session_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetHeartbeatRequest) Reset() {
	*x = GetHeartbeatRequest{}
	mi := &file_svc_ingest_v1_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetHeartbeatRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHeartbeatRequest) ProtoMessage() {}

func (x *GetHeartbeatRequest) ProtoReflect() protoreflect.Message {
	mi := &file_svc_ingest_v1_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHeartbeatRequest.ProtoReflect.Descriptor instead.
func (*GetHeartbeatRequest) Descriptor() ([]byte, []int) {
	return file_svc_ingest_v1_service_proto_rawDescGZIP(), []int{0}
}

func (x *GetHeartbeatRequest) GetMachineId() uint64 {
	if x != nil && x.MachineId != nil {
		return *x.MachineId
	}
	return 0
}

func (x *GetHeartbeatRequest) GetSessionId() uint64 {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return 0
}

type GetHeartbeatResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	HeartbeatIn   *durationpb.Duration   `protobuf:"bytes,1,opt,name=heartbeat_in,json=heartbeatIn,proto3" json:"heartbeat_in,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetHeartbeatResponse) Reset() {
	*x = GetHeartbeatResponse{}
	mi := &file_svc_ingest_v1_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetHeartbeatResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHeartbeatResponse) ProtoMessage() {}

func (x *GetHeartbeatResponse) ProtoReflect() protoreflect.Message {
	mi := &file_svc_ingest_v1_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHeartbeatResponse.ProtoReflect.Descriptor instead.
func (*GetHeartbeatResponse) Descriptor() ([]byte, []int) {
	return file_svc_ingest_v1_service_proto_rawDescGZIP(), []int{1}
}

func (x *GetHeartbeatResponse) GetHeartbeatIn() *durationpb.Duration {
	if x != nil {
		return x.HeartbeatIn
	}
	return nil
}

type IngestRequest struct {
	state     protoimpl.MessageState `protogen:"open.v1"`
	MachineId uint64                 `protobuf:"varint,1,opt,name=machine_id,json=machineId,proto3" json:"machine_id,omitempty"`
	// session ID, unique per machine.
	// if not specified, one will be returned
	SessionId     uint64         `protobuf:"varint,2,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	Events        []*v1.LogEvent `protobuf:"bytes,3,rep,name=events,proto3" json:"events,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IngestRequest) Reset() {
	*x = IngestRequest{}
	mi := &file_svc_ingest_v1_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IngestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IngestRequest) ProtoMessage() {}

func (x *IngestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_svc_ingest_v1_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IngestRequest.ProtoReflect.Descriptor instead.
func (*IngestRequest) Descriptor() ([]byte, []int) {
	return file_svc_ingest_v1_service_proto_rawDescGZIP(), []int{2}
}

func (x *IngestRequest) GetMachineId() uint64 {
	if x != nil {
		return x.MachineId
	}
	return 0
}

func (x *IngestRequest) GetSessionId() uint64 {
	if x != nil {
		return x.SessionId
	}
	return 0
}

func (x *IngestRequest) GetEvents() []*v1.LogEvent {
	if x != nil {
		return x.Events
	}
	return nil
}

type IngestResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SessionId     uint64                 `protobuf:"varint,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	HeartbeatIn   *durationpb.Duration   `protobuf:"bytes,2,opt,name=heartbeat_in,json=heartbeatIn,proto3" json:"heartbeat_in,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IngestResponse) Reset() {
	*x = IngestResponse{}
	mi := &file_svc_ingest_v1_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IngestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IngestResponse) ProtoMessage() {}

func (x *IngestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_svc_ingest_v1_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IngestResponse.ProtoReflect.Descriptor instead.
func (*IngestResponse) Descriptor() ([]byte, []int) {
	return file_svc_ingest_v1_service_proto_rawDescGZIP(), []int{3}
}

func (x *IngestResponse) GetSessionId() uint64 {
	if x != nil {
		return x.SessionId
	}
	return 0
}

func (x *IngestResponse) GetHeartbeatIn() *durationpb.Duration {
	if x != nil {
		return x.HeartbeatIn
	}
	return nil
}

type IngestStreamRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// only evaluated on the first message
	MachineId uint64 `protobuf:"varint,1,opt,name=machine_id,json=machineId,proto3" json:"machine_id,omitempty"`
	// session ID, unique per machine
	SessionId     uint64         `protobuf:"varint,2,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	Events        []*v1.LogEvent `protobuf:"bytes,3,rep,name=events,proto3" json:"events,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IngestStreamRequest) Reset() {
	*x = IngestStreamRequest{}
	mi := &file_svc_ingest_v1_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IngestStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IngestStreamRequest) ProtoMessage() {}

func (x *IngestStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_svc_ingest_v1_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IngestStreamRequest.ProtoReflect.Descriptor instead.
func (*IngestStreamRequest) Descriptor() ([]byte, []int) {
	return file_svc_ingest_v1_service_proto_rawDescGZIP(), []int{4}
}

func (x *IngestStreamRequest) GetMachineId() uint64 {
	if x != nil {
		return x.MachineId
	}
	return 0
}

func (x *IngestStreamRequest) GetSessionId() uint64 {
	if x != nil {
		return x.SessionId
	}
	return 0
}

func (x *IngestStreamRequest) GetEvents() []*v1.LogEvent {
	if x != nil {
		return x.Events
	}
	return nil
}

type IngestStreamResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SessionId     uint64                 `protobuf:"varint,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	HeartbeatIn   *durationpb.Duration   `protobuf:"bytes,2,opt,name=heartbeat_in,json=heartbeatIn,proto3" json:"heartbeat_in,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IngestStreamResponse) Reset() {
	*x = IngestStreamResponse{}
	mi := &file_svc_ingest_v1_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IngestStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IngestStreamResponse) ProtoMessage() {}

func (x *IngestStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_svc_ingest_v1_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IngestStreamResponse.ProtoReflect.Descriptor instead.
func (*IngestStreamResponse) Descriptor() ([]byte, []int) {
	return file_svc_ingest_v1_service_proto_rawDescGZIP(), []int{5}
}

func (x *IngestStreamResponse) GetSessionId() uint64 {
	if x != nil {
		return x.SessionId
	}
	return 0
}

func (x *IngestStreamResponse) GetHeartbeatIn() *durationpb.Duration {
	if x != nil {
		return x.HeartbeatIn
	}
	return nil
}

type IngestBidiStreamRequest struct {
	state  protoimpl.MessageState `protogen:"open.v1"`
	Events []*v1.LogEvent         `protobuf:"bytes,1,rep,name=events,proto3" json:"events,omitempty"`
	// only evaluated on the first message
	MachineId uint64 `protobuf:"varint,2,opt,name=machine_id,json=machineId,proto3" json:"machine_id,omitempty"`
	// Optional session ID to mark as resuming.
	ResumeSessionId uint64 `protobuf:"varint,3,opt,name=resume_session_id,json=resumeSessionId,proto3" json:"resume_session_id,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *IngestBidiStreamRequest) Reset() {
	*x = IngestBidiStreamRequest{}
	mi := &file_svc_ingest_v1_service_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IngestBidiStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IngestBidiStreamRequest) ProtoMessage() {}

func (x *IngestBidiStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_svc_ingest_v1_service_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IngestBidiStreamRequest.ProtoReflect.Descriptor instead.
func (*IngestBidiStreamRequest) Descriptor() ([]byte, []int) {
	return file_svc_ingest_v1_service_proto_rawDescGZIP(), []int{6}
}

func (x *IngestBidiStreamRequest) GetEvents() []*v1.LogEvent {
	if x != nil {
		return x.Events
	}
	return nil
}

func (x *IngestBidiStreamRequest) GetMachineId() uint64 {
	if x != nil {
		return x.MachineId
	}
	return 0
}

func (x *IngestBidiStreamRequest) GetResumeSessionId() uint64 {
	if x != nil {
		return x.ResumeSessionId
	}
	return 0
}

type IngestBidiStreamResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SessionId     uint64                 `protobuf:"varint,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	HeartbeatIn   *durationpb.Duration   `protobuf:"bytes,2,opt,name=heartbeat_in,json=heartbeatIn,proto3" json:"heartbeat_in,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IngestBidiStreamResponse) Reset() {
	*x = IngestBidiStreamResponse{}
	mi := &file_svc_ingest_v1_service_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IngestBidiStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IngestBidiStreamResponse) ProtoMessage() {}

func (x *IngestBidiStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_svc_ingest_v1_service_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IngestBidiStreamResponse.ProtoReflect.Descriptor instead.
func (*IngestBidiStreamResponse) Descriptor() ([]byte, []int) {
	return file_svc_ingest_v1_service_proto_rawDescGZIP(), []int{7}
}

func (x *IngestBidiStreamResponse) GetSessionId() uint64 {
	if x != nil {
		return x.SessionId
	}
	return 0
}

func (x *IngestBidiStreamResponse) GetHeartbeatIn() *durationpb.Duration {
	if x != nil {
		return x.HeartbeatIn
	}
	return nil
}

var File_svc_ingest_v1_service_proto protoreflect.FileDescriptor

var file_svc_ingest_v1_service_proto_rawDesc = string([]byte{
	0x0a, 0x1b, 0x73, 0x76, 0x63, 0x2f, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x2f, 0x76, 0x31, 0x2f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x73,
	0x76, 0x63, 0x2e, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x1a, 0x1e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x6f, 0x67, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x7b, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x48, 0x65, 0x61, 0x72,
	0x74, 0x62, 0x65, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0a,
	0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x48, 0x00, 0x52, 0x09, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x22, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x48, 0x01, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65,
	0x5f, 0x69, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x22, 0x54, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65,
	0x61, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x0c, 0x68, 0x65,
	0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x5f, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x68, 0x65, 0x61,
	0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x49, 0x6e, 0x22, 0x79, 0x0a, 0x0d, 0x49, 0x6e, 0x67, 0x65,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x63,
	0x68, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x6d,
	0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x22, 0x6d, 0x0a, 0x0e, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x3c, 0x0a, 0x0c, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61,
	0x74, 0x5f, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74,
	0x49, 0x6e, 0x22, 0x7f, 0x0a, 0x13, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x63,
	0x68, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x6d,
	0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x22, 0x73, 0x0a, 0x14, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x3c, 0x0a, 0x0c, 0x68, 0x65,
	0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x5f, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x68, 0x65, 0x61,
	0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x49, 0x6e, 0x22, 0x90, 0x01, 0x0a, 0x17, 0x49, 0x6e, 0x67,
	0x65, 0x73, 0x74, 0x42, 0x69, 0x64, 0x69, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x6f, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x12,
	0x2a, 0x0a, 0x11, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x72, 0x65, 0x73, 0x75,
	0x6d, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x77, 0x0a, 0x18, 0x49,
	0x6e, 0x67, 0x65, 0x73, 0x74, 0x42, 0x69, 0x64, 0x69, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x3c, 0x0a, 0x0c, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62,
	0x65, 0x61, 0x74, 0x5f, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65,
	0x61, 0x74, 0x49, 0x6e, 0x32, 0xf3, 0x02, 0x0a, 0x0d, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x57, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x48, 0x65, 0x61,
	0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x12, 0x22, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x69, 0x6e, 0x67,
	0x65, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62,
	0x65, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x73, 0x76, 0x63,
	0x2e, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x48, 0x65,
	0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x45, 0x0a, 0x06, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x2e, 0x73, 0x76, 0x63, 0x2e,
	0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x69, 0x6e,
	0x67, 0x65, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x59, 0x0a, 0x0c, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x22, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x69, 0x6e, 0x67,
	0x65, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x73, 0x76, 0x63,
	0x2e, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x67, 0x65, 0x73,
	0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x28,
	0x01, 0x12, 0x67, 0x0a, 0x10, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x42, 0x69, 0x64, 0x69, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x26, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x69, 0x6e, 0x67, 0x65,
	0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x42, 0x69, 0x64, 0x69,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e,
	0x73, 0x76, 0x63, 0x2e, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e,
	0x67, 0x65, 0x73, 0x74, 0x42, 0x69, 0x64, 0x69, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x28, 0x01, 0x30, 0x01, 0x42, 0xac, 0x01, 0x0a, 0x11, 0x63,
	0x6f, 0x6d, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x2e, 0x76, 0x31,
	0x42, 0x0c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01,
	0x5a, 0x33, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x68, 0x75, 0x6d,
	0x61, 0x6e, 0x6c, 0x6f, 0x67, 0x69, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x6f, 0x2f, 0x73,
	0x76, 0x63, 0x2f, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x2f, 0x76, 0x31, 0x3b, 0x69, 0x6e, 0x67,
	0x65, 0x73, 0x74, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x53, 0x49, 0x58, 0xaa, 0x02, 0x0d, 0x53, 0x76,
	0x63, 0x2e, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x0d, 0x53, 0x76,
	0x63, 0x5c, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x19, 0x53, 0x76,
	0x63, 0x5c, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x0f, 0x53, 0x76, 0x63, 0x3a, 0x3a, 0x49,
	0x6e, 0x67, 0x65, 0x73, 0x74, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
})

var (
	file_svc_ingest_v1_service_proto_rawDescOnce sync.Once
	file_svc_ingest_v1_service_proto_rawDescData []byte
)

func file_svc_ingest_v1_service_proto_rawDescGZIP() []byte {
	file_svc_ingest_v1_service_proto_rawDescOnce.Do(func() {
		file_svc_ingest_v1_service_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_svc_ingest_v1_service_proto_rawDesc), len(file_svc_ingest_v1_service_proto_rawDesc)))
	})
	return file_svc_ingest_v1_service_proto_rawDescData
}

var file_svc_ingest_v1_service_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_svc_ingest_v1_service_proto_goTypes = []any{
	(*GetHeartbeatRequest)(nil),      // 0: svc.ingest.v1.GetHeartbeatRequest
	(*GetHeartbeatResponse)(nil),     // 1: svc.ingest.v1.GetHeartbeatResponse
	(*IngestRequest)(nil),            // 2: svc.ingest.v1.IngestRequest
	(*IngestResponse)(nil),           // 3: svc.ingest.v1.IngestResponse
	(*IngestStreamRequest)(nil),      // 4: svc.ingest.v1.IngestStreamRequest
	(*IngestStreamResponse)(nil),     // 5: svc.ingest.v1.IngestStreamResponse
	(*IngestBidiStreamRequest)(nil),  // 6: svc.ingest.v1.IngestBidiStreamRequest
	(*IngestBidiStreamResponse)(nil), // 7: svc.ingest.v1.IngestBidiStreamResponse
	(*durationpb.Duration)(nil),      // 8: google.protobuf.Duration
	(*v1.LogEvent)(nil),              // 9: types.v1.LogEvent
}
var file_svc_ingest_v1_service_proto_depIdxs = []int32{
	8,  // 0: svc.ingest.v1.GetHeartbeatResponse.heartbeat_in:type_name -> google.protobuf.Duration
	9,  // 1: svc.ingest.v1.IngestRequest.events:type_name -> types.v1.LogEvent
	8,  // 2: svc.ingest.v1.IngestResponse.heartbeat_in:type_name -> google.protobuf.Duration
	9,  // 3: svc.ingest.v1.IngestStreamRequest.events:type_name -> types.v1.LogEvent
	8,  // 4: svc.ingest.v1.IngestStreamResponse.heartbeat_in:type_name -> google.protobuf.Duration
	9,  // 5: svc.ingest.v1.IngestBidiStreamRequest.events:type_name -> types.v1.LogEvent
	8,  // 6: svc.ingest.v1.IngestBidiStreamResponse.heartbeat_in:type_name -> google.protobuf.Duration
	0,  // 7: svc.ingest.v1.IngestService.GetHeartbeat:input_type -> svc.ingest.v1.GetHeartbeatRequest
	2,  // 8: svc.ingest.v1.IngestService.Ingest:input_type -> svc.ingest.v1.IngestRequest
	4,  // 9: svc.ingest.v1.IngestService.IngestStream:input_type -> svc.ingest.v1.IngestStreamRequest
	6,  // 10: svc.ingest.v1.IngestService.IngestBidiStream:input_type -> svc.ingest.v1.IngestBidiStreamRequest
	1,  // 11: svc.ingest.v1.IngestService.GetHeartbeat:output_type -> svc.ingest.v1.GetHeartbeatResponse
	3,  // 12: svc.ingest.v1.IngestService.Ingest:output_type -> svc.ingest.v1.IngestResponse
	5,  // 13: svc.ingest.v1.IngestService.IngestStream:output_type -> svc.ingest.v1.IngestStreamResponse
	7,  // 14: svc.ingest.v1.IngestService.IngestBidiStream:output_type -> svc.ingest.v1.IngestBidiStreamResponse
	11, // [11:15] is the sub-list for method output_type
	7,  // [7:11] is the sub-list for method input_type
	7,  // [7:7] is the sub-list for extension type_name
	7,  // [7:7] is the sub-list for extension extendee
	0,  // [0:7] is the sub-list for field type_name
}

func init() { file_svc_ingest_v1_service_proto_init() }
func file_svc_ingest_v1_service_proto_init() {
	if File_svc_ingest_v1_service_proto != nil {
		return
	}
	file_svc_ingest_v1_service_proto_msgTypes[0].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_svc_ingest_v1_service_proto_rawDesc), len(file_svc_ingest_v1_service_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_svc_ingest_v1_service_proto_goTypes,
		DependencyIndexes: file_svc_ingest_v1_service_proto_depIdxs,
		MessageInfos:      file_svc_ingest_v1_service_proto_msgTypes,
	}.Build()
	File_svc_ingest_v1_service_proto = out.File
	file_svc_ingest_v1_service_proto_goTypes = nil
	file_svc_ingest_v1_service_proto_depIdxs = nil
}
