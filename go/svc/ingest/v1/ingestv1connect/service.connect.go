// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: svc/ingest/v1/service.proto

package ingestv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/humanlogio/api/go/svc/ingest/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// IngestServiceName is the fully-qualified name of the IngestService service.
	IngestServiceName = "svc.ingest.v1.IngestService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// IngestServiceIngestProcedure is the fully-qualified name of the IngestService's Ingest RPC.
	IngestServiceIngestProcedure = "/svc.ingest.v1.IngestService/Ingest"
	// IngestServiceIngestStreamProcedure is the fully-qualified name of the IngestService's
	// IngestStream RPC.
	IngestServiceIngestStreamProcedure = "/svc.ingest.v1.IngestService/IngestStream"
)

// IngestServiceClient is a client for the svc.ingest.v1.IngestService service.
type IngestServiceClient interface {
	Ingest(context.Context, *connect.Request[v1.IngestRequest]) (*connect.Response[v1.IngestResponse], error)
	IngestStream(context.Context) *connect.ClientStreamForClient[v1.IngestStreamRequest, v1.IngestStreamResponse]
}

// NewIngestServiceClient constructs a client for the svc.ingest.v1.IngestService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewIngestServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) IngestServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	ingestServiceMethods := v1.File_svc_ingest_v1_service_proto.Services().ByName("IngestService").Methods()
	return &ingestServiceClient{
		ingest: connect.NewClient[v1.IngestRequest, v1.IngestResponse](
			httpClient,
			baseURL+IngestServiceIngestProcedure,
			connect.WithSchema(ingestServiceMethods.ByName("Ingest")),
			connect.WithClientOptions(opts...),
		),
		ingestStream: connect.NewClient[v1.IngestStreamRequest, v1.IngestStreamResponse](
			httpClient,
			baseURL+IngestServiceIngestStreamProcedure,
			connect.WithSchema(ingestServiceMethods.ByName("IngestStream")),
			connect.WithClientOptions(opts...),
		),
	}
}

// ingestServiceClient implements IngestServiceClient.
type ingestServiceClient struct {
	ingest       *connect.Client[v1.IngestRequest, v1.IngestResponse]
	ingestStream *connect.Client[v1.IngestStreamRequest, v1.IngestStreamResponse]
}

// Ingest calls svc.ingest.v1.IngestService.Ingest.
func (c *ingestServiceClient) Ingest(ctx context.Context, req *connect.Request[v1.IngestRequest]) (*connect.Response[v1.IngestResponse], error) {
	return c.ingest.CallUnary(ctx, req)
}

// IngestStream calls svc.ingest.v1.IngestService.IngestStream.
func (c *ingestServiceClient) IngestStream(ctx context.Context) *connect.ClientStreamForClient[v1.IngestStreamRequest, v1.IngestStreamResponse] {
	return c.ingestStream.CallClientStream(ctx)
}

// IngestServiceHandler is an implementation of the svc.ingest.v1.IngestService service.
type IngestServiceHandler interface {
	Ingest(context.Context, *connect.Request[v1.IngestRequest]) (*connect.Response[v1.IngestResponse], error)
	IngestStream(context.Context, *connect.ClientStream[v1.IngestStreamRequest]) (*connect.Response[v1.IngestStreamResponse], error)
}

// NewIngestServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewIngestServiceHandler(svc IngestServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	ingestServiceMethods := v1.File_svc_ingest_v1_service_proto.Services().ByName("IngestService").Methods()
	ingestServiceIngestHandler := connect.NewUnaryHandler(
		IngestServiceIngestProcedure,
		svc.Ingest,
		connect.WithSchema(ingestServiceMethods.ByName("Ingest")),
		connect.WithHandlerOptions(opts...),
	)
	ingestServiceIngestStreamHandler := connect.NewClientStreamHandler(
		IngestServiceIngestStreamProcedure,
		svc.IngestStream,
		connect.WithSchema(ingestServiceMethods.ByName("IngestStream")),
		connect.WithHandlerOptions(opts...),
	)
	return "/svc.ingest.v1.IngestService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case IngestServiceIngestProcedure:
			ingestServiceIngestHandler.ServeHTTP(w, r)
		case IngestServiceIngestStreamProcedure:
			ingestServiceIngestStreamHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedIngestServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedIngestServiceHandler struct{}

func (UnimplementedIngestServiceHandler) Ingest(context.Context, *connect.Request[v1.IngestRequest]) (*connect.Response[v1.IngestResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("svc.ingest.v1.IngestService.Ingest is not implemented"))
}

func (UnimplementedIngestServiceHandler) IngestStream(context.Context, *connect.ClientStream[v1.IngestStreamRequest]) (*connect.Response[v1.IngestStreamResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("svc.ingest.v1.IngestService.IngestStream is not implemented"))
}
