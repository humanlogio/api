// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.9
// 	protoc        (unknown)
// source: svc/release/v1/service.proto

package releasev1

import (
	v1 "github.com/humanlogio/api/go/types/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CreateReleaseChannelRequest struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	ProjectName     string                 `protobuf:"bytes,1,opt,name=project_name,json=projectName,proto3" json:"project_name,omitempty"`
	ChannelName     string                 `protobuf:"bytes,2,opt,name=channel_name,json=channelName,proto3" json:"channel_name,omitempty"`
	ChannelPriority int32                  `protobuf:"varint,3,opt,name=channel_priority,json=channelPriority,proto3" json:"channel_priority,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CreateReleaseChannelRequest) Reset() {
	*x = CreateReleaseChannelRequest{}
	mi := &file_svc_release_v1_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateReleaseChannelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateReleaseChannelRequest) ProtoMessage() {}

func (x *CreateReleaseChannelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_svc_release_v1_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateReleaseChannelRequest.ProtoReflect.Descriptor instead.
func (*CreateReleaseChannelRequest) Descriptor() ([]byte, []int) {
	return file_svc_release_v1_service_proto_rawDescGZIP(), []int{0}
}

func (x *CreateReleaseChannelRequest) GetProjectName() string {
	if x != nil {
		return x.ProjectName
	}
	return ""
}

func (x *CreateReleaseChannelRequest) GetChannelName() string {
	if x != nil {
		return x.ChannelName
	}
	return ""
}

func (x *CreateReleaseChannelRequest) GetChannelPriority() int32 {
	if x != nil {
		return x.ChannelPriority
	}
	return 0
}

type CreateReleaseChannelResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateReleaseChannelResponse) Reset() {
	*x = CreateReleaseChannelResponse{}
	mi := &file_svc_release_v1_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateReleaseChannelResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateReleaseChannelResponse) ProtoMessage() {}

func (x *CreateReleaseChannelResponse) ProtoReflect() protoreflect.Message {
	mi := &file_svc_release_v1_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateReleaseChannelResponse.ProtoReflect.Descriptor instead.
func (*CreateReleaseChannelResponse) Descriptor() ([]byte, []int) {
	return file_svc_release_v1_service_proto_rawDescGZIP(), []int{1}
}

type ListReleaseChannelRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ProjectName   string                 `protobuf:"bytes,1,opt,name=project_name,json=projectName,proto3" json:"project_name,omitempty"`
	Cursor        *v1.Cursor             `protobuf:"bytes,2,opt,name=cursor,proto3" json:"cursor,omitempty"`
	Limit         int64                  `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListReleaseChannelRequest) Reset() {
	*x = ListReleaseChannelRequest{}
	mi := &file_svc_release_v1_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListReleaseChannelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListReleaseChannelRequest) ProtoMessage() {}

func (x *ListReleaseChannelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_svc_release_v1_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListReleaseChannelRequest.ProtoReflect.Descriptor instead.
func (*ListReleaseChannelRequest) Descriptor() ([]byte, []int) {
	return file_svc_release_v1_service_proto_rawDescGZIP(), []int{2}
}

func (x *ListReleaseChannelRequest) GetProjectName() string {
	if x != nil {
		return x.ProjectName
	}
	return ""
}

func (x *ListReleaseChannelRequest) GetCursor() *v1.Cursor {
	if x != nil {
		return x.Cursor
	}
	return nil
}

func (x *ListReleaseChannelRequest) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type ListReleaseChannelResponse struct {
	state         protoimpl.MessageState                 `protogen:"open.v1"`
	Next          *v1.Cursor                             `protobuf:"bytes,1,opt,name=next,proto3" json:"next,omitempty"`
	Items         []*ListReleaseChannelResponse_ListItem `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListReleaseChannelResponse) Reset() {
	*x = ListReleaseChannelResponse{}
	mi := &file_svc_release_v1_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListReleaseChannelResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListReleaseChannelResponse) ProtoMessage() {}

func (x *ListReleaseChannelResponse) ProtoReflect() protoreflect.Message {
	mi := &file_svc_release_v1_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListReleaseChannelResponse.ProtoReflect.Descriptor instead.
func (*ListReleaseChannelResponse) Descriptor() ([]byte, []int) {
	return file_svc_release_v1_service_proto_rawDescGZIP(), []int{3}
}

func (x *ListReleaseChannelResponse) GetNext() *v1.Cursor {
	if x != nil {
		return x.Next
	}
	return nil
}

func (x *ListReleaseChannelResponse) GetItems() []*ListReleaseChannelResponse_ListItem {
	if x != nil {
		return x.Items
	}
	return nil
}

type PublishVersionRequest struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	ProjectName        string                 `protobuf:"bytes,1,opt,name=project_name,json=projectName,proto3" json:"project_name,omitempty"`
	ReleaseChannelName string                 `protobuf:"bytes,2,opt,name=release_channel_name,json=releaseChannelName,proto3" json:"release_channel_name,omitempty"`
	Version            *v1.Version            `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *PublishVersionRequest) Reset() {
	*x = PublishVersionRequest{}
	mi := &file_svc_release_v1_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PublishVersionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishVersionRequest) ProtoMessage() {}

func (x *PublishVersionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_svc_release_v1_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishVersionRequest.ProtoReflect.Descriptor instead.
func (*PublishVersionRequest) Descriptor() ([]byte, []int) {
	return file_svc_release_v1_service_proto_rawDescGZIP(), []int{4}
}

func (x *PublishVersionRequest) GetProjectName() string {
	if x != nil {
		return x.ProjectName
	}
	return ""
}

func (x *PublishVersionRequest) GetReleaseChannelName() string {
	if x != nil {
		return x.ReleaseChannelName
	}
	return ""
}

func (x *PublishVersionRequest) GetVersion() *v1.Version {
	if x != nil {
		return x.Version
	}
	return nil
}

type PublishVersionResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PublishVersionResponse) Reset() {
	*x = PublishVersionResponse{}
	mi := &file_svc_release_v1_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PublishVersionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishVersionResponse) ProtoMessage() {}

func (x *PublishVersionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_svc_release_v1_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishVersionResponse.ProtoReflect.Descriptor instead.
func (*PublishVersionResponse) Descriptor() ([]byte, []int) {
	return file_svc_release_v1_service_proto_rawDescGZIP(), []int{5}
}

type UnpublishVersionRequest struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	ProjectName        string                 `protobuf:"bytes,1,opt,name=project_name,json=projectName,proto3" json:"project_name,omitempty"`
	ReleaseChannelName string                 `protobuf:"bytes,2,opt,name=release_channel_name,json=releaseChannelName,proto3" json:"release_channel_name,omitempty"`
	Version            *v1.Version            `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *UnpublishVersionRequest) Reset() {
	*x = UnpublishVersionRequest{}
	mi := &file_svc_release_v1_service_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UnpublishVersionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnpublishVersionRequest) ProtoMessage() {}

func (x *UnpublishVersionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_svc_release_v1_service_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnpublishVersionRequest.ProtoReflect.Descriptor instead.
func (*UnpublishVersionRequest) Descriptor() ([]byte, []int) {
	return file_svc_release_v1_service_proto_rawDescGZIP(), []int{6}
}

func (x *UnpublishVersionRequest) GetProjectName() string {
	if x != nil {
		return x.ProjectName
	}
	return ""
}

func (x *UnpublishVersionRequest) GetReleaseChannelName() string {
	if x != nil {
		return x.ReleaseChannelName
	}
	return ""
}

func (x *UnpublishVersionRequest) GetVersion() *v1.Version {
	if x != nil {
		return x.Version
	}
	return nil
}

type UnpublishVersionResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UnpublishVersionResponse) Reset() {
	*x = UnpublishVersionResponse{}
	mi := &file_svc_release_v1_service_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UnpublishVersionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnpublishVersionResponse) ProtoMessage() {}

func (x *UnpublishVersionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_svc_release_v1_service_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnpublishVersionResponse.ProtoReflect.Descriptor instead.
func (*UnpublishVersionResponse) Descriptor() ([]byte, []int) {
	return file_svc_release_v1_service_proto_rawDescGZIP(), []int{7}
}

type CreateVersionArtifactRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ProjectName   string                 `protobuf:"bytes,1,opt,name=project_name,json=projectName,proto3" json:"project_name,omitempty"`
	Version       *v1.Version            `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	Artifact      *v1.VersionArtifact    `protobuf:"bytes,3,opt,name=artifact,proto3" json:"artifact,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateVersionArtifactRequest) Reset() {
	*x = CreateVersionArtifactRequest{}
	mi := &file_svc_release_v1_service_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateVersionArtifactRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateVersionArtifactRequest) ProtoMessage() {}

func (x *CreateVersionArtifactRequest) ProtoReflect() protoreflect.Message {
	mi := &file_svc_release_v1_service_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateVersionArtifactRequest.ProtoReflect.Descriptor instead.
func (*CreateVersionArtifactRequest) Descriptor() ([]byte, []int) {
	return file_svc_release_v1_service_proto_rawDescGZIP(), []int{8}
}

func (x *CreateVersionArtifactRequest) GetProjectName() string {
	if x != nil {
		return x.ProjectName
	}
	return ""
}

func (x *CreateVersionArtifactRequest) GetVersion() *v1.Version {
	if x != nil {
		return x.Version
	}
	return nil
}

func (x *CreateVersionArtifactRequest) GetArtifact() *v1.VersionArtifact {
	if x != nil {
		return x.Artifact
	}
	return nil
}

type CreateVersionArtifactResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateVersionArtifactResponse) Reset() {
	*x = CreateVersionArtifactResponse{}
	mi := &file_svc_release_v1_service_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateVersionArtifactResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateVersionArtifactResponse) ProtoMessage() {}

func (x *CreateVersionArtifactResponse) ProtoReflect() protoreflect.Message {
	mi := &file_svc_release_v1_service_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateVersionArtifactResponse.ProtoReflect.Descriptor instead.
func (*CreateVersionArtifactResponse) Descriptor() ([]byte, []int) {
	return file_svc_release_v1_service_proto_rawDescGZIP(), []int{9}
}

type DeleteVersionArtifactRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ProjectName   string                 `protobuf:"bytes,1,opt,name=project_name,json=projectName,proto3" json:"project_name,omitempty"`
	Version       *v1.Version            `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	Artifact      *v1.VersionArtifact    `protobuf:"bytes,3,opt,name=artifact,proto3" json:"artifact,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteVersionArtifactRequest) Reset() {
	*x = DeleteVersionArtifactRequest{}
	mi := &file_svc_release_v1_service_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteVersionArtifactRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteVersionArtifactRequest) ProtoMessage() {}

func (x *DeleteVersionArtifactRequest) ProtoReflect() protoreflect.Message {
	mi := &file_svc_release_v1_service_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteVersionArtifactRequest.ProtoReflect.Descriptor instead.
func (*DeleteVersionArtifactRequest) Descriptor() ([]byte, []int) {
	return file_svc_release_v1_service_proto_rawDescGZIP(), []int{10}
}

func (x *DeleteVersionArtifactRequest) GetProjectName() string {
	if x != nil {
		return x.ProjectName
	}
	return ""
}

func (x *DeleteVersionArtifactRequest) GetVersion() *v1.Version {
	if x != nil {
		return x.Version
	}
	return nil
}

func (x *DeleteVersionArtifactRequest) GetArtifact() *v1.VersionArtifact {
	if x != nil {
		return x.Artifact
	}
	return nil
}

type DeleteVersionArtifactResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteVersionArtifactResponse) Reset() {
	*x = DeleteVersionArtifactResponse{}
	mi := &file_svc_release_v1_service_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteVersionArtifactResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteVersionArtifactResponse) ProtoMessage() {}

func (x *DeleteVersionArtifactResponse) ProtoReflect() protoreflect.Message {
	mi := &file_svc_release_v1_service_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteVersionArtifactResponse.ProtoReflect.Descriptor instead.
func (*DeleteVersionArtifactResponse) Descriptor() ([]byte, []int) {
	return file_svc_release_v1_service_proto_rawDescGZIP(), []int{11}
}

type ListVersionArtifactRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ProjectName   string                 `protobuf:"bytes,1,opt,name=project_name,json=projectName,proto3" json:"project_name,omitempty"`
	Cursor        *v1.Cursor             `protobuf:"bytes,2,opt,name=cursor,proto3" json:"cursor,omitempty"`
	Limit         int64                  `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListVersionArtifactRequest) Reset() {
	*x = ListVersionArtifactRequest{}
	mi := &file_svc_release_v1_service_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListVersionArtifactRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListVersionArtifactRequest) ProtoMessage() {}

func (x *ListVersionArtifactRequest) ProtoReflect() protoreflect.Message {
	mi := &file_svc_release_v1_service_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListVersionArtifactRequest.ProtoReflect.Descriptor instead.
func (*ListVersionArtifactRequest) Descriptor() ([]byte, []int) {
	return file_svc_release_v1_service_proto_rawDescGZIP(), []int{12}
}

func (x *ListVersionArtifactRequest) GetProjectName() string {
	if x != nil {
		return x.ProjectName
	}
	return ""
}

func (x *ListVersionArtifactRequest) GetCursor() *v1.Cursor {
	if x != nil {
		return x.Cursor
	}
	return nil
}

func (x *ListVersionArtifactRequest) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type ListVersionArtifactResponse struct {
	state         protoimpl.MessageState                  `protogen:"open.v1"`
	Next          *v1.Cursor                              `protobuf:"bytes,1,opt,name=next,proto3" json:"next,omitempty"`
	Items         []*ListVersionArtifactResponse_ListItem `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListVersionArtifactResponse) Reset() {
	*x = ListVersionArtifactResponse{}
	mi := &file_svc_release_v1_service_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListVersionArtifactResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListVersionArtifactResponse) ProtoMessage() {}

func (x *ListVersionArtifactResponse) ProtoReflect() protoreflect.Message {
	mi := &file_svc_release_v1_service_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListVersionArtifactResponse.ProtoReflect.Descriptor instead.
func (*ListVersionArtifactResponse) Descriptor() ([]byte, []int) {
	return file_svc_release_v1_service_proto_rawDescGZIP(), []int{13}
}

func (x *ListVersionArtifactResponse) GetNext() *v1.Cursor {
	if x != nil {
		return x.Next
	}
	return nil
}

func (x *ListVersionArtifactResponse) GetItems() []*ListVersionArtifactResponse_ListItem {
	if x != nil {
		return x.Items
	}
	return nil
}

type ListReleaseChannelResponse_ListItem struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	ReleaseChannel *v1.ReleaseChannel     `protobuf:"bytes,1,opt,name=release_channel,json=releaseChannel,proto3" json:"release_channel,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ListReleaseChannelResponse_ListItem) Reset() {
	*x = ListReleaseChannelResponse_ListItem{}
	mi := &file_svc_release_v1_service_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListReleaseChannelResponse_ListItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListReleaseChannelResponse_ListItem) ProtoMessage() {}

func (x *ListReleaseChannelResponse_ListItem) ProtoReflect() protoreflect.Message {
	mi := &file_svc_release_v1_service_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListReleaseChannelResponse_ListItem.ProtoReflect.Descriptor instead.
func (*ListReleaseChannelResponse_ListItem) Descriptor() ([]byte, []int) {
	return file_svc_release_v1_service_proto_rawDescGZIP(), []int{3, 0}
}

func (x *ListReleaseChannelResponse_ListItem) GetReleaseChannel() *v1.ReleaseChannel {
	if x != nil {
		return x.ReleaseChannel
	}
	return nil
}

type ListVersionArtifactResponse_ListItem struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Version       *v1.Version            `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	Artifacts     []*v1.VersionArtifact  `protobuf:"bytes,2,rep,name=artifacts,proto3" json:"artifacts,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListVersionArtifactResponse_ListItem) Reset() {
	*x = ListVersionArtifactResponse_ListItem{}
	mi := &file_svc_release_v1_service_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListVersionArtifactResponse_ListItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListVersionArtifactResponse_ListItem) ProtoMessage() {}

func (x *ListVersionArtifactResponse_ListItem) ProtoReflect() protoreflect.Message {
	mi := &file_svc_release_v1_service_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListVersionArtifactResponse_ListItem.ProtoReflect.Descriptor instead.
func (*ListVersionArtifactResponse_ListItem) Descriptor() ([]byte, []int) {
	return file_svc_release_v1_service_proto_rawDescGZIP(), []int{13, 0}
}

func (x *ListVersionArtifactResponse_ListItem) GetVersion() *v1.Version {
	if x != nil {
		return x.Version
	}
	return nil
}

func (x *ListVersionArtifactResponse_ListItem) GetArtifacts() []*v1.VersionArtifact {
	if x != nil {
		return x.Artifacts
	}
	return nil
}

var File_svc_release_v1_service_proto protoreflect.FileDescriptor

const file_svc_release_v1_service_proto_rawDesc = "" +
	"\n" +
	"\x1csvc/release/v1/service.proto\x12\x0esvc.release.v1\x1a\x15types/v1/cursor.proto\x1a\x1etypes/v1/release_channel.proto\x1a\x16types/v1/version.proto\x1a\x1ftypes/v1/version_artifact.proto\"\x8e\x01\n" +
	"\x1bCreateReleaseChannelRequest\x12!\n" +
	"\fproject_name\x18\x01 \x01(\tR\vprojectName\x12!\n" +
	"\fchannel_name\x18\x02 \x01(\tR\vchannelName\x12)\n" +
	"\x10channel_priority\x18\x03 \x01(\x05R\x0fchannelPriority\"\x1e\n" +
	"\x1cCreateReleaseChannelResponse\"~\n" +
	"\x19ListReleaseChannelRequest\x12!\n" +
	"\fproject_name\x18\x01 \x01(\tR\vprojectName\x12(\n" +
	"\x06cursor\x18\x02 \x01(\v2\x10.types.v1.CursorR\x06cursor\x12\x14\n" +
	"\x05limit\x18\x03 \x01(\x03R\x05limit\"\xdc\x01\n" +
	"\x1aListReleaseChannelResponse\x12$\n" +
	"\x04next\x18\x01 \x01(\v2\x10.types.v1.CursorR\x04next\x12I\n" +
	"\x05items\x18\x02 \x03(\v23.svc.release.v1.ListReleaseChannelResponse.ListItemR\x05items\x1aM\n" +
	"\bListItem\x12A\n" +
	"\x0frelease_channel\x18\x01 \x01(\v2\x18.types.v1.ReleaseChannelR\x0ereleaseChannel\"\x99\x01\n" +
	"\x15PublishVersionRequest\x12!\n" +
	"\fproject_name\x18\x01 \x01(\tR\vprojectName\x120\n" +
	"\x14release_channel_name\x18\x02 \x01(\tR\x12releaseChannelName\x12+\n" +
	"\aversion\x18\x03 \x01(\v2\x11.types.v1.VersionR\aversion\"\x18\n" +
	"\x16PublishVersionResponse\"\x9b\x01\n" +
	"\x17UnpublishVersionRequest\x12!\n" +
	"\fproject_name\x18\x01 \x01(\tR\vprojectName\x120\n" +
	"\x14release_channel_name\x18\x02 \x01(\tR\x12releaseChannelName\x12+\n" +
	"\aversion\x18\x03 \x01(\v2\x11.types.v1.VersionR\aversion\"\x1a\n" +
	"\x18UnpublishVersionResponse\"\xa5\x01\n" +
	"\x1cCreateVersionArtifactRequest\x12!\n" +
	"\fproject_name\x18\x01 \x01(\tR\vprojectName\x12+\n" +
	"\aversion\x18\x02 \x01(\v2\x11.types.v1.VersionR\aversion\x125\n" +
	"\bartifact\x18\x03 \x01(\v2\x19.types.v1.VersionArtifactR\bartifact\"\x1f\n" +
	"\x1dCreateVersionArtifactResponse\"\xa5\x01\n" +
	"\x1cDeleteVersionArtifactRequest\x12!\n" +
	"\fproject_name\x18\x01 \x01(\tR\vprojectName\x12+\n" +
	"\aversion\x18\x02 \x01(\v2\x11.types.v1.VersionR\aversion\x125\n" +
	"\bartifact\x18\x03 \x01(\v2\x19.types.v1.VersionArtifactR\bartifact\"\x1f\n" +
	"\x1dDeleteVersionArtifactResponse\"\x7f\n" +
	"\x1aListVersionArtifactRequest\x12!\n" +
	"\fproject_name\x18\x01 \x01(\tR\vprojectName\x12(\n" +
	"\x06cursor\x18\x02 \x01(\v2\x10.types.v1.CursorR\x06cursor\x12\x14\n" +
	"\x05limit\x18\x03 \x01(\x03R\x05limit\"\x81\x02\n" +
	"\x1bListVersionArtifactResponse\x12$\n" +
	"\x04next\x18\x01 \x01(\v2\x10.types.v1.CursorR\x04next\x12J\n" +
	"\x05items\x18\x02 \x03(\v24.svc.release.v1.ListVersionArtifactResponse.ListItemR\x05items\x1ap\n" +
	"\bListItem\x12+\n" +
	"\aversion\x18\x01 \x01(\v2\x11.types.v1.VersionR\aversion\x127\n" +
	"\tartifacts\x18\x02 \x03(\v2\x19.types.v1.VersionArtifactR\tartifacts2\xa2\x06\n" +
	"\x0eReleaseService\x12s\n" +
	"\x14CreateReleaseChannel\x12+.svc.release.v1.CreateReleaseChannelRequest\x1a,.svc.release.v1.CreateReleaseChannelResponse\"\x00\x12m\n" +
	"\x12ListReleaseChannel\x12).svc.release.v1.ListReleaseChannelRequest\x1a*.svc.release.v1.ListReleaseChannelResponse\"\x00\x12a\n" +
	"\x0ePublishVersion\x12%.svc.release.v1.PublishVersionRequest\x1a&.svc.release.v1.PublishVersionResponse\"\x00\x12g\n" +
	"\x10UnpublishVersion\x12'.svc.release.v1.UnpublishVersionRequest\x1a(.svc.release.v1.UnpublishVersionResponse\"\x00\x12v\n" +
	"\x15CreateVersionArtifact\x12,.svc.release.v1.CreateVersionArtifactRequest\x1a-.svc.release.v1.CreateVersionArtifactResponse\"\x00\x12v\n" +
	"\x15DeleteVersionArtifact\x12,.svc.release.v1.DeleteVersionArtifactRequest\x1a-.svc.release.v1.DeleteVersionArtifactResponse\"\x00\x12p\n" +
	"\x13ListVersionArtifact\x12*.svc.release.v1.ListVersionArtifactRequest\x1a+.svc.release.v1.ListVersionArtifactResponse\"\x00B\xb3\x01\n" +
	"\x12com.svc.release.v1B\fServiceProtoP\x01Z5github.com/humanlogio/api/go/svc/release/v1;releasev1\xa2\x02\x03SRX\xaa\x02\x0eSvc.Release.V1\xca\x02\x0eSvc\\Release\\V1\xe2\x02\x1aSvc\\Release\\V1\\GPBMetadata\xea\x02\x10Svc::Release::V1b\x06proto3"

var (
	file_svc_release_v1_service_proto_rawDescOnce sync.Once
	file_svc_release_v1_service_proto_rawDescData []byte
)

func file_svc_release_v1_service_proto_rawDescGZIP() []byte {
	file_svc_release_v1_service_proto_rawDescOnce.Do(func() {
		file_svc_release_v1_service_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_svc_release_v1_service_proto_rawDesc), len(file_svc_release_v1_service_proto_rawDesc)))
	})
	return file_svc_release_v1_service_proto_rawDescData
}

var file_svc_release_v1_service_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_svc_release_v1_service_proto_goTypes = []any{
	(*CreateReleaseChannelRequest)(nil),          // 0: svc.release.v1.CreateReleaseChannelRequest
	(*CreateReleaseChannelResponse)(nil),         // 1: svc.release.v1.CreateReleaseChannelResponse
	(*ListReleaseChannelRequest)(nil),            // 2: svc.release.v1.ListReleaseChannelRequest
	(*ListReleaseChannelResponse)(nil),           // 3: svc.release.v1.ListReleaseChannelResponse
	(*PublishVersionRequest)(nil),                // 4: svc.release.v1.PublishVersionRequest
	(*PublishVersionResponse)(nil),               // 5: svc.release.v1.PublishVersionResponse
	(*UnpublishVersionRequest)(nil),              // 6: svc.release.v1.UnpublishVersionRequest
	(*UnpublishVersionResponse)(nil),             // 7: svc.release.v1.UnpublishVersionResponse
	(*CreateVersionArtifactRequest)(nil),         // 8: svc.release.v1.CreateVersionArtifactRequest
	(*CreateVersionArtifactResponse)(nil),        // 9: svc.release.v1.CreateVersionArtifactResponse
	(*DeleteVersionArtifactRequest)(nil),         // 10: svc.release.v1.DeleteVersionArtifactRequest
	(*DeleteVersionArtifactResponse)(nil),        // 11: svc.release.v1.DeleteVersionArtifactResponse
	(*ListVersionArtifactRequest)(nil),           // 12: svc.release.v1.ListVersionArtifactRequest
	(*ListVersionArtifactResponse)(nil),          // 13: svc.release.v1.ListVersionArtifactResponse
	(*ListReleaseChannelResponse_ListItem)(nil),  // 14: svc.release.v1.ListReleaseChannelResponse.ListItem
	(*ListVersionArtifactResponse_ListItem)(nil), // 15: svc.release.v1.ListVersionArtifactResponse.ListItem
	(*v1.Cursor)(nil),                            // 16: types.v1.Cursor
	(*v1.Version)(nil),                           // 17: types.v1.Version
	(*v1.VersionArtifact)(nil),                   // 18: types.v1.VersionArtifact
	(*v1.ReleaseChannel)(nil),                    // 19: types.v1.ReleaseChannel
}
var file_svc_release_v1_service_proto_depIdxs = []int32{
	16, // 0: svc.release.v1.ListReleaseChannelRequest.cursor:type_name -> types.v1.Cursor
	16, // 1: svc.release.v1.ListReleaseChannelResponse.next:type_name -> types.v1.Cursor
	14, // 2: svc.release.v1.ListReleaseChannelResponse.items:type_name -> svc.release.v1.ListReleaseChannelResponse.ListItem
	17, // 3: svc.release.v1.PublishVersionRequest.version:type_name -> types.v1.Version
	17, // 4: svc.release.v1.UnpublishVersionRequest.version:type_name -> types.v1.Version
	17, // 5: svc.release.v1.CreateVersionArtifactRequest.version:type_name -> types.v1.Version
	18, // 6: svc.release.v1.CreateVersionArtifactRequest.artifact:type_name -> types.v1.VersionArtifact
	17, // 7: svc.release.v1.DeleteVersionArtifactRequest.version:type_name -> types.v1.Version
	18, // 8: svc.release.v1.DeleteVersionArtifactRequest.artifact:type_name -> types.v1.VersionArtifact
	16, // 9: svc.release.v1.ListVersionArtifactRequest.cursor:type_name -> types.v1.Cursor
	16, // 10: svc.release.v1.ListVersionArtifactResponse.next:type_name -> types.v1.Cursor
	15, // 11: svc.release.v1.ListVersionArtifactResponse.items:type_name -> svc.release.v1.ListVersionArtifactResponse.ListItem
	19, // 12: svc.release.v1.ListReleaseChannelResponse.ListItem.release_channel:type_name -> types.v1.ReleaseChannel
	17, // 13: svc.release.v1.ListVersionArtifactResponse.ListItem.version:type_name -> types.v1.Version
	18, // 14: svc.release.v1.ListVersionArtifactResponse.ListItem.artifacts:type_name -> types.v1.VersionArtifact
	0,  // 15: svc.release.v1.ReleaseService.CreateReleaseChannel:input_type -> svc.release.v1.CreateReleaseChannelRequest
	2,  // 16: svc.release.v1.ReleaseService.ListReleaseChannel:input_type -> svc.release.v1.ListReleaseChannelRequest
	4,  // 17: svc.release.v1.ReleaseService.PublishVersion:input_type -> svc.release.v1.PublishVersionRequest
	6,  // 18: svc.release.v1.ReleaseService.UnpublishVersion:input_type -> svc.release.v1.UnpublishVersionRequest
	8,  // 19: svc.release.v1.ReleaseService.CreateVersionArtifact:input_type -> svc.release.v1.CreateVersionArtifactRequest
	10, // 20: svc.release.v1.ReleaseService.DeleteVersionArtifact:input_type -> svc.release.v1.DeleteVersionArtifactRequest
	12, // 21: svc.release.v1.ReleaseService.ListVersionArtifact:input_type -> svc.release.v1.ListVersionArtifactRequest
	1,  // 22: svc.release.v1.ReleaseService.CreateReleaseChannel:output_type -> svc.release.v1.CreateReleaseChannelResponse
	3,  // 23: svc.release.v1.ReleaseService.ListReleaseChannel:output_type -> svc.release.v1.ListReleaseChannelResponse
	5,  // 24: svc.release.v1.ReleaseService.PublishVersion:output_type -> svc.release.v1.PublishVersionResponse
	7,  // 25: svc.release.v1.ReleaseService.UnpublishVersion:output_type -> svc.release.v1.UnpublishVersionResponse
	9,  // 26: svc.release.v1.ReleaseService.CreateVersionArtifact:output_type -> svc.release.v1.CreateVersionArtifactResponse
	11, // 27: svc.release.v1.ReleaseService.DeleteVersionArtifact:output_type -> svc.release.v1.DeleteVersionArtifactResponse
	13, // 28: svc.release.v1.ReleaseService.ListVersionArtifact:output_type -> svc.release.v1.ListVersionArtifactResponse
	22, // [22:29] is the sub-list for method output_type
	15, // [15:22] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_svc_release_v1_service_proto_init() }
func file_svc_release_v1_service_proto_init() {
	if File_svc_release_v1_service_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_svc_release_v1_service_proto_rawDesc), len(file_svc_release_v1_service_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_svc_release_v1_service_proto_goTypes,
		DependencyIndexes: file_svc_release_v1_service_proto_depIdxs,
		MessageInfos:      file_svc_release_v1_service_proto_msgTypes,
	}.Build()
	File_svc_release_v1_service_proto = out.File
	file_svc_release_v1_service_proto_goTypes = nil
	file_svc_release_v1_service_proto_depIdxs = nil
}
