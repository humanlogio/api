// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: svc/project/v1/service.proto

package projectv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/humanlogio/api/go/svc/project/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ProjectServiceName is the fully-qualified name of the ProjectService service.
	ProjectServiceName = "svc.project.v1.ProjectService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ProjectServiceCreateProjectProcedure is the fully-qualified name of the ProjectService's
	// CreateProject RPC.
	ProjectServiceCreateProjectProcedure = "/svc.project.v1.ProjectService/CreateProject"
	// ProjectServiceGetProjectProcedure is the fully-qualified name of the ProjectService's GetProject
	// RPC.
	ProjectServiceGetProjectProcedure = "/svc.project.v1.ProjectService/GetProject"
	// ProjectServiceUpdateProjectProcedure is the fully-qualified name of the ProjectService's
	// UpdateProject RPC.
	ProjectServiceUpdateProjectProcedure = "/svc.project.v1.ProjectService/UpdateProject"
	// ProjectServiceDeleteProjectProcedure is the fully-qualified name of the ProjectService's
	// DeleteProject RPC.
	ProjectServiceDeleteProjectProcedure = "/svc.project.v1.ProjectService/DeleteProject"
	// ProjectServiceListProjectProcedure is the fully-qualified name of the ProjectService's
	// ListProject RPC.
	ProjectServiceListProjectProcedure = "/svc.project.v1.ProjectService/ListProject"
	// ProjectServiceSyncProjectProcedure is the fully-qualified name of the ProjectService's
	// SyncProject RPC.
	ProjectServiceSyncProjectProcedure = "/svc.project.v1.ProjectService/SyncProject"
)

// ProjectServiceClient is a client for the svc.project.v1.ProjectService service.
type ProjectServiceClient interface {
	CreateProject(context.Context, *connect.Request[v1.CreateProjectRequest]) (*connect.Response[v1.CreateProjectResponse], error)
	GetProject(context.Context, *connect.Request[v1.GetProjectRequest]) (*connect.Response[v1.GetProjectResponse], error)
	UpdateProject(context.Context, *connect.Request[v1.UpdateProjectRequest]) (*connect.Response[v1.UpdateProjectResponse], error)
	DeleteProject(context.Context, *connect.Request[v1.DeleteProjectRequest]) (*connect.Response[v1.DeleteProjectResponse], error)
	ListProject(context.Context, *connect.Request[v1.ListProjectRequest]) (*connect.Response[v1.ListProjectResponse], error)
	// SyncProject is like GetProject but guarantees that cached data
	// gets updated.
	SyncProject(context.Context, *connect.Request[v1.SyncProjectRequest]) (*connect.Response[v1.SyncProjectResponse], error)
}

// NewProjectServiceClient constructs a client for the svc.project.v1.ProjectService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewProjectServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ProjectServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	projectServiceMethods := v1.File_svc_project_v1_service_proto.Services().ByName("ProjectService").Methods()
	return &projectServiceClient{
		createProject: connect.NewClient[v1.CreateProjectRequest, v1.CreateProjectResponse](
			httpClient,
			baseURL+ProjectServiceCreateProjectProcedure,
			connect.WithSchema(projectServiceMethods.ByName("CreateProject")),
			connect.WithClientOptions(opts...),
		),
		getProject: connect.NewClient[v1.GetProjectRequest, v1.GetProjectResponse](
			httpClient,
			baseURL+ProjectServiceGetProjectProcedure,
			connect.WithSchema(projectServiceMethods.ByName("GetProject")),
			connect.WithClientOptions(opts...),
		),
		updateProject: connect.NewClient[v1.UpdateProjectRequest, v1.UpdateProjectResponse](
			httpClient,
			baseURL+ProjectServiceUpdateProjectProcedure,
			connect.WithSchema(projectServiceMethods.ByName("UpdateProject")),
			connect.WithClientOptions(opts...),
		),
		deleteProject: connect.NewClient[v1.DeleteProjectRequest, v1.DeleteProjectResponse](
			httpClient,
			baseURL+ProjectServiceDeleteProjectProcedure,
			connect.WithSchema(projectServiceMethods.ByName("DeleteProject")),
			connect.WithClientOptions(opts...),
		),
		listProject: connect.NewClient[v1.ListProjectRequest, v1.ListProjectResponse](
			httpClient,
			baseURL+ProjectServiceListProjectProcedure,
			connect.WithSchema(projectServiceMethods.ByName("ListProject")),
			connect.WithClientOptions(opts...),
		),
		syncProject: connect.NewClient[v1.SyncProjectRequest, v1.SyncProjectResponse](
			httpClient,
			baseURL+ProjectServiceSyncProjectProcedure,
			connect.WithSchema(projectServiceMethods.ByName("SyncProject")),
			connect.WithClientOptions(opts...),
		),
	}
}

// projectServiceClient implements ProjectServiceClient.
type projectServiceClient struct {
	createProject *connect.Client[v1.CreateProjectRequest, v1.CreateProjectResponse]
	getProject    *connect.Client[v1.GetProjectRequest, v1.GetProjectResponse]
	updateProject *connect.Client[v1.UpdateProjectRequest, v1.UpdateProjectResponse]
	deleteProject *connect.Client[v1.DeleteProjectRequest, v1.DeleteProjectResponse]
	listProject   *connect.Client[v1.ListProjectRequest, v1.ListProjectResponse]
	syncProject   *connect.Client[v1.SyncProjectRequest, v1.SyncProjectResponse]
}

// CreateProject calls svc.project.v1.ProjectService.CreateProject.
func (c *projectServiceClient) CreateProject(ctx context.Context, req *connect.Request[v1.CreateProjectRequest]) (*connect.Response[v1.CreateProjectResponse], error) {
	return c.createProject.CallUnary(ctx, req)
}

// GetProject calls svc.project.v1.ProjectService.GetProject.
func (c *projectServiceClient) GetProject(ctx context.Context, req *connect.Request[v1.GetProjectRequest]) (*connect.Response[v1.GetProjectResponse], error) {
	return c.getProject.CallUnary(ctx, req)
}

// UpdateProject calls svc.project.v1.ProjectService.UpdateProject.
func (c *projectServiceClient) UpdateProject(ctx context.Context, req *connect.Request[v1.UpdateProjectRequest]) (*connect.Response[v1.UpdateProjectResponse], error) {
	return c.updateProject.CallUnary(ctx, req)
}

// DeleteProject calls svc.project.v1.ProjectService.DeleteProject.
func (c *projectServiceClient) DeleteProject(ctx context.Context, req *connect.Request[v1.DeleteProjectRequest]) (*connect.Response[v1.DeleteProjectResponse], error) {
	return c.deleteProject.CallUnary(ctx, req)
}

// ListProject calls svc.project.v1.ProjectService.ListProject.
func (c *projectServiceClient) ListProject(ctx context.Context, req *connect.Request[v1.ListProjectRequest]) (*connect.Response[v1.ListProjectResponse], error) {
	return c.listProject.CallUnary(ctx, req)
}

// SyncProject calls svc.project.v1.ProjectService.SyncProject.
func (c *projectServiceClient) SyncProject(ctx context.Context, req *connect.Request[v1.SyncProjectRequest]) (*connect.Response[v1.SyncProjectResponse], error) {
	return c.syncProject.CallUnary(ctx, req)
}

// ProjectServiceHandler is an implementation of the svc.project.v1.ProjectService service.
type ProjectServiceHandler interface {
	CreateProject(context.Context, *connect.Request[v1.CreateProjectRequest]) (*connect.Response[v1.CreateProjectResponse], error)
	GetProject(context.Context, *connect.Request[v1.GetProjectRequest]) (*connect.Response[v1.GetProjectResponse], error)
	UpdateProject(context.Context, *connect.Request[v1.UpdateProjectRequest]) (*connect.Response[v1.UpdateProjectResponse], error)
	DeleteProject(context.Context, *connect.Request[v1.DeleteProjectRequest]) (*connect.Response[v1.DeleteProjectResponse], error)
	ListProject(context.Context, *connect.Request[v1.ListProjectRequest]) (*connect.Response[v1.ListProjectResponse], error)
	// SyncProject is like GetProject but guarantees that cached data
	// gets updated.
	SyncProject(context.Context, *connect.Request[v1.SyncProjectRequest]) (*connect.Response[v1.SyncProjectResponse], error)
}

// NewProjectServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewProjectServiceHandler(svc ProjectServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	projectServiceMethods := v1.File_svc_project_v1_service_proto.Services().ByName("ProjectService").Methods()
	projectServiceCreateProjectHandler := connect.NewUnaryHandler(
		ProjectServiceCreateProjectProcedure,
		svc.CreateProject,
		connect.WithSchema(projectServiceMethods.ByName("CreateProject")),
		connect.WithHandlerOptions(opts...),
	)
	projectServiceGetProjectHandler := connect.NewUnaryHandler(
		ProjectServiceGetProjectProcedure,
		svc.GetProject,
		connect.WithSchema(projectServiceMethods.ByName("GetProject")),
		connect.WithHandlerOptions(opts...),
	)
	projectServiceUpdateProjectHandler := connect.NewUnaryHandler(
		ProjectServiceUpdateProjectProcedure,
		svc.UpdateProject,
		connect.WithSchema(projectServiceMethods.ByName("UpdateProject")),
		connect.WithHandlerOptions(opts...),
	)
	projectServiceDeleteProjectHandler := connect.NewUnaryHandler(
		ProjectServiceDeleteProjectProcedure,
		svc.DeleteProject,
		connect.WithSchema(projectServiceMethods.ByName("DeleteProject")),
		connect.WithHandlerOptions(opts...),
	)
	projectServiceListProjectHandler := connect.NewUnaryHandler(
		ProjectServiceListProjectProcedure,
		svc.ListProject,
		connect.WithSchema(projectServiceMethods.ByName("ListProject")),
		connect.WithHandlerOptions(opts...),
	)
	projectServiceSyncProjectHandler := connect.NewUnaryHandler(
		ProjectServiceSyncProjectProcedure,
		svc.SyncProject,
		connect.WithSchema(projectServiceMethods.ByName("SyncProject")),
		connect.WithHandlerOptions(opts...),
	)
	return "/svc.project.v1.ProjectService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ProjectServiceCreateProjectProcedure:
			projectServiceCreateProjectHandler.ServeHTTP(w, r)
		case ProjectServiceGetProjectProcedure:
			projectServiceGetProjectHandler.ServeHTTP(w, r)
		case ProjectServiceUpdateProjectProcedure:
			projectServiceUpdateProjectHandler.ServeHTTP(w, r)
		case ProjectServiceDeleteProjectProcedure:
			projectServiceDeleteProjectHandler.ServeHTTP(w, r)
		case ProjectServiceListProjectProcedure:
			projectServiceListProjectHandler.ServeHTTP(w, r)
		case ProjectServiceSyncProjectProcedure:
			projectServiceSyncProjectHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedProjectServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedProjectServiceHandler struct{}

func (UnimplementedProjectServiceHandler) CreateProject(context.Context, *connect.Request[v1.CreateProjectRequest]) (*connect.Response[v1.CreateProjectResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("svc.project.v1.ProjectService.CreateProject is not implemented"))
}

func (UnimplementedProjectServiceHandler) GetProject(context.Context, *connect.Request[v1.GetProjectRequest]) (*connect.Response[v1.GetProjectResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("svc.project.v1.ProjectService.GetProject is not implemented"))
}

func (UnimplementedProjectServiceHandler) UpdateProject(context.Context, *connect.Request[v1.UpdateProjectRequest]) (*connect.Response[v1.UpdateProjectResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("svc.project.v1.ProjectService.UpdateProject is not implemented"))
}

func (UnimplementedProjectServiceHandler) DeleteProject(context.Context, *connect.Request[v1.DeleteProjectRequest]) (*connect.Response[v1.DeleteProjectResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("svc.project.v1.ProjectService.DeleteProject is not implemented"))
}

func (UnimplementedProjectServiceHandler) ListProject(context.Context, *connect.Request[v1.ListProjectRequest]) (*connect.Response[v1.ListProjectResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("svc.project.v1.ProjectService.ListProject is not implemented"))
}

func (UnimplementedProjectServiceHandler) SyncProject(context.Context, *connect.Request[v1.SyncProjectRequest]) (*connect.Response[v1.SyncProjectResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("svc.project.v1.ProjectService.SyncProject is not implemented"))
}
