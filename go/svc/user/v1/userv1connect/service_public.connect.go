// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: svc/user/v1/service_public.proto

package userv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/humanlogio/api/go/svc/user/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// PublicUserServiceName is the fully-qualified name of the PublicUserService service.
	PublicUserServiceName = "svc.user.v1.PublicUserService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// PublicUserServiceGetPublicUserProcedure is the fully-qualified name of the PublicUserService's
	// GetPublicUser RPC.
	PublicUserServiceGetPublicUserProcedure = "/svc.user.v1.PublicUserService/GetPublicUser"
	// PublicUserServiceGetPublicFavoriteQueryProcedure is the fully-qualified name of the
	// PublicUserService's GetPublicFavoriteQuery RPC.
	PublicUserServiceGetPublicFavoriteQueryProcedure = "/svc.user.v1.PublicUserService/GetPublicFavoriteQuery"
	// PublicUserServiceListPublicFavoriteQueryProcedure is the fully-qualified name of the
	// PublicUserService's ListPublicFavoriteQuery RPC.
	PublicUserServiceListPublicFavoriteQueryProcedure = "/svc.user.v1.PublicUserService/ListPublicFavoriteQuery"
)

// PublicUserServiceClient is a client for the svc.user.v1.PublicUserService service.
type PublicUserServiceClient interface {
	GetPublicUser(context.Context, *connect.Request[v1.GetPublicUserRequest]) (*connect.Response[v1.GetPublicUserResponse], error)
	GetPublicFavoriteQuery(context.Context, *connect.Request[v1.GetPublicFavoriteQueryRequest]) (*connect.Response[v1.GetPublicFavoriteQueryResponse], error)
	ListPublicFavoriteQuery(context.Context, *connect.Request[v1.ListPublicFavoriteQueryRequest]) (*connect.Response[v1.ListPublicFavoriteQueryResponse], error)
}

// NewPublicUserServiceClient constructs a client for the svc.user.v1.PublicUserService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewPublicUserServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) PublicUserServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	publicUserServiceMethods := v1.File_svc_user_v1_service_public_proto.Services().ByName("PublicUserService").Methods()
	return &publicUserServiceClient{
		getPublicUser: connect.NewClient[v1.GetPublicUserRequest, v1.GetPublicUserResponse](
			httpClient,
			baseURL+PublicUserServiceGetPublicUserProcedure,
			connect.WithSchema(publicUserServiceMethods.ByName("GetPublicUser")),
			connect.WithClientOptions(opts...),
		),
		getPublicFavoriteQuery: connect.NewClient[v1.GetPublicFavoriteQueryRequest, v1.GetPublicFavoriteQueryResponse](
			httpClient,
			baseURL+PublicUserServiceGetPublicFavoriteQueryProcedure,
			connect.WithSchema(publicUserServiceMethods.ByName("GetPublicFavoriteQuery")),
			connect.WithClientOptions(opts...),
		),
		listPublicFavoriteQuery: connect.NewClient[v1.ListPublicFavoriteQueryRequest, v1.ListPublicFavoriteQueryResponse](
			httpClient,
			baseURL+PublicUserServiceListPublicFavoriteQueryProcedure,
			connect.WithSchema(publicUserServiceMethods.ByName("ListPublicFavoriteQuery")),
			connect.WithClientOptions(opts...),
		),
	}
}

// publicUserServiceClient implements PublicUserServiceClient.
type publicUserServiceClient struct {
	getPublicUser           *connect.Client[v1.GetPublicUserRequest, v1.GetPublicUserResponse]
	getPublicFavoriteQuery  *connect.Client[v1.GetPublicFavoriteQueryRequest, v1.GetPublicFavoriteQueryResponse]
	listPublicFavoriteQuery *connect.Client[v1.ListPublicFavoriteQueryRequest, v1.ListPublicFavoriteQueryResponse]
}

// GetPublicUser calls svc.user.v1.PublicUserService.GetPublicUser.
func (c *publicUserServiceClient) GetPublicUser(ctx context.Context, req *connect.Request[v1.GetPublicUserRequest]) (*connect.Response[v1.GetPublicUserResponse], error) {
	return c.getPublicUser.CallUnary(ctx, req)
}

// GetPublicFavoriteQuery calls svc.user.v1.PublicUserService.GetPublicFavoriteQuery.
func (c *publicUserServiceClient) GetPublicFavoriteQuery(ctx context.Context, req *connect.Request[v1.GetPublicFavoriteQueryRequest]) (*connect.Response[v1.GetPublicFavoriteQueryResponse], error) {
	return c.getPublicFavoriteQuery.CallUnary(ctx, req)
}

// ListPublicFavoriteQuery calls svc.user.v1.PublicUserService.ListPublicFavoriteQuery.
func (c *publicUserServiceClient) ListPublicFavoriteQuery(ctx context.Context, req *connect.Request[v1.ListPublicFavoriteQueryRequest]) (*connect.Response[v1.ListPublicFavoriteQueryResponse], error) {
	return c.listPublicFavoriteQuery.CallUnary(ctx, req)
}

// PublicUserServiceHandler is an implementation of the svc.user.v1.PublicUserService service.
type PublicUserServiceHandler interface {
	GetPublicUser(context.Context, *connect.Request[v1.GetPublicUserRequest]) (*connect.Response[v1.GetPublicUserResponse], error)
	GetPublicFavoriteQuery(context.Context, *connect.Request[v1.GetPublicFavoriteQueryRequest]) (*connect.Response[v1.GetPublicFavoriteQueryResponse], error)
	ListPublicFavoriteQuery(context.Context, *connect.Request[v1.ListPublicFavoriteQueryRequest]) (*connect.Response[v1.ListPublicFavoriteQueryResponse], error)
}

// NewPublicUserServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewPublicUserServiceHandler(svc PublicUserServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	publicUserServiceMethods := v1.File_svc_user_v1_service_public_proto.Services().ByName("PublicUserService").Methods()
	publicUserServiceGetPublicUserHandler := connect.NewUnaryHandler(
		PublicUserServiceGetPublicUserProcedure,
		svc.GetPublicUser,
		connect.WithSchema(publicUserServiceMethods.ByName("GetPublicUser")),
		connect.WithHandlerOptions(opts...),
	)
	publicUserServiceGetPublicFavoriteQueryHandler := connect.NewUnaryHandler(
		PublicUserServiceGetPublicFavoriteQueryProcedure,
		svc.GetPublicFavoriteQuery,
		connect.WithSchema(publicUserServiceMethods.ByName("GetPublicFavoriteQuery")),
		connect.WithHandlerOptions(opts...),
	)
	publicUserServiceListPublicFavoriteQueryHandler := connect.NewUnaryHandler(
		PublicUserServiceListPublicFavoriteQueryProcedure,
		svc.ListPublicFavoriteQuery,
		connect.WithSchema(publicUserServiceMethods.ByName("ListPublicFavoriteQuery")),
		connect.WithHandlerOptions(opts...),
	)
	return "/svc.user.v1.PublicUserService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case PublicUserServiceGetPublicUserProcedure:
			publicUserServiceGetPublicUserHandler.ServeHTTP(w, r)
		case PublicUserServiceGetPublicFavoriteQueryProcedure:
			publicUserServiceGetPublicFavoriteQueryHandler.ServeHTTP(w, r)
		case PublicUserServiceListPublicFavoriteQueryProcedure:
			publicUserServiceListPublicFavoriteQueryHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedPublicUserServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedPublicUserServiceHandler struct{}

func (UnimplementedPublicUserServiceHandler) GetPublicUser(context.Context, *connect.Request[v1.GetPublicUserRequest]) (*connect.Response[v1.GetPublicUserResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("svc.user.v1.PublicUserService.GetPublicUser is not implemented"))
}

func (UnimplementedPublicUserServiceHandler) GetPublicFavoriteQuery(context.Context, *connect.Request[v1.GetPublicFavoriteQueryRequest]) (*connect.Response[v1.GetPublicFavoriteQueryResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("svc.user.v1.PublicUserService.GetPublicFavoriteQuery is not implemented"))
}

func (UnimplementedPublicUserServiceHandler) ListPublicFavoriteQuery(context.Context, *connect.Request[v1.ListPublicFavoriteQueryRequest]) (*connect.Response[v1.ListPublicFavoriteQueryResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("svc.user.v1.PublicUserService.ListPublicFavoriteQuery is not implemented"))
}
