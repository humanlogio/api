// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: svc/alert/v1/service.proto

package alertv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/humanlogio/api/go/svc/alert/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// AlertServiceName is the fully-qualified name of the AlertService service.
	AlertServiceName = "svc.alert.v1.AlertService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// AlertServiceCreateAlertRuleProcedure is the fully-qualified name of the AlertService's
	// CreateAlertRule RPC.
	AlertServiceCreateAlertRuleProcedure = "/svc.alert.v1.AlertService/CreateAlertRule"
	// AlertServiceGetAlertRuleProcedure is the fully-qualified name of the AlertService's GetAlertRule
	// RPC.
	AlertServiceGetAlertRuleProcedure = "/svc.alert.v1.AlertService/GetAlertRule"
	// AlertServiceUpdateAlertRuleProcedure is the fully-qualified name of the AlertService's
	// UpdateAlertRule RPC.
	AlertServiceUpdateAlertRuleProcedure = "/svc.alert.v1.AlertService/UpdateAlertRule"
	// AlertServiceDeleteAlertRuleProcedure is the fully-qualified name of the AlertService's
	// DeleteAlertRule RPC.
	AlertServiceDeleteAlertRuleProcedure = "/svc.alert.v1.AlertService/DeleteAlertRule"
	// AlertServiceListAlertRuleProcedure is the fully-qualified name of the AlertService's
	// ListAlertRule RPC.
	AlertServiceListAlertRuleProcedure = "/svc.alert.v1.AlertService/ListAlertRule"
)

// AlertServiceClient is a client for the svc.alert.v1.AlertService service.
type AlertServiceClient interface {
	CreateAlertRule(context.Context, *connect.Request[v1.CreateAlertRuleRequest]) (*connect.Response[v1.CreateAlertRuleResponse], error)
	GetAlertRule(context.Context, *connect.Request[v1.GetAlertRuleRequest]) (*connect.Response[v1.GetAlertRuleResponse], error)
	UpdateAlertRule(context.Context, *connect.Request[v1.UpdateAlertRuleRequest]) (*connect.Response[v1.UpdateAlertRuleResponse], error)
	DeleteAlertRule(context.Context, *connect.Request[v1.DeleteAlertRuleRequest]) (*connect.Response[v1.DeleteAlertRuleResponse], error)
	ListAlertRule(context.Context, *connect.Request[v1.ListAlertRuleRequest]) (*connect.Response[v1.ListAlertRuleResponse], error)
}

// NewAlertServiceClient constructs a client for the svc.alert.v1.AlertService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAlertServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) AlertServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	alertServiceMethods := v1.File_svc_alert_v1_service_proto.Services().ByName("AlertService").Methods()
	return &alertServiceClient{
		createAlertRule: connect.NewClient[v1.CreateAlertRuleRequest, v1.CreateAlertRuleResponse](
			httpClient,
			baseURL+AlertServiceCreateAlertRuleProcedure,
			connect.WithSchema(alertServiceMethods.ByName("CreateAlertRule")),
			connect.WithClientOptions(opts...),
		),
		getAlertRule: connect.NewClient[v1.GetAlertRuleRequest, v1.GetAlertRuleResponse](
			httpClient,
			baseURL+AlertServiceGetAlertRuleProcedure,
			connect.WithSchema(alertServiceMethods.ByName("GetAlertRule")),
			connect.WithClientOptions(opts...),
		),
		updateAlertRule: connect.NewClient[v1.UpdateAlertRuleRequest, v1.UpdateAlertRuleResponse](
			httpClient,
			baseURL+AlertServiceUpdateAlertRuleProcedure,
			connect.WithSchema(alertServiceMethods.ByName("UpdateAlertRule")),
			connect.WithClientOptions(opts...),
		),
		deleteAlertRule: connect.NewClient[v1.DeleteAlertRuleRequest, v1.DeleteAlertRuleResponse](
			httpClient,
			baseURL+AlertServiceDeleteAlertRuleProcedure,
			connect.WithSchema(alertServiceMethods.ByName("DeleteAlertRule")),
			connect.WithClientOptions(opts...),
		),
		listAlertRule: connect.NewClient[v1.ListAlertRuleRequest, v1.ListAlertRuleResponse](
			httpClient,
			baseURL+AlertServiceListAlertRuleProcedure,
			connect.WithSchema(alertServiceMethods.ByName("ListAlertRule")),
			connect.WithClientOptions(opts...),
		),
	}
}

// alertServiceClient implements AlertServiceClient.
type alertServiceClient struct {
	createAlertRule *connect.Client[v1.CreateAlertRuleRequest, v1.CreateAlertRuleResponse]
	getAlertRule    *connect.Client[v1.GetAlertRuleRequest, v1.GetAlertRuleResponse]
	updateAlertRule *connect.Client[v1.UpdateAlertRuleRequest, v1.UpdateAlertRuleResponse]
	deleteAlertRule *connect.Client[v1.DeleteAlertRuleRequest, v1.DeleteAlertRuleResponse]
	listAlertRule   *connect.Client[v1.ListAlertRuleRequest, v1.ListAlertRuleResponse]
}

// CreateAlertRule calls svc.alert.v1.AlertService.CreateAlertRule.
func (c *alertServiceClient) CreateAlertRule(ctx context.Context, req *connect.Request[v1.CreateAlertRuleRequest]) (*connect.Response[v1.CreateAlertRuleResponse], error) {
	return c.createAlertRule.CallUnary(ctx, req)
}

// GetAlertRule calls svc.alert.v1.AlertService.GetAlertRule.
func (c *alertServiceClient) GetAlertRule(ctx context.Context, req *connect.Request[v1.GetAlertRuleRequest]) (*connect.Response[v1.GetAlertRuleResponse], error) {
	return c.getAlertRule.CallUnary(ctx, req)
}

// UpdateAlertRule calls svc.alert.v1.AlertService.UpdateAlertRule.
func (c *alertServiceClient) UpdateAlertRule(ctx context.Context, req *connect.Request[v1.UpdateAlertRuleRequest]) (*connect.Response[v1.UpdateAlertRuleResponse], error) {
	return c.updateAlertRule.CallUnary(ctx, req)
}

// DeleteAlertRule calls svc.alert.v1.AlertService.DeleteAlertRule.
func (c *alertServiceClient) DeleteAlertRule(ctx context.Context, req *connect.Request[v1.DeleteAlertRuleRequest]) (*connect.Response[v1.DeleteAlertRuleResponse], error) {
	return c.deleteAlertRule.CallUnary(ctx, req)
}

// ListAlertRule calls svc.alert.v1.AlertService.ListAlertRule.
func (c *alertServiceClient) ListAlertRule(ctx context.Context, req *connect.Request[v1.ListAlertRuleRequest]) (*connect.Response[v1.ListAlertRuleResponse], error) {
	return c.listAlertRule.CallUnary(ctx, req)
}

// AlertServiceHandler is an implementation of the svc.alert.v1.AlertService service.
type AlertServiceHandler interface {
	CreateAlertRule(context.Context, *connect.Request[v1.CreateAlertRuleRequest]) (*connect.Response[v1.CreateAlertRuleResponse], error)
	GetAlertRule(context.Context, *connect.Request[v1.GetAlertRuleRequest]) (*connect.Response[v1.GetAlertRuleResponse], error)
	UpdateAlertRule(context.Context, *connect.Request[v1.UpdateAlertRuleRequest]) (*connect.Response[v1.UpdateAlertRuleResponse], error)
	DeleteAlertRule(context.Context, *connect.Request[v1.DeleteAlertRuleRequest]) (*connect.Response[v1.DeleteAlertRuleResponse], error)
	ListAlertRule(context.Context, *connect.Request[v1.ListAlertRuleRequest]) (*connect.Response[v1.ListAlertRuleResponse], error)
}

// NewAlertServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAlertServiceHandler(svc AlertServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	alertServiceMethods := v1.File_svc_alert_v1_service_proto.Services().ByName("AlertService").Methods()
	alertServiceCreateAlertRuleHandler := connect.NewUnaryHandler(
		AlertServiceCreateAlertRuleProcedure,
		svc.CreateAlertRule,
		connect.WithSchema(alertServiceMethods.ByName("CreateAlertRule")),
		connect.WithHandlerOptions(opts...),
	)
	alertServiceGetAlertRuleHandler := connect.NewUnaryHandler(
		AlertServiceGetAlertRuleProcedure,
		svc.GetAlertRule,
		connect.WithSchema(alertServiceMethods.ByName("GetAlertRule")),
		connect.WithHandlerOptions(opts...),
	)
	alertServiceUpdateAlertRuleHandler := connect.NewUnaryHandler(
		AlertServiceUpdateAlertRuleProcedure,
		svc.UpdateAlertRule,
		connect.WithSchema(alertServiceMethods.ByName("UpdateAlertRule")),
		connect.WithHandlerOptions(opts...),
	)
	alertServiceDeleteAlertRuleHandler := connect.NewUnaryHandler(
		AlertServiceDeleteAlertRuleProcedure,
		svc.DeleteAlertRule,
		connect.WithSchema(alertServiceMethods.ByName("DeleteAlertRule")),
		connect.WithHandlerOptions(opts...),
	)
	alertServiceListAlertRuleHandler := connect.NewUnaryHandler(
		AlertServiceListAlertRuleProcedure,
		svc.ListAlertRule,
		connect.WithSchema(alertServiceMethods.ByName("ListAlertRule")),
		connect.WithHandlerOptions(opts...),
	)
	return "/svc.alert.v1.AlertService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AlertServiceCreateAlertRuleProcedure:
			alertServiceCreateAlertRuleHandler.ServeHTTP(w, r)
		case AlertServiceGetAlertRuleProcedure:
			alertServiceGetAlertRuleHandler.ServeHTTP(w, r)
		case AlertServiceUpdateAlertRuleProcedure:
			alertServiceUpdateAlertRuleHandler.ServeHTTP(w, r)
		case AlertServiceDeleteAlertRuleProcedure:
			alertServiceDeleteAlertRuleHandler.ServeHTTP(w, r)
		case AlertServiceListAlertRuleProcedure:
			alertServiceListAlertRuleHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAlertServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAlertServiceHandler struct{}

func (UnimplementedAlertServiceHandler) CreateAlertRule(context.Context, *connect.Request[v1.CreateAlertRuleRequest]) (*connect.Response[v1.CreateAlertRuleResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("svc.alert.v1.AlertService.CreateAlertRule is not implemented"))
}

func (UnimplementedAlertServiceHandler) GetAlertRule(context.Context, *connect.Request[v1.GetAlertRuleRequest]) (*connect.Response[v1.GetAlertRuleResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("svc.alert.v1.AlertService.GetAlertRule is not implemented"))
}

func (UnimplementedAlertServiceHandler) UpdateAlertRule(context.Context, *connect.Request[v1.UpdateAlertRuleRequest]) (*connect.Response[v1.UpdateAlertRuleResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("svc.alert.v1.AlertService.UpdateAlertRule is not implemented"))
}

func (UnimplementedAlertServiceHandler) DeleteAlertRule(context.Context, *connect.Request[v1.DeleteAlertRuleRequest]) (*connect.Response[v1.DeleteAlertRuleResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("svc.alert.v1.AlertService.DeleteAlertRule is not implemented"))
}

func (UnimplementedAlertServiceHandler) ListAlertRule(context.Context, *connect.Request[v1.ListAlertRuleRequest]) (*connect.Response[v1.ListAlertRuleResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("svc.alert.v1.AlertService.ListAlertRule is not implemented"))
}
