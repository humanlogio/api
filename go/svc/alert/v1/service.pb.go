// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        (unknown)
// source: svc/alert/v1/service.proto

package alertv1

import (
	v1 "github.com/humanlogio/api/go/types/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CreateAlertRuleRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	EnvironmentId int64                  `protobuf:"varint,101,opt,name=environment_id,json=environmentId,proto3" json:"environment_id,omitempty"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Expr          *v1.Query              `protobuf:"bytes,2,opt,name=expr,proto3" json:"expr,omitempty"`
	Labels        *v1.Obj                `protobuf:"bytes,3,opt,name=labels,proto3" json:"labels,omitempty"`
	Annotations   *v1.Obj                `protobuf:"bytes,4,opt,name=annotations,proto3" json:"annotations,omitempty"`
	For           *durationpb.Duration   `protobuf:"bytes,51,opt,name=for,proto3" json:"for,omitempty"`
	KeepFiringFor *durationpb.Duration   `protobuf:"bytes,52,opt,name=keep_firing_for,json=keepFiringFor,proto3" json:"keep_firing_for,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateAlertRuleRequest) Reset() {
	*x = CreateAlertRuleRequest{}
	mi := &file_svc_alert_v1_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateAlertRuleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAlertRuleRequest) ProtoMessage() {}

func (x *CreateAlertRuleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_svc_alert_v1_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAlertRuleRequest.ProtoReflect.Descriptor instead.
func (*CreateAlertRuleRequest) Descriptor() ([]byte, []int) {
	return file_svc_alert_v1_service_proto_rawDescGZIP(), []int{0}
}

func (x *CreateAlertRuleRequest) GetEnvironmentId() int64 {
	if x != nil {
		return x.EnvironmentId
	}
	return 0
}

func (x *CreateAlertRuleRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateAlertRuleRequest) GetExpr() *v1.Query {
	if x != nil {
		return x.Expr
	}
	return nil
}

func (x *CreateAlertRuleRequest) GetLabels() *v1.Obj {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *CreateAlertRuleRequest) GetAnnotations() *v1.Obj {
	if x != nil {
		return x.Annotations
	}
	return nil
}

func (x *CreateAlertRuleRequest) GetFor() *durationpb.Duration {
	if x != nil {
		return x.For
	}
	return nil
}

func (x *CreateAlertRuleRequest) GetKeepFiringFor() *durationpb.Duration {
	if x != nil {
		return x.KeepFiringFor
	}
	return nil
}

type CreateAlertRuleResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AlertRule     *v1.AlertRule          `protobuf:"bytes,1,opt,name=alert_rule,json=alertRule,proto3" json:"alert_rule,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateAlertRuleResponse) Reset() {
	*x = CreateAlertRuleResponse{}
	mi := &file_svc_alert_v1_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateAlertRuleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAlertRuleResponse) ProtoMessage() {}

func (x *CreateAlertRuleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_svc_alert_v1_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAlertRuleResponse.ProtoReflect.Descriptor instead.
func (*CreateAlertRuleResponse) Descriptor() ([]byte, []int) {
	return file_svc_alert_v1_service_proto_rawDescGZIP(), []int{1}
}

func (x *CreateAlertRuleResponse) GetAlertRule() *v1.AlertRule {
	if x != nil {
		return x.AlertRule
	}
	return nil
}

type GetAlertRuleRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	EnvironmentId int64                  `protobuf:"varint,101,opt,name=environment_id,json=environmentId,proto3" json:"environment_id,omitempty"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetAlertRuleRequest) Reset() {
	*x = GetAlertRuleRequest{}
	mi := &file_svc_alert_v1_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAlertRuleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAlertRuleRequest) ProtoMessage() {}

func (x *GetAlertRuleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_svc_alert_v1_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAlertRuleRequest.ProtoReflect.Descriptor instead.
func (*GetAlertRuleRequest) Descriptor() ([]byte, []int) {
	return file_svc_alert_v1_service_proto_rawDescGZIP(), []int{2}
}

func (x *GetAlertRuleRequest) GetEnvironmentId() int64 {
	if x != nil {
		return x.EnvironmentId
	}
	return 0
}

func (x *GetAlertRuleRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type GetAlertRuleResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AlertRule     *v1.AlertRule          `protobuf:"bytes,1,opt,name=alert_rule,json=alertRule,proto3" json:"alert_rule,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetAlertRuleResponse) Reset() {
	*x = GetAlertRuleResponse{}
	mi := &file_svc_alert_v1_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAlertRuleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAlertRuleResponse) ProtoMessage() {}

func (x *GetAlertRuleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_svc_alert_v1_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAlertRuleResponse.ProtoReflect.Descriptor instead.
func (*GetAlertRuleResponse) Descriptor() ([]byte, []int) {
	return file_svc_alert_v1_service_proto_rawDescGZIP(), []int{3}
}

func (x *GetAlertRuleResponse) GetAlertRule() *v1.AlertRule {
	if x != nil {
		return x.AlertRule
	}
	return nil
}

type UpdateAlertRuleRequest struct {
	state         protoimpl.MessageState             `protogen:"open.v1"`
	EnvironmentId int64                              `protobuf:"varint,101,opt,name=environment_id,json=environmentId,proto3" json:"environment_id,omitempty"`
	Id            int64                              `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Mutations     []*UpdateAlertRuleRequest_Mutation `protobuf:"bytes,2,rep,name=mutations,proto3" json:"mutations,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateAlertRuleRequest) Reset() {
	*x = UpdateAlertRuleRequest{}
	mi := &file_svc_alert_v1_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateAlertRuleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAlertRuleRequest) ProtoMessage() {}

func (x *UpdateAlertRuleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_svc_alert_v1_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAlertRuleRequest.ProtoReflect.Descriptor instead.
func (*UpdateAlertRuleRequest) Descriptor() ([]byte, []int) {
	return file_svc_alert_v1_service_proto_rawDescGZIP(), []int{4}
}

func (x *UpdateAlertRuleRequest) GetEnvironmentId() int64 {
	if x != nil {
		return x.EnvironmentId
	}
	return 0
}

func (x *UpdateAlertRuleRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateAlertRuleRequest) GetMutations() []*UpdateAlertRuleRequest_Mutation {
	if x != nil {
		return x.Mutations
	}
	return nil
}

type UpdateAlertRuleResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AlertRule     *v1.AlertRule          `protobuf:"bytes,1,opt,name=alert_rule,json=alertRule,proto3" json:"alert_rule,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateAlertRuleResponse) Reset() {
	*x = UpdateAlertRuleResponse{}
	mi := &file_svc_alert_v1_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateAlertRuleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAlertRuleResponse) ProtoMessage() {}

func (x *UpdateAlertRuleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_svc_alert_v1_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAlertRuleResponse.ProtoReflect.Descriptor instead.
func (*UpdateAlertRuleResponse) Descriptor() ([]byte, []int) {
	return file_svc_alert_v1_service_proto_rawDescGZIP(), []int{5}
}

func (x *UpdateAlertRuleResponse) GetAlertRule() *v1.AlertRule {
	if x != nil {
		return x.AlertRule
	}
	return nil
}

type DeleteAlertRuleRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	EnvironmentId int64                  `protobuf:"varint,101,opt,name=environment_id,json=environmentId,proto3" json:"environment_id,omitempty"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteAlertRuleRequest) Reset() {
	*x = DeleteAlertRuleRequest{}
	mi := &file_svc_alert_v1_service_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteAlertRuleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAlertRuleRequest) ProtoMessage() {}

func (x *DeleteAlertRuleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_svc_alert_v1_service_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAlertRuleRequest.ProtoReflect.Descriptor instead.
func (*DeleteAlertRuleRequest) Descriptor() ([]byte, []int) {
	return file_svc_alert_v1_service_proto_rawDescGZIP(), []int{6}
}

func (x *DeleteAlertRuleRequest) GetEnvironmentId() int64 {
	if x != nil {
		return x.EnvironmentId
	}
	return 0
}

func (x *DeleteAlertRuleRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type DeleteAlertRuleResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteAlertRuleResponse) Reset() {
	*x = DeleteAlertRuleResponse{}
	mi := &file_svc_alert_v1_service_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteAlertRuleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAlertRuleResponse) ProtoMessage() {}

func (x *DeleteAlertRuleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_svc_alert_v1_service_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAlertRuleResponse.ProtoReflect.Descriptor instead.
func (*DeleteAlertRuleResponse) Descriptor() ([]byte, []int) {
	return file_svc_alert_v1_service_proto_rawDescGZIP(), []int{7}
}

type ListAlertRuleRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	EnvironmentId int64                  `protobuf:"varint,101,opt,name=environment_id,json=environmentId,proto3" json:"environment_id,omitempty"`
	Cursor        *v1.Cursor             `protobuf:"bytes,102,opt,name=cursor,proto3" json:"cursor,omitempty"`
	Limit         int32                  `protobuf:"varint,103,opt,name=limit,proto3" json:"limit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListAlertRuleRequest) Reset() {
	*x = ListAlertRuleRequest{}
	mi := &file_svc_alert_v1_service_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListAlertRuleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAlertRuleRequest) ProtoMessage() {}

func (x *ListAlertRuleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_svc_alert_v1_service_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAlertRuleRequest.ProtoReflect.Descriptor instead.
func (*ListAlertRuleRequest) Descriptor() ([]byte, []int) {
	return file_svc_alert_v1_service_proto_rawDescGZIP(), []int{8}
}

func (x *ListAlertRuleRequest) GetEnvironmentId() int64 {
	if x != nil {
		return x.EnvironmentId
	}
	return 0
}

func (x *ListAlertRuleRequest) GetCursor() *v1.Cursor {
	if x != nil {
		return x.Cursor
	}
	return nil
}

func (x *ListAlertRuleRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type ListAlertRuleResponse struct {
	state         protoimpl.MessageState            `protogen:"open.v1"`
	Next          *v1.Cursor                        `protobuf:"bytes,100,opt,name=next,proto3" json:"next,omitempty"`
	Items         []*ListAlertRuleResponse_ListItem `protobuf:"bytes,200,rep,name=items,proto3" json:"items,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListAlertRuleResponse) Reset() {
	*x = ListAlertRuleResponse{}
	mi := &file_svc_alert_v1_service_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListAlertRuleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAlertRuleResponse) ProtoMessage() {}

func (x *ListAlertRuleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_svc_alert_v1_service_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAlertRuleResponse.ProtoReflect.Descriptor instead.
func (*ListAlertRuleResponse) Descriptor() ([]byte, []int) {
	return file_svc_alert_v1_service_proto_rawDescGZIP(), []int{9}
}

func (x *ListAlertRuleResponse) GetNext() *v1.Cursor {
	if x != nil {
		return x.Next
	}
	return nil
}

func (x *ListAlertRuleResponse) GetItems() []*ListAlertRuleResponse_ListItem {
	if x != nil {
		return x.Items
	}
	return nil
}

type UpdateAlertRuleRequest_Mutation struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Do:
	//
	//	*UpdateAlertRuleRequest_Mutation_SetName
	//	*UpdateAlertRuleRequest_Mutation_SetExpr
	//	*UpdateAlertRuleRequest_Mutation_SetLabels
	//	*UpdateAlertRuleRequest_Mutation_SetAnnotations
	//	*UpdateAlertRuleRequest_Mutation_SetFor
	//	*UpdateAlertRuleRequest_Mutation_SetKeepFiringFor
	Do            isUpdateAlertRuleRequest_Mutation_Do `protobuf_oneof:"do"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateAlertRuleRequest_Mutation) Reset() {
	*x = UpdateAlertRuleRequest_Mutation{}
	mi := &file_svc_alert_v1_service_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateAlertRuleRequest_Mutation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAlertRuleRequest_Mutation) ProtoMessage() {}

func (x *UpdateAlertRuleRequest_Mutation) ProtoReflect() protoreflect.Message {
	mi := &file_svc_alert_v1_service_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAlertRuleRequest_Mutation.ProtoReflect.Descriptor instead.
func (*UpdateAlertRuleRequest_Mutation) Descriptor() ([]byte, []int) {
	return file_svc_alert_v1_service_proto_rawDescGZIP(), []int{4, 0}
}

func (x *UpdateAlertRuleRequest_Mutation) GetDo() isUpdateAlertRuleRequest_Mutation_Do {
	if x != nil {
		return x.Do
	}
	return nil
}

func (x *UpdateAlertRuleRequest_Mutation) GetSetName() string {
	if x != nil {
		if x, ok := x.Do.(*UpdateAlertRuleRequest_Mutation_SetName); ok {
			return x.SetName
		}
	}
	return ""
}

func (x *UpdateAlertRuleRequest_Mutation) GetSetExpr() *v1.Query {
	if x != nil {
		if x, ok := x.Do.(*UpdateAlertRuleRequest_Mutation_SetExpr); ok {
			return x.SetExpr
		}
	}
	return nil
}

func (x *UpdateAlertRuleRequest_Mutation) GetSetLabels() *v1.Obj {
	if x != nil {
		if x, ok := x.Do.(*UpdateAlertRuleRequest_Mutation_SetLabels); ok {
			return x.SetLabels
		}
	}
	return nil
}

func (x *UpdateAlertRuleRequest_Mutation) GetSetAnnotations() *v1.Obj {
	if x != nil {
		if x, ok := x.Do.(*UpdateAlertRuleRequest_Mutation_SetAnnotations); ok {
			return x.SetAnnotations
		}
	}
	return nil
}

func (x *UpdateAlertRuleRequest_Mutation) GetSetFor() *durationpb.Duration {
	if x != nil {
		if x, ok := x.Do.(*UpdateAlertRuleRequest_Mutation_SetFor); ok {
			return x.SetFor
		}
	}
	return nil
}

func (x *UpdateAlertRuleRequest_Mutation) GetSetKeepFiringFor() *durationpb.Duration {
	if x != nil {
		if x, ok := x.Do.(*UpdateAlertRuleRequest_Mutation_SetKeepFiringFor); ok {
			return x.SetKeepFiringFor
		}
	}
	return nil
}

type isUpdateAlertRuleRequest_Mutation_Do interface {
	isUpdateAlertRuleRequest_Mutation_Do()
}

type UpdateAlertRuleRequest_Mutation_SetName struct {
	SetName string `protobuf:"bytes,1,opt,name=set_name,json=setName,proto3,oneof"`
}

type UpdateAlertRuleRequest_Mutation_SetExpr struct {
	SetExpr *v1.Query `protobuf:"bytes,2,opt,name=set_expr,json=setExpr,proto3,oneof"`
}

type UpdateAlertRuleRequest_Mutation_SetLabels struct {
	SetLabels *v1.Obj `protobuf:"bytes,3,opt,name=set_labels,json=setLabels,proto3,oneof"`
}

type UpdateAlertRuleRequest_Mutation_SetAnnotations struct {
	SetAnnotations *v1.Obj `protobuf:"bytes,4,opt,name=set_annotations,json=setAnnotations,proto3,oneof"`
}

type UpdateAlertRuleRequest_Mutation_SetFor struct {
	SetFor *durationpb.Duration `protobuf:"bytes,51,opt,name=set_for,json=setFor,proto3,oneof"`
}

type UpdateAlertRuleRequest_Mutation_SetKeepFiringFor struct {
	SetKeepFiringFor *durationpb.Duration `protobuf:"bytes,52,opt,name=set_keep_firing_for,json=setKeepFiringFor,proto3,oneof"`
}

func (*UpdateAlertRuleRequest_Mutation_SetName) isUpdateAlertRuleRequest_Mutation_Do() {}

func (*UpdateAlertRuleRequest_Mutation_SetExpr) isUpdateAlertRuleRequest_Mutation_Do() {}

func (*UpdateAlertRuleRequest_Mutation_SetLabels) isUpdateAlertRuleRequest_Mutation_Do() {}

func (*UpdateAlertRuleRequest_Mutation_SetAnnotations) isUpdateAlertRuleRequest_Mutation_Do() {}

func (*UpdateAlertRuleRequest_Mutation_SetFor) isUpdateAlertRuleRequest_Mutation_Do() {}

func (*UpdateAlertRuleRequest_Mutation_SetKeepFiringFor) isUpdateAlertRuleRequest_Mutation_Do() {}

type ListAlertRuleResponse_ListItem struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AlertRule     *v1.AlertRule          `protobuf:"bytes,2,opt,name=alert_rule,json=alertRule,proto3" json:"alert_rule,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListAlertRuleResponse_ListItem) Reset() {
	*x = ListAlertRuleResponse_ListItem{}
	mi := &file_svc_alert_v1_service_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListAlertRuleResponse_ListItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAlertRuleResponse_ListItem) ProtoMessage() {}

func (x *ListAlertRuleResponse_ListItem) ProtoReflect() protoreflect.Message {
	mi := &file_svc_alert_v1_service_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAlertRuleResponse_ListItem.ProtoReflect.Descriptor instead.
func (*ListAlertRuleResponse_ListItem) Descriptor() ([]byte, []int) {
	return file_svc_alert_v1_service_proto_rawDescGZIP(), []int{9, 0}
}

func (x *ListAlertRuleResponse_ListItem) GetAlertRule() *v1.AlertRule {
	if x != nil {
		return x.AlertRule
	}
	return nil
}

var File_svc_alert_v1_service_proto protoreflect.FileDescriptor

var file_svc_alert_v1_service_proto_rawDesc = string([]byte{
	0x0a, 0x1a, 0x73, 0x76, 0x63, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x73, 0x76,
	0x63, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x15, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x75, 0x72, 0x73,
	0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f,
	0x76, 0x31, 0x2f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc0, 0x02, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41,
	0x6c, 0x65, 0x72, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x25, 0x0a, 0x0e, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x65, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x04, 0x65, 0x78,
	0x70, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x04, 0x65, 0x78, 0x70, 0x72, 0x12,
	0x25, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x52, 0x06,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x2f, 0x0a, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x52, 0x0b, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2b, 0x0a, 0x03, 0x66, 0x6f, 0x72, 0x18, 0x33,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x03, 0x66, 0x6f, 0x72, 0x12, 0x41, 0x0a, 0x0f, 0x6b, 0x65, 0x65, 0x70, 0x5f, 0x66, 0x69, 0x72,
	0x69, 0x6e, 0x67, 0x5f, 0x66, 0x6f, 0x72, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x6b, 0x65, 0x65, 0x70, 0x46, 0x69,
	0x72, 0x69, 0x6e, 0x67, 0x46, 0x6f, 0x72, 0x22, 0x4d, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x32, 0x0a, 0x0a, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x09, 0x61, 0x6c, 0x65,
	0x72, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x22, 0x4c, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x65,
	0x72, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a,
	0x0e, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x65, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x02, 0x69, 0x64, 0x22, 0x4a, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x65, 0x72, 0x74,
	0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x0a,
	0x61, 0x6c, 0x65, 0x72, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6c, 0x65, 0x72,
	0x74, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x09, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x75, 0x6c, 0x65,
	0x22, 0xe6, 0x03, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x6c, 0x65, 0x72, 0x74,
	0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x65,
	0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x65, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0d, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x4b, 0x0a, 0x09, 0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x61, 0x6c, 0x65, 0x72,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x6c, 0x65, 0x72, 0x74,
	0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x75, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a,
	0xc7, 0x02, 0x0a, 0x08, 0x4d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x08,
	0x73, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x07, 0x73, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x08, 0x73, 0x65, 0x74,
	0x5f, 0x65, 0x78, 0x70, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x00, 0x52, 0x07,
	0x73, 0x65, 0x74, 0x45, 0x78, 0x70, 0x72, 0x12, 0x2e, 0x0a, 0x0a, 0x73, 0x65, 0x74, 0x5f, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x48, 0x00, 0x52, 0x09, 0x73, 0x65,
	0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x38, 0x0a, 0x0f, 0x73, 0x65, 0x74, 0x5f, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x48,
	0x00, 0x52, 0x0e, 0x73, 0x65, 0x74, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x34, 0x0a, 0x07, 0x73, 0x65, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x18, 0x33, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52,
	0x06, 0x73, 0x65, 0x74, 0x46, 0x6f, 0x72, 0x12, 0x4a, 0x0a, 0x13, 0x73, 0x65, 0x74, 0x5f, 0x6b,
	0x65, 0x65, 0x70, 0x5f, 0x66, 0x69, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x6f, 0x72, 0x18, 0x34,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48,
	0x00, 0x52, 0x10, 0x73, 0x65, 0x74, 0x4b, 0x65, 0x65, 0x70, 0x46, 0x69, 0x72, 0x69, 0x6e, 0x67,
	0x46, 0x6f, 0x72, 0x42, 0x04, 0x0a, 0x02, 0x64, 0x6f, 0x22, 0x4d, 0x0a, 0x17, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x0a, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x5f, 0x72, 0x75,
	0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x09, 0x61,
	0x6c, 0x65, 0x72, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x22, 0x4f, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x65, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x65, 0x6e, 0x76, 0x69,
	0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x19, 0x0a, 0x17, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x7d, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x6c, 0x65, 0x72,
	0x74, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e,
	0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x65,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x06, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x66, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x75, 0x72, 0x73, 0x6f, 0x72, 0x52, 0x06, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x12, 0x14, 0x0a,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x67, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x22, 0xc2, 0x01, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x6c, 0x65, 0x72,
	0x74, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x24, 0x0a,
	0x04, 0x6e, 0x65, 0x78, 0x74, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x52, 0x04, 0x6e,
	0x65, 0x78, 0x74, 0x12, 0x43, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0xc8, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x75, 0x6c, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65,
	0x6d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x1a, 0x3e, 0x0a, 0x08, 0x4c, 0x69, 0x73, 0x74,
	0x49, 0x74, 0x65, 0x6d, 0x12, 0x32, 0x0a, 0x0a, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x5f, 0x72, 0x75,
	0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x09, 0x61,
	0x6c, 0x65, 0x72, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x32, 0xdf, 0x03, 0x0a, 0x0c, 0x41, 0x6c, 0x65,
	0x72, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x5e, 0x0a, 0x0f, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x24, 0x2e, 0x73,
	0x76, 0x63, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x25, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x75, 0x6c,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x55, 0x0a, 0x0c, 0x47, 0x65, 0x74,
	0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x21, 0x2e, 0x73, 0x76, 0x63, 0x2e,
	0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x65, 0x72,
	0x74, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x73,
	0x76, 0x63, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41,
	0x6c, 0x65, 0x72, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x5e, 0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52,
	0x75, 0x6c, 0x65, 0x12, 0x24, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x75,
	0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x73, 0x76, 0x63, 0x2e,
	0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41,
	0x6c, 0x65, 0x72, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x5e, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52,
	0x75, 0x6c, 0x65, 0x12, 0x24, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x75,
	0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x73, 0x76, 0x63, 0x2e,
	0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41,
	0x6c, 0x65, 0x72, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x58, 0x0a, 0x0d, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x75, 0x6c,
	0x65, 0x12, 0x22, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x61, 0x6c, 0x65, 0x72,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x75,
	0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0xa5, 0x01, 0x0a, 0x10, 0x63,
	0x6f, 0x6d, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x42,
	0x0c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a,
	0x31, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x68, 0x75, 0x6d, 0x61,
	0x6e, 0x6c, 0x6f, 0x67, 0x69, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x6f, 0x2f, 0x73, 0x76,
	0x63, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2f, 0x76, 0x31, 0x3b, 0x61, 0x6c, 0x65, 0x72, 0x74,
	0x76, 0x31, 0xa2, 0x02, 0x03, 0x53, 0x41, 0x58, 0xaa, 0x02, 0x0c, 0x53, 0x76, 0x63, 0x2e, 0x41,
	0x6c, 0x65, 0x72, 0x74, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x0c, 0x53, 0x76, 0x63, 0x5c, 0x41, 0x6c,
	0x65, 0x72, 0x74, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x18, 0x53, 0x76, 0x63, 0x5c, 0x41, 0x6c, 0x65,
	0x72, 0x74, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0xea, 0x02, 0x0e, 0x53, 0x76, 0x63, 0x3a, 0x3a, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x3a, 0x3a,
	0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_svc_alert_v1_service_proto_rawDescOnce sync.Once
	file_svc_alert_v1_service_proto_rawDescData []byte
)

func file_svc_alert_v1_service_proto_rawDescGZIP() []byte {
	file_svc_alert_v1_service_proto_rawDescOnce.Do(func() {
		file_svc_alert_v1_service_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_svc_alert_v1_service_proto_rawDesc), len(file_svc_alert_v1_service_proto_rawDesc)))
	})
	return file_svc_alert_v1_service_proto_rawDescData
}

var file_svc_alert_v1_service_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_svc_alert_v1_service_proto_goTypes = []any{
	(*CreateAlertRuleRequest)(nil),          // 0: svc.alert.v1.CreateAlertRuleRequest
	(*CreateAlertRuleResponse)(nil),         // 1: svc.alert.v1.CreateAlertRuleResponse
	(*GetAlertRuleRequest)(nil),             // 2: svc.alert.v1.GetAlertRuleRequest
	(*GetAlertRuleResponse)(nil),            // 3: svc.alert.v1.GetAlertRuleResponse
	(*UpdateAlertRuleRequest)(nil),          // 4: svc.alert.v1.UpdateAlertRuleRequest
	(*UpdateAlertRuleResponse)(nil),         // 5: svc.alert.v1.UpdateAlertRuleResponse
	(*DeleteAlertRuleRequest)(nil),          // 6: svc.alert.v1.DeleteAlertRuleRequest
	(*DeleteAlertRuleResponse)(nil),         // 7: svc.alert.v1.DeleteAlertRuleResponse
	(*ListAlertRuleRequest)(nil),            // 8: svc.alert.v1.ListAlertRuleRequest
	(*ListAlertRuleResponse)(nil),           // 9: svc.alert.v1.ListAlertRuleResponse
	(*UpdateAlertRuleRequest_Mutation)(nil), // 10: svc.alert.v1.UpdateAlertRuleRequest.Mutation
	(*ListAlertRuleResponse_ListItem)(nil),  // 11: svc.alert.v1.ListAlertRuleResponse.ListItem
	(*v1.Query)(nil),                        // 12: types.v1.Query
	(*v1.Obj)(nil),                          // 13: types.v1.Obj
	(*durationpb.Duration)(nil),             // 14: google.protobuf.Duration
	(*v1.AlertRule)(nil),                    // 15: types.v1.AlertRule
	(*v1.Cursor)(nil),                       // 16: types.v1.Cursor
}
var file_svc_alert_v1_service_proto_depIdxs = []int32{
	12, // 0: svc.alert.v1.CreateAlertRuleRequest.expr:type_name -> types.v1.Query
	13, // 1: svc.alert.v1.CreateAlertRuleRequest.labels:type_name -> types.v1.Obj
	13, // 2: svc.alert.v1.CreateAlertRuleRequest.annotations:type_name -> types.v1.Obj
	14, // 3: svc.alert.v1.CreateAlertRuleRequest.for:type_name -> google.protobuf.Duration
	14, // 4: svc.alert.v1.CreateAlertRuleRequest.keep_firing_for:type_name -> google.protobuf.Duration
	15, // 5: svc.alert.v1.CreateAlertRuleResponse.alert_rule:type_name -> types.v1.AlertRule
	15, // 6: svc.alert.v1.GetAlertRuleResponse.alert_rule:type_name -> types.v1.AlertRule
	10, // 7: svc.alert.v1.UpdateAlertRuleRequest.mutations:type_name -> svc.alert.v1.UpdateAlertRuleRequest.Mutation
	15, // 8: svc.alert.v1.UpdateAlertRuleResponse.alert_rule:type_name -> types.v1.AlertRule
	16, // 9: svc.alert.v1.ListAlertRuleRequest.cursor:type_name -> types.v1.Cursor
	16, // 10: svc.alert.v1.ListAlertRuleResponse.next:type_name -> types.v1.Cursor
	11, // 11: svc.alert.v1.ListAlertRuleResponse.items:type_name -> svc.alert.v1.ListAlertRuleResponse.ListItem
	12, // 12: svc.alert.v1.UpdateAlertRuleRequest.Mutation.set_expr:type_name -> types.v1.Query
	13, // 13: svc.alert.v1.UpdateAlertRuleRequest.Mutation.set_labels:type_name -> types.v1.Obj
	13, // 14: svc.alert.v1.UpdateAlertRuleRequest.Mutation.set_annotations:type_name -> types.v1.Obj
	14, // 15: svc.alert.v1.UpdateAlertRuleRequest.Mutation.set_for:type_name -> google.protobuf.Duration
	14, // 16: svc.alert.v1.UpdateAlertRuleRequest.Mutation.set_keep_firing_for:type_name -> google.protobuf.Duration
	15, // 17: svc.alert.v1.ListAlertRuleResponse.ListItem.alert_rule:type_name -> types.v1.AlertRule
	0,  // 18: svc.alert.v1.AlertService.CreateAlertRule:input_type -> svc.alert.v1.CreateAlertRuleRequest
	2,  // 19: svc.alert.v1.AlertService.GetAlertRule:input_type -> svc.alert.v1.GetAlertRuleRequest
	4,  // 20: svc.alert.v1.AlertService.UpdateAlertRule:input_type -> svc.alert.v1.UpdateAlertRuleRequest
	6,  // 21: svc.alert.v1.AlertService.DeleteAlertRule:input_type -> svc.alert.v1.DeleteAlertRuleRequest
	8,  // 22: svc.alert.v1.AlertService.ListAlertRule:input_type -> svc.alert.v1.ListAlertRuleRequest
	1,  // 23: svc.alert.v1.AlertService.CreateAlertRule:output_type -> svc.alert.v1.CreateAlertRuleResponse
	3,  // 24: svc.alert.v1.AlertService.GetAlertRule:output_type -> svc.alert.v1.GetAlertRuleResponse
	5,  // 25: svc.alert.v1.AlertService.UpdateAlertRule:output_type -> svc.alert.v1.UpdateAlertRuleResponse
	7,  // 26: svc.alert.v1.AlertService.DeleteAlertRule:output_type -> svc.alert.v1.DeleteAlertRuleResponse
	9,  // 27: svc.alert.v1.AlertService.ListAlertRule:output_type -> svc.alert.v1.ListAlertRuleResponse
	23, // [23:28] is the sub-list for method output_type
	18, // [18:23] is the sub-list for method input_type
	18, // [18:18] is the sub-list for extension type_name
	18, // [18:18] is the sub-list for extension extendee
	0,  // [0:18] is the sub-list for field type_name
}

func init() { file_svc_alert_v1_service_proto_init() }
func file_svc_alert_v1_service_proto_init() {
	if File_svc_alert_v1_service_proto != nil {
		return
	}
	file_svc_alert_v1_service_proto_msgTypes[10].OneofWrappers = []any{
		(*UpdateAlertRuleRequest_Mutation_SetName)(nil),
		(*UpdateAlertRuleRequest_Mutation_SetExpr)(nil),
		(*UpdateAlertRuleRequest_Mutation_SetLabels)(nil),
		(*UpdateAlertRuleRequest_Mutation_SetAnnotations)(nil),
		(*UpdateAlertRuleRequest_Mutation_SetFor)(nil),
		(*UpdateAlertRuleRequest_Mutation_SetKeepFiringFor)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_svc_alert_v1_service_proto_rawDesc), len(file_svc_alert_v1_service_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_svc_alert_v1_service_proto_goTypes,
		DependencyIndexes: file_svc_alert_v1_service_proto_depIdxs,
		MessageInfos:      file_svc_alert_v1_service_proto_msgTypes,
	}.Build()
	File_svc_alert_v1_service_proto = out.File
	file_svc_alert_v1_service_proto_goTypes = nil
	file_svc_alert_v1_service_proto_depIdxs = nil
}
