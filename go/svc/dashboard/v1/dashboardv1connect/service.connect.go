// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: svc/dashboard/v1/service.proto

package dashboardv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/humanlogio/api/go/svc/dashboard/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// DashboardServiceName is the fully-qualified name of the DashboardService service.
	DashboardServiceName = "svc.dashboard.v1.DashboardService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// DashboardServiceCreateDashboardProcedure is the fully-qualified name of the DashboardService's
	// CreateDashboard RPC.
	DashboardServiceCreateDashboardProcedure = "/svc.dashboard.v1.DashboardService/CreateDashboard"
	// DashboardServiceGetDashboardProcedure is the fully-qualified name of the DashboardService's
	// GetDashboard RPC.
	DashboardServiceGetDashboardProcedure = "/svc.dashboard.v1.DashboardService/GetDashboard"
	// DashboardServiceUpdateDashboardProcedure is the fully-qualified name of the DashboardService's
	// UpdateDashboard RPC.
	DashboardServiceUpdateDashboardProcedure = "/svc.dashboard.v1.DashboardService/UpdateDashboard"
	// DashboardServiceDeleteDashboardProcedure is the fully-qualified name of the DashboardService's
	// DeleteDashboard RPC.
	DashboardServiceDeleteDashboardProcedure = "/svc.dashboard.v1.DashboardService/DeleteDashboard"
	// DashboardServiceListDashboardProcedure is the fully-qualified name of the DashboardService's
	// ListDashboard RPC.
	DashboardServiceListDashboardProcedure = "/svc.dashboard.v1.DashboardService/ListDashboard"
)

// DashboardServiceClient is a client for the svc.dashboard.v1.DashboardService service.
type DashboardServiceClient interface {
	CreateDashboard(context.Context, *connect.Request[v1.CreateDashboardRequest]) (*connect.Response[v1.CreateDashboardResponse], error)
	GetDashboard(context.Context, *connect.Request[v1.GetDashboardRequest]) (*connect.Response[v1.GetDashboardResponse], error)
	UpdateDashboard(context.Context, *connect.Request[v1.UpdateDashboardRequest]) (*connect.Response[v1.UpdateDashboardResponse], error)
	DeleteDashboard(context.Context, *connect.Request[v1.DeleteDashboardRequest]) (*connect.Response[v1.DeleteDashboardResponse], error)
	ListDashboard(context.Context, *connect.Request[v1.ListDashboardRequest]) (*connect.Response[v1.ListDashboardResponse], error)
}

// NewDashboardServiceClient constructs a client for the svc.dashboard.v1.DashboardService service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewDashboardServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) DashboardServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	dashboardServiceMethods := v1.File_svc_dashboard_v1_service_proto.Services().ByName("DashboardService").Methods()
	return &dashboardServiceClient{
		createDashboard: connect.NewClient[v1.CreateDashboardRequest, v1.CreateDashboardResponse](
			httpClient,
			baseURL+DashboardServiceCreateDashboardProcedure,
			connect.WithSchema(dashboardServiceMethods.ByName("CreateDashboard")),
			connect.WithClientOptions(opts...),
		),
		getDashboard: connect.NewClient[v1.GetDashboardRequest, v1.GetDashboardResponse](
			httpClient,
			baseURL+DashboardServiceGetDashboardProcedure,
			connect.WithSchema(dashboardServiceMethods.ByName("GetDashboard")),
			connect.WithClientOptions(opts...),
		),
		updateDashboard: connect.NewClient[v1.UpdateDashboardRequest, v1.UpdateDashboardResponse](
			httpClient,
			baseURL+DashboardServiceUpdateDashboardProcedure,
			connect.WithSchema(dashboardServiceMethods.ByName("UpdateDashboard")),
			connect.WithClientOptions(opts...),
		),
		deleteDashboard: connect.NewClient[v1.DeleteDashboardRequest, v1.DeleteDashboardResponse](
			httpClient,
			baseURL+DashboardServiceDeleteDashboardProcedure,
			connect.WithSchema(dashboardServiceMethods.ByName("DeleteDashboard")),
			connect.WithClientOptions(opts...),
		),
		listDashboard: connect.NewClient[v1.ListDashboardRequest, v1.ListDashboardResponse](
			httpClient,
			baseURL+DashboardServiceListDashboardProcedure,
			connect.WithSchema(dashboardServiceMethods.ByName("ListDashboard")),
			connect.WithClientOptions(opts...),
		),
	}
}

// dashboardServiceClient implements DashboardServiceClient.
type dashboardServiceClient struct {
	createDashboard *connect.Client[v1.CreateDashboardRequest, v1.CreateDashboardResponse]
	getDashboard    *connect.Client[v1.GetDashboardRequest, v1.GetDashboardResponse]
	updateDashboard *connect.Client[v1.UpdateDashboardRequest, v1.UpdateDashboardResponse]
	deleteDashboard *connect.Client[v1.DeleteDashboardRequest, v1.DeleteDashboardResponse]
	listDashboard   *connect.Client[v1.ListDashboardRequest, v1.ListDashboardResponse]
}

// CreateDashboard calls svc.dashboard.v1.DashboardService.CreateDashboard.
func (c *dashboardServiceClient) CreateDashboard(ctx context.Context, req *connect.Request[v1.CreateDashboardRequest]) (*connect.Response[v1.CreateDashboardResponse], error) {
	return c.createDashboard.CallUnary(ctx, req)
}

// GetDashboard calls svc.dashboard.v1.DashboardService.GetDashboard.
func (c *dashboardServiceClient) GetDashboard(ctx context.Context, req *connect.Request[v1.GetDashboardRequest]) (*connect.Response[v1.GetDashboardResponse], error) {
	return c.getDashboard.CallUnary(ctx, req)
}

// UpdateDashboard calls svc.dashboard.v1.DashboardService.UpdateDashboard.
func (c *dashboardServiceClient) UpdateDashboard(ctx context.Context, req *connect.Request[v1.UpdateDashboardRequest]) (*connect.Response[v1.UpdateDashboardResponse], error) {
	return c.updateDashboard.CallUnary(ctx, req)
}

// DeleteDashboard calls svc.dashboard.v1.DashboardService.DeleteDashboard.
func (c *dashboardServiceClient) DeleteDashboard(ctx context.Context, req *connect.Request[v1.DeleteDashboardRequest]) (*connect.Response[v1.DeleteDashboardResponse], error) {
	return c.deleteDashboard.CallUnary(ctx, req)
}

// ListDashboard calls svc.dashboard.v1.DashboardService.ListDashboard.
func (c *dashboardServiceClient) ListDashboard(ctx context.Context, req *connect.Request[v1.ListDashboardRequest]) (*connect.Response[v1.ListDashboardResponse], error) {
	return c.listDashboard.CallUnary(ctx, req)
}

// DashboardServiceHandler is an implementation of the svc.dashboard.v1.DashboardService service.
type DashboardServiceHandler interface {
	CreateDashboard(context.Context, *connect.Request[v1.CreateDashboardRequest]) (*connect.Response[v1.CreateDashboardResponse], error)
	GetDashboard(context.Context, *connect.Request[v1.GetDashboardRequest]) (*connect.Response[v1.GetDashboardResponse], error)
	UpdateDashboard(context.Context, *connect.Request[v1.UpdateDashboardRequest]) (*connect.Response[v1.UpdateDashboardResponse], error)
	DeleteDashboard(context.Context, *connect.Request[v1.DeleteDashboardRequest]) (*connect.Response[v1.DeleteDashboardResponse], error)
	ListDashboard(context.Context, *connect.Request[v1.ListDashboardRequest]) (*connect.Response[v1.ListDashboardResponse], error)
}

// NewDashboardServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewDashboardServiceHandler(svc DashboardServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	dashboardServiceMethods := v1.File_svc_dashboard_v1_service_proto.Services().ByName("DashboardService").Methods()
	dashboardServiceCreateDashboardHandler := connect.NewUnaryHandler(
		DashboardServiceCreateDashboardProcedure,
		svc.CreateDashboard,
		connect.WithSchema(dashboardServiceMethods.ByName("CreateDashboard")),
		connect.WithHandlerOptions(opts...),
	)
	dashboardServiceGetDashboardHandler := connect.NewUnaryHandler(
		DashboardServiceGetDashboardProcedure,
		svc.GetDashboard,
		connect.WithSchema(dashboardServiceMethods.ByName("GetDashboard")),
		connect.WithHandlerOptions(opts...),
	)
	dashboardServiceUpdateDashboardHandler := connect.NewUnaryHandler(
		DashboardServiceUpdateDashboardProcedure,
		svc.UpdateDashboard,
		connect.WithSchema(dashboardServiceMethods.ByName("UpdateDashboard")),
		connect.WithHandlerOptions(opts...),
	)
	dashboardServiceDeleteDashboardHandler := connect.NewUnaryHandler(
		DashboardServiceDeleteDashboardProcedure,
		svc.DeleteDashboard,
		connect.WithSchema(dashboardServiceMethods.ByName("DeleteDashboard")),
		connect.WithHandlerOptions(opts...),
	)
	dashboardServiceListDashboardHandler := connect.NewUnaryHandler(
		DashboardServiceListDashboardProcedure,
		svc.ListDashboard,
		connect.WithSchema(dashboardServiceMethods.ByName("ListDashboard")),
		connect.WithHandlerOptions(opts...),
	)
	return "/svc.dashboard.v1.DashboardService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case DashboardServiceCreateDashboardProcedure:
			dashboardServiceCreateDashboardHandler.ServeHTTP(w, r)
		case DashboardServiceGetDashboardProcedure:
			dashboardServiceGetDashboardHandler.ServeHTTP(w, r)
		case DashboardServiceUpdateDashboardProcedure:
			dashboardServiceUpdateDashboardHandler.ServeHTTP(w, r)
		case DashboardServiceDeleteDashboardProcedure:
			dashboardServiceDeleteDashboardHandler.ServeHTTP(w, r)
		case DashboardServiceListDashboardProcedure:
			dashboardServiceListDashboardHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedDashboardServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedDashboardServiceHandler struct{}

func (UnimplementedDashboardServiceHandler) CreateDashboard(context.Context, *connect.Request[v1.CreateDashboardRequest]) (*connect.Response[v1.CreateDashboardResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("svc.dashboard.v1.DashboardService.CreateDashboard is not implemented"))
}

func (UnimplementedDashboardServiceHandler) GetDashboard(context.Context, *connect.Request[v1.GetDashboardRequest]) (*connect.Response[v1.GetDashboardResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("svc.dashboard.v1.DashboardService.GetDashboard is not implemented"))
}

func (UnimplementedDashboardServiceHandler) UpdateDashboard(context.Context, *connect.Request[v1.UpdateDashboardRequest]) (*connect.Response[v1.UpdateDashboardResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("svc.dashboard.v1.DashboardService.UpdateDashboard is not implemented"))
}

func (UnimplementedDashboardServiceHandler) DeleteDashboard(context.Context, *connect.Request[v1.DeleteDashboardRequest]) (*connect.Response[v1.DeleteDashboardResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("svc.dashboard.v1.DashboardService.DeleteDashboard is not implemented"))
}

func (UnimplementedDashboardServiceHandler) ListDashboard(context.Context, *connect.Request[v1.ListDashboardRequest]) (*connect.Response[v1.ListDashboardResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("svc.dashboard.v1.DashboardService.ListDashboard is not implemented"))
}
