// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        (unknown)
// source: svc/share/v1/service.proto

package sharev1

import (
	v1 "github.com/humanlogio/api/go/types/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ViewSharedResultRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ShareId       string                 `protobuf:"bytes,1,opt,name=share_id,json=shareId,proto3" json:"share_id,omitempty"`
	RandomPrefix  string                 `protobuf:"bytes,2,opt,name=random_prefix,json=randomPrefix,proto3" json:"random_prefix,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ViewSharedResultRequest) Reset() {
	*x = ViewSharedResultRequest{}
	mi := &file_svc_share_v1_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ViewSharedResultRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ViewSharedResultRequest) ProtoMessage() {}

func (x *ViewSharedResultRequest) ProtoReflect() protoreflect.Message {
	mi := &file_svc_share_v1_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ViewSharedResultRequest.ProtoReflect.Descriptor instead.
func (*ViewSharedResultRequest) Descriptor() ([]byte, []int) {
	return file_svc_share_v1_service_proto_rawDescGZIP(), []int{0}
}

func (x *ViewSharedResultRequest) GetShareId() string {
	if x != nil {
		return x.ShareId
	}
	return ""
}

func (x *ViewSharedResultRequest) GetRandomPrefix() string {
	if x != nil {
		return x.RandomPrefix
	}
	return ""
}

type ViewSharedResultResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SharedBy      *v1.User               `protobuf:"bytes,1,opt,name=shared_by,json=sharedBy,proto3" json:"shared_by,omitempty"`
	SharedResult  *v1.SharedResult       `protobuf:"bytes,2,opt,name=shared_result,json=sharedResult,proto3" json:"shared_result,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ViewSharedResultResponse) Reset() {
	*x = ViewSharedResultResponse{}
	mi := &file_svc_share_v1_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ViewSharedResultResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ViewSharedResultResponse) ProtoMessage() {}

func (x *ViewSharedResultResponse) ProtoReflect() protoreflect.Message {
	mi := &file_svc_share_v1_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ViewSharedResultResponse.ProtoReflect.Descriptor instead.
func (*ViewSharedResultResponse) Descriptor() ([]byte, []int) {
	return file_svc_share_v1_service_proto_rawDescGZIP(), []int{1}
}

func (x *ViewSharedResultResponse) GetSharedBy() *v1.User {
	if x != nil {
		return x.SharedBy
	}
	return nil
}

func (x *ViewSharedResultResponse) GetSharedResult() *v1.SharedResult {
	if x != nil {
		return x.SharedResult
	}
	return nil
}

type ListSharedResultRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SharedBy      *v1.User               `protobuf:"bytes,1,opt,name=shared_by,json=sharedBy,proto3" json:"shared_by,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListSharedResultRequest) Reset() {
	*x = ListSharedResultRequest{}
	mi := &file_svc_share_v1_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListSharedResultRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSharedResultRequest) ProtoMessage() {}

func (x *ListSharedResultRequest) ProtoReflect() protoreflect.Message {
	mi := &file_svc_share_v1_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSharedResultRequest.ProtoReflect.Descriptor instead.
func (*ListSharedResultRequest) Descriptor() ([]byte, []int) {
	return file_svc_share_v1_service_proto_rawDescGZIP(), []int{2}
}

func (x *ListSharedResultRequest) GetSharedBy() *v1.User {
	if x != nil {
		return x.SharedBy
	}
	return nil
}

type ListSharedResultResponse struct {
	state         protoimpl.MessageState               `protogen:"open.v1"`
	Next          *v1.Cursor                           `protobuf:"bytes,1,opt,name=next,proto3" json:"next,omitempty"`
	Items         []*ListSharedResultResponse_ListItem `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListSharedResultResponse) Reset() {
	*x = ListSharedResultResponse{}
	mi := &file_svc_share_v1_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListSharedResultResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSharedResultResponse) ProtoMessage() {}

func (x *ListSharedResultResponse) ProtoReflect() protoreflect.Message {
	mi := &file_svc_share_v1_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSharedResultResponse.ProtoReflect.Descriptor instead.
func (*ListSharedResultResponse) Descriptor() ([]byte, []int) {
	return file_svc_share_v1_service_proto_rawDescGZIP(), []int{3}
}

func (x *ListSharedResultResponse) GetNext() *v1.Cursor {
	if x != nil {
		return x.Next
	}
	return nil
}

func (x *ListSharedResultResponse) GetItems() []*ListSharedResultResponse_ListItem {
	if x != nil {
		return x.Items
	}
	return nil
}

type CreateUserSharedResultRequest struct {
	state         protoimpl.MessageState    `protogen:"open.v1"`
	Query         *v1.QueryHistoryEntry     `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	Result        *v1.Data                  `protobuf:"bytes,2,opt,name=result,proto3" json:"result,omitempty"`
	Visibility    v1.SharedResultVisibility `protobuf:"varint,3,opt,name=visibility,proto3,enum=types.v1.SharedResultVisibility" json:"visibility,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateUserSharedResultRequest) Reset() {
	*x = CreateUserSharedResultRequest{}
	mi := &file_svc_share_v1_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateUserSharedResultRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateUserSharedResultRequest) ProtoMessage() {}

func (x *CreateUserSharedResultRequest) ProtoReflect() protoreflect.Message {
	mi := &file_svc_share_v1_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateUserSharedResultRequest.ProtoReflect.Descriptor instead.
func (*CreateUserSharedResultRequest) Descriptor() ([]byte, []int) {
	return file_svc_share_v1_service_proto_rawDescGZIP(), []int{4}
}

func (x *CreateUserSharedResultRequest) GetQuery() *v1.QueryHistoryEntry {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *CreateUserSharedResultRequest) GetResult() *v1.Data {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *CreateUserSharedResultRequest) GetVisibility() v1.SharedResultVisibility {
	if x != nil {
		return x.Visibility
	}
	return v1.SharedResultVisibility(0)
}

type CreateUserSharedResultResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SharedResult  *v1.SharedResult       `protobuf:"bytes,1,opt,name=shared_result,json=sharedResult,proto3" json:"shared_result,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateUserSharedResultResponse) Reset() {
	*x = CreateUserSharedResultResponse{}
	mi := &file_svc_share_v1_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateUserSharedResultResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateUserSharedResultResponse) ProtoMessage() {}

func (x *CreateUserSharedResultResponse) ProtoReflect() protoreflect.Message {
	mi := &file_svc_share_v1_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateUserSharedResultResponse.ProtoReflect.Descriptor instead.
func (*CreateUserSharedResultResponse) Descriptor() ([]byte, []int) {
	return file_svc_share_v1_service_proto_rawDescGZIP(), []int{5}
}

func (x *CreateUserSharedResultResponse) GetSharedResult() *v1.SharedResult {
	if x != nil {
		return x.SharedResult
	}
	return nil
}

type GetUserSharedResultRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetUserSharedResultRequest) Reset() {
	*x = GetUserSharedResultRequest{}
	mi := &file_svc_share_v1_service_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetUserSharedResultRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserSharedResultRequest) ProtoMessage() {}

func (x *GetUserSharedResultRequest) ProtoReflect() protoreflect.Message {
	mi := &file_svc_share_v1_service_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserSharedResultRequest.ProtoReflect.Descriptor instead.
func (*GetUserSharedResultRequest) Descriptor() ([]byte, []int) {
	return file_svc_share_v1_service_proto_rawDescGZIP(), []int{6}
}

func (x *GetUserSharedResultRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type GetUserSharedResultResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SharedResult  *v1.SharedResult       `protobuf:"bytes,1,opt,name=shared_result,json=sharedResult,proto3" json:"shared_result,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetUserSharedResultResponse) Reset() {
	*x = GetUserSharedResultResponse{}
	mi := &file_svc_share_v1_service_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetUserSharedResultResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserSharedResultResponse) ProtoMessage() {}

func (x *GetUserSharedResultResponse) ProtoReflect() protoreflect.Message {
	mi := &file_svc_share_v1_service_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserSharedResultResponse.ProtoReflect.Descriptor instead.
func (*GetUserSharedResultResponse) Descriptor() ([]byte, []int) {
	return file_svc_share_v1_service_proto_rawDescGZIP(), []int{7}
}

func (x *GetUserSharedResultResponse) GetSharedResult() *v1.SharedResult {
	if x != nil {
		return x.SharedResult
	}
	return nil
}

type UpdateUserSharedResultRequest struct {
	state         protoimpl.MessageState    `protogen:"open.v1"`
	Id            int64                     `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Visibility    v1.SharedResultVisibility `protobuf:"varint,2,opt,name=visibility,proto3,enum=types.v1.SharedResultVisibility" json:"visibility,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateUserSharedResultRequest) Reset() {
	*x = UpdateUserSharedResultRequest{}
	mi := &file_svc_share_v1_service_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateUserSharedResultRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserSharedResultRequest) ProtoMessage() {}

func (x *UpdateUserSharedResultRequest) ProtoReflect() protoreflect.Message {
	mi := &file_svc_share_v1_service_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserSharedResultRequest.ProtoReflect.Descriptor instead.
func (*UpdateUserSharedResultRequest) Descriptor() ([]byte, []int) {
	return file_svc_share_v1_service_proto_rawDescGZIP(), []int{8}
}

func (x *UpdateUserSharedResultRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateUserSharedResultRequest) GetVisibility() v1.SharedResultVisibility {
	if x != nil {
		return x.Visibility
	}
	return v1.SharedResultVisibility(0)
}

type UpdateUserSharedResultResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SharedResult  *v1.SharedResult       `protobuf:"bytes,1,opt,name=shared_result,json=sharedResult,proto3" json:"shared_result,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateUserSharedResultResponse) Reset() {
	*x = UpdateUserSharedResultResponse{}
	mi := &file_svc_share_v1_service_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateUserSharedResultResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserSharedResultResponse) ProtoMessage() {}

func (x *UpdateUserSharedResultResponse) ProtoReflect() protoreflect.Message {
	mi := &file_svc_share_v1_service_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserSharedResultResponse.ProtoReflect.Descriptor instead.
func (*UpdateUserSharedResultResponse) Descriptor() ([]byte, []int) {
	return file_svc_share_v1_service_proto_rawDescGZIP(), []int{9}
}

func (x *UpdateUserSharedResultResponse) GetSharedResult() *v1.SharedResult {
	if x != nil {
		return x.SharedResult
	}
	return nil
}

type DeleteUserSharedResultRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteUserSharedResultRequest) Reset() {
	*x = DeleteUserSharedResultRequest{}
	mi := &file_svc_share_v1_service_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteUserSharedResultRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteUserSharedResultRequest) ProtoMessage() {}

func (x *DeleteUserSharedResultRequest) ProtoReflect() protoreflect.Message {
	mi := &file_svc_share_v1_service_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteUserSharedResultRequest.ProtoReflect.Descriptor instead.
func (*DeleteUserSharedResultRequest) Descriptor() ([]byte, []int) {
	return file_svc_share_v1_service_proto_rawDescGZIP(), []int{10}
}

func (x *DeleteUserSharedResultRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type DeleteUserSharedResultResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteUserSharedResultResponse) Reset() {
	*x = DeleteUserSharedResultResponse{}
	mi := &file_svc_share_v1_service_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteUserSharedResultResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteUserSharedResultResponse) ProtoMessage() {}

func (x *DeleteUserSharedResultResponse) ProtoReflect() protoreflect.Message {
	mi := &file_svc_share_v1_service_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteUserSharedResultResponse.ProtoReflect.Descriptor instead.
func (*DeleteUserSharedResultResponse) Descriptor() ([]byte, []int) {
	return file_svc_share_v1_service_proto_rawDescGZIP(), []int{11}
}

type ListUserSharedResultRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Cursor        *v1.Cursor             `protobuf:"bytes,1,opt,name=cursor,proto3" json:"cursor,omitempty"`
	Limit         int32                  `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListUserSharedResultRequest) Reset() {
	*x = ListUserSharedResultRequest{}
	mi := &file_svc_share_v1_service_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListUserSharedResultRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUserSharedResultRequest) ProtoMessage() {}

func (x *ListUserSharedResultRequest) ProtoReflect() protoreflect.Message {
	mi := &file_svc_share_v1_service_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUserSharedResultRequest.ProtoReflect.Descriptor instead.
func (*ListUserSharedResultRequest) Descriptor() ([]byte, []int) {
	return file_svc_share_v1_service_proto_rawDescGZIP(), []int{12}
}

func (x *ListUserSharedResultRequest) GetCursor() *v1.Cursor {
	if x != nil {
		return x.Cursor
	}
	return nil
}

func (x *ListUserSharedResultRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type ListUserSharedResultResponse struct {
	state         protoimpl.MessageState                   `protogen:"open.v1"`
	Next          *v1.Cursor                               `protobuf:"bytes,1,opt,name=next,proto3" json:"next,omitempty"`
	Items         []*ListUserSharedResultResponse_ListItem `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListUserSharedResultResponse) Reset() {
	*x = ListUserSharedResultResponse{}
	mi := &file_svc_share_v1_service_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListUserSharedResultResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUserSharedResultResponse) ProtoMessage() {}

func (x *ListUserSharedResultResponse) ProtoReflect() protoreflect.Message {
	mi := &file_svc_share_v1_service_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUserSharedResultResponse.ProtoReflect.Descriptor instead.
func (*ListUserSharedResultResponse) Descriptor() ([]byte, []int) {
	return file_svc_share_v1_service_proto_rawDescGZIP(), []int{13}
}

func (x *ListUserSharedResultResponse) GetNext() *v1.Cursor {
	if x != nil {
		return x.Next
	}
	return nil
}

func (x *ListUserSharedResultResponse) GetItems() []*ListUserSharedResultResponse_ListItem {
	if x != nil {
		return x.Items
	}
	return nil
}

type ListSharedResultResponse_ListItem struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SharedResult  *v1.SharedResult       `protobuf:"bytes,1,opt,name=shared_result,json=sharedResult,proto3" json:"shared_result,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListSharedResultResponse_ListItem) Reset() {
	*x = ListSharedResultResponse_ListItem{}
	mi := &file_svc_share_v1_service_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListSharedResultResponse_ListItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSharedResultResponse_ListItem) ProtoMessage() {}

func (x *ListSharedResultResponse_ListItem) ProtoReflect() protoreflect.Message {
	mi := &file_svc_share_v1_service_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSharedResultResponse_ListItem.ProtoReflect.Descriptor instead.
func (*ListSharedResultResponse_ListItem) Descriptor() ([]byte, []int) {
	return file_svc_share_v1_service_proto_rawDescGZIP(), []int{3, 0}
}

func (x *ListSharedResultResponse_ListItem) GetSharedResult() *v1.SharedResult {
	if x != nil {
		return x.SharedResult
	}
	return nil
}

type ListUserSharedResultResponse_ListItem struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SharedResult  *v1.SharedResult       `protobuf:"bytes,1,opt,name=shared_result,json=sharedResult,proto3" json:"shared_result,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListUserSharedResultResponse_ListItem) Reset() {
	*x = ListUserSharedResultResponse_ListItem{}
	mi := &file_svc_share_v1_service_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListUserSharedResultResponse_ListItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUserSharedResultResponse_ListItem) ProtoMessage() {}

func (x *ListUserSharedResultResponse_ListItem) ProtoReflect() protoreflect.Message {
	mi := &file_svc_share_v1_service_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUserSharedResultResponse_ListItem.ProtoReflect.Descriptor instead.
func (*ListUserSharedResultResponse_ListItem) Descriptor() ([]byte, []int) {
	return file_svc_share_v1_service_proto_rawDescGZIP(), []int{13, 0}
}

func (x *ListUserSharedResultResponse_ListItem) GetSharedResult() *v1.SharedResult {
	if x != nil {
		return x.SharedResult
	}
	return nil
}

var File_svc_share_v1_service_proto protoreflect.FileDescriptor

var file_svc_share_v1_service_proto_rawDesc = string([]byte{
	0x0a, 0x1a, 0x73, 0x76, 0x63, 0x2f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x73, 0x76,
	0x63, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x66, 0x61, 0x76,
	0x6f, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x6f, 0x63, 0x61,
	0x6c, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x17, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x6f, 0x67,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x22, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x73,
	0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x59, 0x0a, 0x17, 0x56, 0x69, 0x65, 0x77,
	0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x68, 0x61, 0x72, 0x65, 0x49, 0x64, 0x12, 0x23,
	0x0a, 0x0d, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x50, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x22, 0x84, 0x01, 0x0a, 0x18, 0x56, 0x69, 0x65, 0x77, 0x53, 0x68, 0x61, 0x72,
	0x65, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x2b, 0x0a, 0x09, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x52, 0x08, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x42, 0x79, 0x12, 0x3b, 0x0a,
	0x0d, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0c, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x46, 0x0a, 0x17, 0x4c, 0x69,
	0x73, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x09, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f,
	0x62, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x08, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x42, 0x79, 0x22, 0xd0, 0x01, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x24, 0x0a, 0x04, 0x6e, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x52,
	0x04, 0x6e, 0x65, 0x78, 0x74, 0x12, 0x45, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x1a, 0x47, 0x0a, 0x08,
	0x4c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x3b, 0x0a, 0x0d, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0c, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xbc, 0x01, 0x0a, 0x1d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x26, 0x0a, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x40, 0x0a, 0x0a, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x56, 0x69,
	0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0a, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x22, 0x5d, 0x0a, 0x1e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x0d, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0c, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x22, 0x2c, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x53, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69,
	0x64, 0x22, 0x5a, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x53, 0x68, 0x61, 0x72,
	0x65, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x3b, 0x0a, 0x0d, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52,
	0x0c, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x71, 0x0a,
	0x1d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x53, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40,
	0x0a, 0x0a, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x20, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x52, 0x0a, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x22, 0x5d, 0x0a, 0x1e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x53, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x3b, 0x0a, 0x0d, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x52, 0x0c, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22,
	0x2f, 0x0a, 0x1d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64,
	0x22, 0x20, 0x0a, 0x1e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x53, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x5d, 0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x53, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x28, 0x0a, 0x06, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x72,
	0x73, 0x6f, 0x72, 0x52, 0x06, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x22, 0xd8, 0x01, 0x0a, 0x1c, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x53, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x24, 0x0a, 0x04, 0x6e, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x72, 0x73,
	0x6f, 0x72, 0x52, 0x04, 0x6e, 0x65, 0x78, 0x74, 0x12, 0x49, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x53,
	0x68, 0x61, 0x72, 0x65, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x69, 0x74,
	0x65, 0x6d, 0x73, 0x1a, 0x47, 0x0a, 0x08, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x12,
	0x3b, 0x0a, 0x0d, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0c,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0xde, 0x01, 0x0a,
	0x12, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x53, 0x68, 0x61, 0x72, 0x65, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x63, 0x0a, 0x10, 0x56, 0x69, 0x65, 0x77, 0x53, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x25, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x53, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26,
	0x2e, 0x73, 0x76, 0x63, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x69,
	0x65, 0x77, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x63, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74,
	0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x25, 0x2e, 0x73,
	0x76, 0x63, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x32, 0xd6, 0x04,
	0x0a, 0x10, 0x55, 0x73, 0x65, 0x72, 0x53, 0x68, 0x61, 0x72, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x75, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x2b, 0x2e, 0x73,
	0x76, 0x63, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x73, 0x76, 0x63, 0x2e,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6c, 0x0a, 0x13, 0x47, 0x65, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x28, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x73, 0x76, 0x63,
	0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x75, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x2b, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x53, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c,
	0x2e, 0x73, 0x76, 0x63, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x75,
	0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x53, 0x68, 0x61, 0x72,
	0x65, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x2b, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x53,
	0x68, 0x61, 0x72, 0x65, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6f, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x29, 0x2e,
	0x73, 0x76, 0x63, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0xa5, 0x01, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x2e, 0x73,
	0x76, 0x63, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x42, 0x0c, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x31, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x68, 0x75, 0x6d, 0x61, 0x6e, 0x6c, 0x6f, 0x67,
	0x69, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x6f, 0x2f, 0x73, 0x76, 0x63, 0x2f, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x2f, 0x76, 0x31, 0x3b, 0x73, 0x68, 0x61, 0x72, 0x65, 0x76, 0x31, 0xa2, 0x02,
	0x03, 0x53, 0x53, 0x58, 0xaa, 0x02, 0x0c, 0x53, 0x76, 0x63, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65,
	0x2e, 0x56, 0x31, 0xca, 0x02, 0x0c, 0x53, 0x76, 0x63, 0x5c, 0x53, 0x68, 0x61, 0x72, 0x65, 0x5c,
	0x56, 0x31, 0xe2, 0x02, 0x18, 0x53, 0x76, 0x63, 0x5c, 0x53, 0x68, 0x61, 0x72, 0x65, 0x5c, 0x56,
	0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x0e,
	0x53, 0x76, 0x63, 0x3a, 0x3a, 0x53, 0x68, 0x61, 0x72, 0x65, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_svc_share_v1_service_proto_rawDescOnce sync.Once
	file_svc_share_v1_service_proto_rawDescData []byte
)

func file_svc_share_v1_service_proto_rawDescGZIP() []byte {
	file_svc_share_v1_service_proto_rawDescOnce.Do(func() {
		file_svc_share_v1_service_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_svc_share_v1_service_proto_rawDesc), len(file_svc_share_v1_service_proto_rawDesc)))
	})
	return file_svc_share_v1_service_proto_rawDescData
}

var file_svc_share_v1_service_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_svc_share_v1_service_proto_goTypes = []any{
	(*ViewSharedResultRequest)(nil),               // 0: svc.share.v1.ViewSharedResultRequest
	(*ViewSharedResultResponse)(nil),              // 1: svc.share.v1.ViewSharedResultResponse
	(*ListSharedResultRequest)(nil),               // 2: svc.share.v1.ListSharedResultRequest
	(*ListSharedResultResponse)(nil),              // 3: svc.share.v1.ListSharedResultResponse
	(*CreateUserSharedResultRequest)(nil),         // 4: svc.share.v1.CreateUserSharedResultRequest
	(*CreateUserSharedResultResponse)(nil),        // 5: svc.share.v1.CreateUserSharedResultResponse
	(*GetUserSharedResultRequest)(nil),            // 6: svc.share.v1.GetUserSharedResultRequest
	(*GetUserSharedResultResponse)(nil),           // 7: svc.share.v1.GetUserSharedResultResponse
	(*UpdateUserSharedResultRequest)(nil),         // 8: svc.share.v1.UpdateUserSharedResultRequest
	(*UpdateUserSharedResultResponse)(nil),        // 9: svc.share.v1.UpdateUserSharedResultResponse
	(*DeleteUserSharedResultRequest)(nil),         // 10: svc.share.v1.DeleteUserSharedResultRequest
	(*DeleteUserSharedResultResponse)(nil),        // 11: svc.share.v1.DeleteUserSharedResultResponse
	(*ListUserSharedResultRequest)(nil),           // 12: svc.share.v1.ListUserSharedResultRequest
	(*ListUserSharedResultResponse)(nil),          // 13: svc.share.v1.ListUserSharedResultResponse
	(*ListSharedResultResponse_ListItem)(nil),     // 14: svc.share.v1.ListSharedResultResponse.ListItem
	(*ListUserSharedResultResponse_ListItem)(nil), // 15: svc.share.v1.ListUserSharedResultResponse.ListItem
	(*v1.User)(nil),                               // 16: types.v1.User
	(*v1.SharedResult)(nil),                       // 17: types.v1.SharedResult
	(*v1.Cursor)(nil),                             // 18: types.v1.Cursor
	(*v1.QueryHistoryEntry)(nil),                  // 19: types.v1.QueryHistoryEntry
	(*v1.Data)(nil),                               // 20: types.v1.Data
	(v1.SharedResultVisibility)(0),                // 21: types.v1.SharedResultVisibility
}
var file_svc_share_v1_service_proto_depIdxs = []int32{
	16, // 0: svc.share.v1.ViewSharedResultResponse.shared_by:type_name -> types.v1.User
	17, // 1: svc.share.v1.ViewSharedResultResponse.shared_result:type_name -> types.v1.SharedResult
	16, // 2: svc.share.v1.ListSharedResultRequest.shared_by:type_name -> types.v1.User
	18, // 3: svc.share.v1.ListSharedResultResponse.next:type_name -> types.v1.Cursor
	14, // 4: svc.share.v1.ListSharedResultResponse.items:type_name -> svc.share.v1.ListSharedResultResponse.ListItem
	19, // 5: svc.share.v1.CreateUserSharedResultRequest.query:type_name -> types.v1.QueryHistoryEntry
	20, // 6: svc.share.v1.CreateUserSharedResultRequest.result:type_name -> types.v1.Data
	21, // 7: svc.share.v1.CreateUserSharedResultRequest.visibility:type_name -> types.v1.SharedResultVisibility
	17, // 8: svc.share.v1.CreateUserSharedResultResponse.shared_result:type_name -> types.v1.SharedResult
	17, // 9: svc.share.v1.GetUserSharedResultResponse.shared_result:type_name -> types.v1.SharedResult
	21, // 10: svc.share.v1.UpdateUserSharedResultRequest.visibility:type_name -> types.v1.SharedResultVisibility
	17, // 11: svc.share.v1.UpdateUserSharedResultResponse.shared_result:type_name -> types.v1.SharedResult
	18, // 12: svc.share.v1.ListUserSharedResultRequest.cursor:type_name -> types.v1.Cursor
	18, // 13: svc.share.v1.ListUserSharedResultResponse.next:type_name -> types.v1.Cursor
	15, // 14: svc.share.v1.ListUserSharedResultResponse.items:type_name -> svc.share.v1.ListUserSharedResultResponse.ListItem
	17, // 15: svc.share.v1.ListSharedResultResponse.ListItem.shared_result:type_name -> types.v1.SharedResult
	17, // 16: svc.share.v1.ListUserSharedResultResponse.ListItem.shared_result:type_name -> types.v1.SharedResult
	0,  // 17: svc.share.v1.PublicShareService.ViewSharedResult:input_type -> svc.share.v1.ViewSharedResultRequest
	2,  // 18: svc.share.v1.PublicShareService.ListSharedResult:input_type -> svc.share.v1.ListSharedResultRequest
	4,  // 19: svc.share.v1.UserShareService.CreateUserSharedResult:input_type -> svc.share.v1.CreateUserSharedResultRequest
	6,  // 20: svc.share.v1.UserShareService.GetUserSharedResult:input_type -> svc.share.v1.GetUserSharedResultRequest
	8,  // 21: svc.share.v1.UserShareService.UpdateUserSharedResult:input_type -> svc.share.v1.UpdateUserSharedResultRequest
	10, // 22: svc.share.v1.UserShareService.DeleteUserSharedResult:input_type -> svc.share.v1.DeleteUserSharedResultRequest
	12, // 23: svc.share.v1.UserShareService.ListUserSharedResult:input_type -> svc.share.v1.ListUserSharedResultRequest
	1,  // 24: svc.share.v1.PublicShareService.ViewSharedResult:output_type -> svc.share.v1.ViewSharedResultResponse
	3,  // 25: svc.share.v1.PublicShareService.ListSharedResult:output_type -> svc.share.v1.ListSharedResultResponse
	5,  // 26: svc.share.v1.UserShareService.CreateUserSharedResult:output_type -> svc.share.v1.CreateUserSharedResultResponse
	7,  // 27: svc.share.v1.UserShareService.GetUserSharedResult:output_type -> svc.share.v1.GetUserSharedResultResponse
	9,  // 28: svc.share.v1.UserShareService.UpdateUserSharedResult:output_type -> svc.share.v1.UpdateUserSharedResultResponse
	11, // 29: svc.share.v1.UserShareService.DeleteUserSharedResult:output_type -> svc.share.v1.DeleteUserSharedResultResponse
	13, // 30: svc.share.v1.UserShareService.ListUserSharedResult:output_type -> svc.share.v1.ListUserSharedResultResponse
	24, // [24:31] is the sub-list for method output_type
	17, // [17:24] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_svc_share_v1_service_proto_init() }
func file_svc_share_v1_service_proto_init() {
	if File_svc_share_v1_service_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_svc_share_v1_service_proto_rawDesc), len(file_svc_share_v1_service_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_svc_share_v1_service_proto_goTypes,
		DependencyIndexes: file_svc_share_v1_service_proto_depIdxs,
		MessageInfos:      file_svc_share_v1_service_proto_msgTypes,
	}.Build()
	File_svc_share_v1_service_proto = out.File
	file_svc_share_v1_service_proto_goTypes = nil
	file_svc_share_v1_service_proto_depIdxs = nil
}
