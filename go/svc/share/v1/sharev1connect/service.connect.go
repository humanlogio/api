// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: svc/share/v1/service.proto

package sharev1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/humanlogio/api/go/svc/share/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// PublicShareServiceName is the fully-qualified name of the PublicShareService service.
	PublicShareServiceName = "svc.share.v1.PublicShareService"
	// UserShareServiceName is the fully-qualified name of the UserShareService service.
	UserShareServiceName = "svc.share.v1.UserShareService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// PublicShareServiceViewSharedResultProcedure is the fully-qualified name of the
	// PublicShareService's ViewSharedResult RPC.
	PublicShareServiceViewSharedResultProcedure = "/svc.share.v1.PublicShareService/ViewSharedResult"
	// UserShareServiceCreateUserSharedResultProcedure is the fully-qualified name of the
	// UserShareService's CreateUserSharedResult RPC.
	UserShareServiceCreateUserSharedResultProcedure = "/svc.share.v1.UserShareService/CreateUserSharedResult"
	// UserShareServiceGetUserSharedResultProcedure is the fully-qualified name of the
	// UserShareService's GetUserSharedResult RPC.
	UserShareServiceGetUserSharedResultProcedure = "/svc.share.v1.UserShareService/GetUserSharedResult"
	// UserShareServiceUpdateUserSharedResultProcedure is the fully-qualified name of the
	// UserShareService's UpdateUserSharedResult RPC.
	UserShareServiceUpdateUserSharedResultProcedure = "/svc.share.v1.UserShareService/UpdateUserSharedResult"
	// UserShareServiceDeleteUserSharedResultProcedure is the fully-qualified name of the
	// UserShareService's DeleteUserSharedResult RPC.
	UserShareServiceDeleteUserSharedResultProcedure = "/svc.share.v1.UserShareService/DeleteUserSharedResult"
	// UserShareServiceListUserSharedResultProcedure is the fully-qualified name of the
	// UserShareService's ListUserSharedResult RPC.
	UserShareServiceListUserSharedResultProcedure = "/svc.share.v1.UserShareService/ListUserSharedResult"
)

// PublicShareServiceClient is a client for the svc.share.v1.PublicShareService service.
type PublicShareServiceClient interface {
	ViewSharedResult(context.Context, *connect.Request[v1.ViewSharedResultRequest]) (*connect.Response[v1.ViewSharedResultResponse], error)
}

// NewPublicShareServiceClient constructs a client for the svc.share.v1.PublicShareService service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewPublicShareServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) PublicShareServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	publicShareServiceMethods := v1.File_svc_share_v1_service_proto.Services().ByName("PublicShareService").Methods()
	return &publicShareServiceClient{
		viewSharedResult: connect.NewClient[v1.ViewSharedResultRequest, v1.ViewSharedResultResponse](
			httpClient,
			baseURL+PublicShareServiceViewSharedResultProcedure,
			connect.WithSchema(publicShareServiceMethods.ByName("ViewSharedResult")),
			connect.WithClientOptions(opts...),
		),
	}
}

// publicShareServiceClient implements PublicShareServiceClient.
type publicShareServiceClient struct {
	viewSharedResult *connect.Client[v1.ViewSharedResultRequest, v1.ViewSharedResultResponse]
}

// ViewSharedResult calls svc.share.v1.PublicShareService.ViewSharedResult.
func (c *publicShareServiceClient) ViewSharedResult(ctx context.Context, req *connect.Request[v1.ViewSharedResultRequest]) (*connect.Response[v1.ViewSharedResultResponse], error) {
	return c.viewSharedResult.CallUnary(ctx, req)
}

// PublicShareServiceHandler is an implementation of the svc.share.v1.PublicShareService service.
type PublicShareServiceHandler interface {
	ViewSharedResult(context.Context, *connect.Request[v1.ViewSharedResultRequest]) (*connect.Response[v1.ViewSharedResultResponse], error)
}

// NewPublicShareServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewPublicShareServiceHandler(svc PublicShareServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	publicShareServiceMethods := v1.File_svc_share_v1_service_proto.Services().ByName("PublicShareService").Methods()
	publicShareServiceViewSharedResultHandler := connect.NewUnaryHandler(
		PublicShareServiceViewSharedResultProcedure,
		svc.ViewSharedResult,
		connect.WithSchema(publicShareServiceMethods.ByName("ViewSharedResult")),
		connect.WithHandlerOptions(opts...),
	)
	return "/svc.share.v1.PublicShareService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case PublicShareServiceViewSharedResultProcedure:
			publicShareServiceViewSharedResultHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedPublicShareServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedPublicShareServiceHandler struct{}

func (UnimplementedPublicShareServiceHandler) ViewSharedResult(context.Context, *connect.Request[v1.ViewSharedResultRequest]) (*connect.Response[v1.ViewSharedResultResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("svc.share.v1.PublicShareService.ViewSharedResult is not implemented"))
}

// UserShareServiceClient is a client for the svc.share.v1.UserShareService service.
type UserShareServiceClient interface {
	CreateUserSharedResult(context.Context, *connect.Request[v1.CreateUserSharedResultRequest]) (*connect.Response[v1.CreateUserSharedResultResponse], error)
	GetUserSharedResult(context.Context, *connect.Request[v1.GetUserSharedResultRequest]) (*connect.Response[v1.GetUserSharedResultResponse], error)
	UpdateUserSharedResult(context.Context, *connect.Request[v1.UpdateUserSharedResultRequest]) (*connect.Response[v1.UpdateUserSharedResultResponse], error)
	DeleteUserSharedResult(context.Context, *connect.Request[v1.DeleteUserSharedResultRequest]) (*connect.Response[v1.DeleteUserSharedResultResponse], error)
	ListUserSharedResult(context.Context, *connect.Request[v1.ListUserSharedResultRequest]) (*connect.Response[v1.ListUserSharedResultResponse], error)
}

// NewUserShareServiceClient constructs a client for the svc.share.v1.UserShareService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewUserShareServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) UserShareServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	userShareServiceMethods := v1.File_svc_share_v1_service_proto.Services().ByName("UserShareService").Methods()
	return &userShareServiceClient{
		createUserSharedResult: connect.NewClient[v1.CreateUserSharedResultRequest, v1.CreateUserSharedResultResponse](
			httpClient,
			baseURL+UserShareServiceCreateUserSharedResultProcedure,
			connect.WithSchema(userShareServiceMethods.ByName("CreateUserSharedResult")),
			connect.WithClientOptions(opts...),
		),
		getUserSharedResult: connect.NewClient[v1.GetUserSharedResultRequest, v1.GetUserSharedResultResponse](
			httpClient,
			baseURL+UserShareServiceGetUserSharedResultProcedure,
			connect.WithSchema(userShareServiceMethods.ByName("GetUserSharedResult")),
			connect.WithClientOptions(opts...),
		),
		updateUserSharedResult: connect.NewClient[v1.UpdateUserSharedResultRequest, v1.UpdateUserSharedResultResponse](
			httpClient,
			baseURL+UserShareServiceUpdateUserSharedResultProcedure,
			connect.WithSchema(userShareServiceMethods.ByName("UpdateUserSharedResult")),
			connect.WithClientOptions(opts...),
		),
		deleteUserSharedResult: connect.NewClient[v1.DeleteUserSharedResultRequest, v1.DeleteUserSharedResultResponse](
			httpClient,
			baseURL+UserShareServiceDeleteUserSharedResultProcedure,
			connect.WithSchema(userShareServiceMethods.ByName("DeleteUserSharedResult")),
			connect.WithClientOptions(opts...),
		),
		listUserSharedResult: connect.NewClient[v1.ListUserSharedResultRequest, v1.ListUserSharedResultResponse](
			httpClient,
			baseURL+UserShareServiceListUserSharedResultProcedure,
			connect.WithSchema(userShareServiceMethods.ByName("ListUserSharedResult")),
			connect.WithClientOptions(opts...),
		),
	}
}

// userShareServiceClient implements UserShareServiceClient.
type userShareServiceClient struct {
	createUserSharedResult *connect.Client[v1.CreateUserSharedResultRequest, v1.CreateUserSharedResultResponse]
	getUserSharedResult    *connect.Client[v1.GetUserSharedResultRequest, v1.GetUserSharedResultResponse]
	updateUserSharedResult *connect.Client[v1.UpdateUserSharedResultRequest, v1.UpdateUserSharedResultResponse]
	deleteUserSharedResult *connect.Client[v1.DeleteUserSharedResultRequest, v1.DeleteUserSharedResultResponse]
	listUserSharedResult   *connect.Client[v1.ListUserSharedResultRequest, v1.ListUserSharedResultResponse]
}

// CreateUserSharedResult calls svc.share.v1.UserShareService.CreateUserSharedResult.
func (c *userShareServiceClient) CreateUserSharedResult(ctx context.Context, req *connect.Request[v1.CreateUserSharedResultRequest]) (*connect.Response[v1.CreateUserSharedResultResponse], error) {
	return c.createUserSharedResult.CallUnary(ctx, req)
}

// GetUserSharedResult calls svc.share.v1.UserShareService.GetUserSharedResult.
func (c *userShareServiceClient) GetUserSharedResult(ctx context.Context, req *connect.Request[v1.GetUserSharedResultRequest]) (*connect.Response[v1.GetUserSharedResultResponse], error) {
	return c.getUserSharedResult.CallUnary(ctx, req)
}

// UpdateUserSharedResult calls svc.share.v1.UserShareService.UpdateUserSharedResult.
func (c *userShareServiceClient) UpdateUserSharedResult(ctx context.Context, req *connect.Request[v1.UpdateUserSharedResultRequest]) (*connect.Response[v1.UpdateUserSharedResultResponse], error) {
	return c.updateUserSharedResult.CallUnary(ctx, req)
}

// DeleteUserSharedResult calls svc.share.v1.UserShareService.DeleteUserSharedResult.
func (c *userShareServiceClient) DeleteUserSharedResult(ctx context.Context, req *connect.Request[v1.DeleteUserSharedResultRequest]) (*connect.Response[v1.DeleteUserSharedResultResponse], error) {
	return c.deleteUserSharedResult.CallUnary(ctx, req)
}

// ListUserSharedResult calls svc.share.v1.UserShareService.ListUserSharedResult.
func (c *userShareServiceClient) ListUserSharedResult(ctx context.Context, req *connect.Request[v1.ListUserSharedResultRequest]) (*connect.Response[v1.ListUserSharedResultResponse], error) {
	return c.listUserSharedResult.CallUnary(ctx, req)
}

// UserShareServiceHandler is an implementation of the svc.share.v1.UserShareService service.
type UserShareServiceHandler interface {
	CreateUserSharedResult(context.Context, *connect.Request[v1.CreateUserSharedResultRequest]) (*connect.Response[v1.CreateUserSharedResultResponse], error)
	GetUserSharedResult(context.Context, *connect.Request[v1.GetUserSharedResultRequest]) (*connect.Response[v1.GetUserSharedResultResponse], error)
	UpdateUserSharedResult(context.Context, *connect.Request[v1.UpdateUserSharedResultRequest]) (*connect.Response[v1.UpdateUserSharedResultResponse], error)
	DeleteUserSharedResult(context.Context, *connect.Request[v1.DeleteUserSharedResultRequest]) (*connect.Response[v1.DeleteUserSharedResultResponse], error)
	ListUserSharedResult(context.Context, *connect.Request[v1.ListUserSharedResultRequest]) (*connect.Response[v1.ListUserSharedResultResponse], error)
}

// NewUserShareServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewUserShareServiceHandler(svc UserShareServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	userShareServiceMethods := v1.File_svc_share_v1_service_proto.Services().ByName("UserShareService").Methods()
	userShareServiceCreateUserSharedResultHandler := connect.NewUnaryHandler(
		UserShareServiceCreateUserSharedResultProcedure,
		svc.CreateUserSharedResult,
		connect.WithSchema(userShareServiceMethods.ByName("CreateUserSharedResult")),
		connect.WithHandlerOptions(opts...),
	)
	userShareServiceGetUserSharedResultHandler := connect.NewUnaryHandler(
		UserShareServiceGetUserSharedResultProcedure,
		svc.GetUserSharedResult,
		connect.WithSchema(userShareServiceMethods.ByName("GetUserSharedResult")),
		connect.WithHandlerOptions(opts...),
	)
	userShareServiceUpdateUserSharedResultHandler := connect.NewUnaryHandler(
		UserShareServiceUpdateUserSharedResultProcedure,
		svc.UpdateUserSharedResult,
		connect.WithSchema(userShareServiceMethods.ByName("UpdateUserSharedResult")),
		connect.WithHandlerOptions(opts...),
	)
	userShareServiceDeleteUserSharedResultHandler := connect.NewUnaryHandler(
		UserShareServiceDeleteUserSharedResultProcedure,
		svc.DeleteUserSharedResult,
		connect.WithSchema(userShareServiceMethods.ByName("DeleteUserSharedResult")),
		connect.WithHandlerOptions(opts...),
	)
	userShareServiceListUserSharedResultHandler := connect.NewUnaryHandler(
		UserShareServiceListUserSharedResultProcedure,
		svc.ListUserSharedResult,
		connect.WithSchema(userShareServiceMethods.ByName("ListUserSharedResult")),
		connect.WithHandlerOptions(opts...),
	)
	return "/svc.share.v1.UserShareService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case UserShareServiceCreateUserSharedResultProcedure:
			userShareServiceCreateUserSharedResultHandler.ServeHTTP(w, r)
		case UserShareServiceGetUserSharedResultProcedure:
			userShareServiceGetUserSharedResultHandler.ServeHTTP(w, r)
		case UserShareServiceUpdateUserSharedResultProcedure:
			userShareServiceUpdateUserSharedResultHandler.ServeHTTP(w, r)
		case UserShareServiceDeleteUserSharedResultProcedure:
			userShareServiceDeleteUserSharedResultHandler.ServeHTTP(w, r)
		case UserShareServiceListUserSharedResultProcedure:
			userShareServiceListUserSharedResultHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedUserShareServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedUserShareServiceHandler struct{}

func (UnimplementedUserShareServiceHandler) CreateUserSharedResult(context.Context, *connect.Request[v1.CreateUserSharedResultRequest]) (*connect.Response[v1.CreateUserSharedResultResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("svc.share.v1.UserShareService.CreateUserSharedResult is not implemented"))
}

func (UnimplementedUserShareServiceHandler) GetUserSharedResult(context.Context, *connect.Request[v1.GetUserSharedResultRequest]) (*connect.Response[v1.GetUserSharedResultResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("svc.share.v1.UserShareService.GetUserSharedResult is not implemented"))
}

func (UnimplementedUserShareServiceHandler) UpdateUserSharedResult(context.Context, *connect.Request[v1.UpdateUserSharedResultRequest]) (*connect.Response[v1.UpdateUserSharedResultResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("svc.share.v1.UserShareService.UpdateUserSharedResult is not implemented"))
}

func (UnimplementedUserShareServiceHandler) DeleteUserSharedResult(context.Context, *connect.Request[v1.DeleteUserSharedResultRequest]) (*connect.Response[v1.DeleteUserSharedResultResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("svc.share.v1.UserShareService.DeleteUserSharedResult is not implemented"))
}

func (UnimplementedUserShareServiceHandler) ListUserSharedResult(context.Context, *connect.Request[v1.ListUserSharedResultRequest]) (*connect.Response[v1.ListUserSharedResultResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("svc.share.v1.UserShareService.ListUserSharedResult is not implemented"))
}
