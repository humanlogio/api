// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: svc/stack/v1/service.proto

package stackv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/humanlogio/api/go/svc/stack/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// StackServiceName is the fully-qualified name of the StackService service.
	StackServiceName = "svc.stack.v1.StackService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// StackServiceCreateStackProcedure is the fully-qualified name of the StackService's CreateStack
	// RPC.
	StackServiceCreateStackProcedure = "/svc.stack.v1.StackService/CreateStack"
	// StackServiceGetStackProcedure is the fully-qualified name of the StackService's GetStack RPC.
	StackServiceGetStackProcedure = "/svc.stack.v1.StackService/GetStack"
	// StackServiceUpdateStackProcedure is the fully-qualified name of the StackService's UpdateStack
	// RPC.
	StackServiceUpdateStackProcedure = "/svc.stack.v1.StackService/UpdateStack"
	// StackServiceDeleteStackProcedure is the fully-qualified name of the StackService's DeleteStack
	// RPC.
	StackServiceDeleteStackProcedure = "/svc.stack.v1.StackService/DeleteStack"
	// StackServiceListStackProcedure is the fully-qualified name of the StackService's ListStack RPC.
	StackServiceListStackProcedure = "/svc.stack.v1.StackService/ListStack"
)

// StackServiceClient is a client for the svc.stack.v1.StackService service.
type StackServiceClient interface {
	CreateStack(context.Context, *connect.Request[v1.CreateStackRequest]) (*connect.Response[v1.CreateStackResponse], error)
	GetStack(context.Context, *connect.Request[v1.GetStackRequest]) (*connect.Response[v1.GetStackResponse], error)
	UpdateStack(context.Context, *connect.Request[v1.UpdateStackRequest]) (*connect.Response[v1.UpdateStackResponse], error)
	DeleteStack(context.Context, *connect.Request[v1.DeleteStackRequest]) (*connect.Response[v1.DeleteStackResponse], error)
	ListStack(context.Context, *connect.Request[v1.ListStackRequest]) (*connect.Response[v1.ListStackResponse], error)
}

// NewStackServiceClient constructs a client for the svc.stack.v1.StackService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewStackServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) StackServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	stackServiceMethods := v1.File_svc_stack_v1_service_proto.Services().ByName("StackService").Methods()
	return &stackServiceClient{
		createStack: connect.NewClient[v1.CreateStackRequest, v1.CreateStackResponse](
			httpClient,
			baseURL+StackServiceCreateStackProcedure,
			connect.WithSchema(stackServiceMethods.ByName("CreateStack")),
			connect.WithClientOptions(opts...),
		),
		getStack: connect.NewClient[v1.GetStackRequest, v1.GetStackResponse](
			httpClient,
			baseURL+StackServiceGetStackProcedure,
			connect.WithSchema(stackServiceMethods.ByName("GetStack")),
			connect.WithClientOptions(opts...),
		),
		updateStack: connect.NewClient[v1.UpdateStackRequest, v1.UpdateStackResponse](
			httpClient,
			baseURL+StackServiceUpdateStackProcedure,
			connect.WithSchema(stackServiceMethods.ByName("UpdateStack")),
			connect.WithClientOptions(opts...),
		),
		deleteStack: connect.NewClient[v1.DeleteStackRequest, v1.DeleteStackResponse](
			httpClient,
			baseURL+StackServiceDeleteStackProcedure,
			connect.WithSchema(stackServiceMethods.ByName("DeleteStack")),
			connect.WithClientOptions(opts...),
		),
		listStack: connect.NewClient[v1.ListStackRequest, v1.ListStackResponse](
			httpClient,
			baseURL+StackServiceListStackProcedure,
			connect.WithSchema(stackServiceMethods.ByName("ListStack")),
			connect.WithClientOptions(opts...),
		),
	}
}

// stackServiceClient implements StackServiceClient.
type stackServiceClient struct {
	createStack *connect.Client[v1.CreateStackRequest, v1.CreateStackResponse]
	getStack    *connect.Client[v1.GetStackRequest, v1.GetStackResponse]
	updateStack *connect.Client[v1.UpdateStackRequest, v1.UpdateStackResponse]
	deleteStack *connect.Client[v1.DeleteStackRequest, v1.DeleteStackResponse]
	listStack   *connect.Client[v1.ListStackRequest, v1.ListStackResponse]
}

// CreateStack calls svc.stack.v1.StackService.CreateStack.
func (c *stackServiceClient) CreateStack(ctx context.Context, req *connect.Request[v1.CreateStackRequest]) (*connect.Response[v1.CreateStackResponse], error) {
	return c.createStack.CallUnary(ctx, req)
}

// GetStack calls svc.stack.v1.StackService.GetStack.
func (c *stackServiceClient) GetStack(ctx context.Context, req *connect.Request[v1.GetStackRequest]) (*connect.Response[v1.GetStackResponse], error) {
	return c.getStack.CallUnary(ctx, req)
}

// UpdateStack calls svc.stack.v1.StackService.UpdateStack.
func (c *stackServiceClient) UpdateStack(ctx context.Context, req *connect.Request[v1.UpdateStackRequest]) (*connect.Response[v1.UpdateStackResponse], error) {
	return c.updateStack.CallUnary(ctx, req)
}

// DeleteStack calls svc.stack.v1.StackService.DeleteStack.
func (c *stackServiceClient) DeleteStack(ctx context.Context, req *connect.Request[v1.DeleteStackRequest]) (*connect.Response[v1.DeleteStackResponse], error) {
	return c.deleteStack.CallUnary(ctx, req)
}

// ListStack calls svc.stack.v1.StackService.ListStack.
func (c *stackServiceClient) ListStack(ctx context.Context, req *connect.Request[v1.ListStackRequest]) (*connect.Response[v1.ListStackResponse], error) {
	return c.listStack.CallUnary(ctx, req)
}

// StackServiceHandler is an implementation of the svc.stack.v1.StackService service.
type StackServiceHandler interface {
	CreateStack(context.Context, *connect.Request[v1.CreateStackRequest]) (*connect.Response[v1.CreateStackResponse], error)
	GetStack(context.Context, *connect.Request[v1.GetStackRequest]) (*connect.Response[v1.GetStackResponse], error)
	UpdateStack(context.Context, *connect.Request[v1.UpdateStackRequest]) (*connect.Response[v1.UpdateStackResponse], error)
	DeleteStack(context.Context, *connect.Request[v1.DeleteStackRequest]) (*connect.Response[v1.DeleteStackResponse], error)
	ListStack(context.Context, *connect.Request[v1.ListStackRequest]) (*connect.Response[v1.ListStackResponse], error)
}

// NewStackServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewStackServiceHandler(svc StackServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	stackServiceMethods := v1.File_svc_stack_v1_service_proto.Services().ByName("StackService").Methods()
	stackServiceCreateStackHandler := connect.NewUnaryHandler(
		StackServiceCreateStackProcedure,
		svc.CreateStack,
		connect.WithSchema(stackServiceMethods.ByName("CreateStack")),
		connect.WithHandlerOptions(opts...),
	)
	stackServiceGetStackHandler := connect.NewUnaryHandler(
		StackServiceGetStackProcedure,
		svc.GetStack,
		connect.WithSchema(stackServiceMethods.ByName("GetStack")),
		connect.WithHandlerOptions(opts...),
	)
	stackServiceUpdateStackHandler := connect.NewUnaryHandler(
		StackServiceUpdateStackProcedure,
		svc.UpdateStack,
		connect.WithSchema(stackServiceMethods.ByName("UpdateStack")),
		connect.WithHandlerOptions(opts...),
	)
	stackServiceDeleteStackHandler := connect.NewUnaryHandler(
		StackServiceDeleteStackProcedure,
		svc.DeleteStack,
		connect.WithSchema(stackServiceMethods.ByName("DeleteStack")),
		connect.WithHandlerOptions(opts...),
	)
	stackServiceListStackHandler := connect.NewUnaryHandler(
		StackServiceListStackProcedure,
		svc.ListStack,
		connect.WithSchema(stackServiceMethods.ByName("ListStack")),
		connect.WithHandlerOptions(opts...),
	)
	return "/svc.stack.v1.StackService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case StackServiceCreateStackProcedure:
			stackServiceCreateStackHandler.ServeHTTP(w, r)
		case StackServiceGetStackProcedure:
			stackServiceGetStackHandler.ServeHTTP(w, r)
		case StackServiceUpdateStackProcedure:
			stackServiceUpdateStackHandler.ServeHTTP(w, r)
		case StackServiceDeleteStackProcedure:
			stackServiceDeleteStackHandler.ServeHTTP(w, r)
		case StackServiceListStackProcedure:
			stackServiceListStackHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedStackServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedStackServiceHandler struct{}

func (UnimplementedStackServiceHandler) CreateStack(context.Context, *connect.Request[v1.CreateStackRequest]) (*connect.Response[v1.CreateStackResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("svc.stack.v1.StackService.CreateStack is not implemented"))
}

func (UnimplementedStackServiceHandler) GetStack(context.Context, *connect.Request[v1.GetStackRequest]) (*connect.Response[v1.GetStackResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("svc.stack.v1.StackService.GetStack is not implemented"))
}

func (UnimplementedStackServiceHandler) UpdateStack(context.Context, *connect.Request[v1.UpdateStackRequest]) (*connect.Response[v1.UpdateStackResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("svc.stack.v1.StackService.UpdateStack is not implemented"))
}

func (UnimplementedStackServiceHandler) DeleteStack(context.Context, *connect.Request[v1.DeleteStackRequest]) (*connect.Response[v1.DeleteStackResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("svc.stack.v1.StackService.DeleteStack is not implemented"))
}

func (UnimplementedStackServiceHandler) ListStack(context.Context, *connect.Request[v1.ListStackRequest]) (*connect.Response[v1.ListStackResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("svc.stack.v1.StackService.ListStack is not implemented"))
}
