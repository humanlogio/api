package logql

// Code generated by peg /Users/antoine/code/src/github.com/humanlogio/api/go/pkg/logql/grammar.peg DO NOT EDIT.

import (
	"fmt"
	"github.com/humanlogio/api/go/types/v1"
	"io"
	"os"
	"sort"
	"strconv"
	"strings"
	"time"
)

const endSymbol rune = 1114112

/* The rule types inferred from the grammar are below. */
type pegRule uint8

const (
	ruleUnknown pegRule = iota
	ruleGrammar
	ruleQueryContext
	ruleQueryContextItem
	ruleQueryFrom
	ruleQueryTo
	ruleQueryMachineContext
	ruleQuerySessionContext
	ruleStatements
	ruleStatement
	ruleRenderStatement
	ruleFilterOperator
	ruleSummarizeOperator
	ruleSummarizeParameters
	ruleSummarizeParameter
	ruleSummarizeByGroupExpressions
	ruleSummarizeByGroupExpression
	ruleProjectOperator
	ruleProjectArg
	ruleProjectAwayOperator
	ruleProjectAwayArg
	ruleProjectKeepOperator
	ruleProjectKeepArg
	ruleExtendOperator
	ruleExtendArg
	ruleCountOperator
	ruleDistinctOperator
	ruleSampleOperator
	ruleSearchOperator
	ruleSearchOperatorCaseSensitivity
	ruleSearchOperatorPredicate
	ruleSortOperator
	ruleSortOperatorArg
	ruleTakeOperator
	ruleTopOperator
	ruleRenderSplitOperator
	ruleRenderSplitByOperator
	ruleRenderSplitByOperatorArg
	ruleExpr
	ruleExpr1
	ruleExpr2
	ruleExpr3
	ruleExpr4
	ruleExpr5
	ruleLiteral
	ruleFuncCall
	ruleFuncName
	ruleFuncArgs
	ruleFuncArg
	ruleIdentifier
	ruleString
	ruleF64
	ruleI64
	ruleBool
	ruleReservedKeyword
	ruleArray
	ruleArrayItem
	ruleObject
	ruleObjectItem
	ruleObjectKey
	ruleDuration
	ruleTimestamp
	ruleDoubleQuoteStringChar
	ruleExponent
	ruleDigits
	ruleRFC3339Nano
	ruleRFC3339NanoDate
	ruleRFC3339NanoTime
	ruleRFC3339NanoTimezone
	ruleNumber
	ruleNOT
	ruleNEG
	ruleNUM_ADD
	ruleNUM_SUB
	ruleNUM_DIV
	ruleNUM_MUL
	ruleLOG_AND
	ruleLOG_OR
	ruleCMP_EQ
	ruleCMP_NOTEQ
	ruleCMP_GT
	ruleCMP_GTE
	ruleCMP_LT
	ruleCMP_LTE
	ruleSET_IN
	ruleSET_NOTIN
	rulePIPE
	ruleL_PARENS
	ruleR_PARENS
	ruleL_BRACKET
	ruleR_BRACKET
	ruleL_SQUIGGLY
	ruleR_SQUIGGLY
	ruleCOLON
	ruleCOMMA
	ruleSpace
	ruleMustSpace
	ruleWhitespace
	ruleEOL
	ruleEOF
	ruleAction0
	ruleAction1
	ruleAction2
	ruleAction3
	ruleAction4
	ruleAction5
	ruleAction6
	ruleAction7
	ruleAction8
	ruleAction9
	ruleAction10
	ruleAction11
	ruleAction12
	ruleAction13
	ruleAction14
	ruleAction15
	ruleAction16
	ruleAction17
	ruleAction18
	ruleAction19
	ruleAction20
	ruleAction21
	ruleAction22
	ruleAction23
	ruleAction24
	ruleAction25
	ruleAction26
	ruleAction27
	ruleAction28
	ruleAction29
	ruleAction30
	ruleAction31
	ruleAction32
	ruleAction33
	ruleAction34
	ruleAction35
	ruleAction36
	ruleAction37
	ruleAction38
	ruleAction39
	ruleAction40
	ruleAction41
	ruleAction42
	ruleAction43
	ruleAction44
	ruleAction45
	ruleAction46
	ruleAction47
	ruleAction48
	ruleAction49
	ruleAction50
	ruleAction51
	ruleAction52
	ruleAction53
	ruleAction54
	ruleAction55
	ruleAction56
	ruleAction57
	ruleAction58
	ruleAction59
	ruleAction60
	ruleAction61
	ruleAction62
	ruleAction63
	ruleAction64
	ruleAction65
	ruleAction66
	ruleAction67
	ruleAction68
	ruleAction69
	ruleAction70
	ruleAction71
	ruleAction72
	ruleAction73
	ruleAction74
	ruleAction75
	ruleAction76
	ruleAction77
	ruleAction78
	ruleAction79
	ruleAction80
	ruleAction81
	ruleAction82
	ruleAction83
	ruleAction84
	ruleAction85
	ruleAction86
	ruleAction87
	ruleAction88
	ruleAction89
	ruleAction90
	ruleAction91
	ruleAction92
	ruleAction93
	ruleAction94
	ruleAction95
	ruleAction96
	ruleAction97
	ruleAction98
	ruleAction99
	rulePegText
	ruleAction100
	ruleAction101
	ruleAction102
	ruleAction103
	ruleAction104
	ruleAction105
	ruleAction106
	ruleAction107
	ruleAction108
	ruleAction109
	ruleAction110
	ruleAction111
	ruleAction112
	ruleAction113
	ruleAction114
	ruleAction115
	ruleAction116
	ruleAction117
	ruleAction118
	ruleAction119
	ruleAction120
)

var rul3s = [...]string{
	"Unknown",
	"Grammar",
	"QueryContext",
	"QueryContextItem",
	"QueryFrom",
	"QueryTo",
	"QueryMachineContext",
	"QuerySessionContext",
	"Statements",
	"Statement",
	"RenderStatement",
	"FilterOperator",
	"SummarizeOperator",
	"SummarizeParameters",
	"SummarizeParameter",
	"SummarizeByGroupExpressions",
	"SummarizeByGroupExpression",
	"ProjectOperator",
	"ProjectArg",
	"ProjectAwayOperator",
	"ProjectAwayArg",
	"ProjectKeepOperator",
	"ProjectKeepArg",
	"ExtendOperator",
	"ExtendArg",
	"CountOperator",
	"DistinctOperator",
	"SampleOperator",
	"SearchOperator",
	"SearchOperatorCaseSensitivity",
	"SearchOperatorPredicate",
	"SortOperator",
	"SortOperatorArg",
	"TakeOperator",
	"TopOperator",
	"RenderSplitOperator",
	"RenderSplitByOperator",
	"RenderSplitByOperatorArg",
	"Expr",
	"Expr1",
	"Expr2",
	"Expr3",
	"Expr4",
	"Expr5",
	"Literal",
	"FuncCall",
	"FuncName",
	"FuncArgs",
	"FuncArg",
	"Identifier",
	"String",
	"F64",
	"I64",
	"Bool",
	"ReservedKeyword",
	"Array",
	"ArrayItem",
	"Object",
	"ObjectItem",
	"ObjectKey",
	"Duration",
	"Timestamp",
	"DoubleQuoteStringChar",
	"Exponent",
	"Digits",
	"RFC3339Nano",
	"RFC3339NanoDate",
	"RFC3339NanoTime",
	"RFC3339NanoTimezone",
	"Number",
	"NOT",
	"NEG",
	"NUM_ADD",
	"NUM_SUB",
	"NUM_DIV",
	"NUM_MUL",
	"LOG_AND",
	"LOG_OR",
	"CMP_EQ",
	"CMP_NOTEQ",
	"CMP_GT",
	"CMP_GTE",
	"CMP_LT",
	"CMP_LTE",
	"SET_IN",
	"SET_NOTIN",
	"PIPE",
	"L_PARENS",
	"R_PARENS",
	"L_BRACKET",
	"R_BRACKET",
	"L_SQUIGGLY",
	"R_SQUIGGLY",
	"COLON",
	"COMMA",
	"Space",
	"MustSpace",
	"Whitespace",
	"EOL",
	"EOF",
	"Action0",
	"Action1",
	"Action2",
	"Action3",
	"Action4",
	"Action5",
	"Action6",
	"Action7",
	"Action8",
	"Action9",
	"Action10",
	"Action11",
	"Action12",
	"Action13",
	"Action14",
	"Action15",
	"Action16",
	"Action17",
	"Action18",
	"Action19",
	"Action20",
	"Action21",
	"Action22",
	"Action23",
	"Action24",
	"Action25",
	"Action26",
	"Action27",
	"Action28",
	"Action29",
	"Action30",
	"Action31",
	"Action32",
	"Action33",
	"Action34",
	"Action35",
	"Action36",
	"Action37",
	"Action38",
	"Action39",
	"Action40",
	"Action41",
	"Action42",
	"Action43",
	"Action44",
	"Action45",
	"Action46",
	"Action47",
	"Action48",
	"Action49",
	"Action50",
	"Action51",
	"Action52",
	"Action53",
	"Action54",
	"Action55",
	"Action56",
	"Action57",
	"Action58",
	"Action59",
	"Action60",
	"Action61",
	"Action62",
	"Action63",
	"Action64",
	"Action65",
	"Action66",
	"Action67",
	"Action68",
	"Action69",
	"Action70",
	"Action71",
	"Action72",
	"Action73",
	"Action74",
	"Action75",
	"Action76",
	"Action77",
	"Action78",
	"Action79",
	"Action80",
	"Action81",
	"Action82",
	"Action83",
	"Action84",
	"Action85",
	"Action86",
	"Action87",
	"Action88",
	"Action89",
	"Action90",
	"Action91",
	"Action92",
	"Action93",
	"Action94",
	"Action95",
	"Action96",
	"Action97",
	"Action98",
	"Action99",
	"PegText",
	"Action100",
	"Action101",
	"Action102",
	"Action103",
	"Action104",
	"Action105",
	"Action106",
	"Action107",
	"Action108",
	"Action109",
	"Action110",
	"Action111",
	"Action112",
	"Action113",
	"Action114",
	"Action115",
	"Action116",
	"Action117",
	"Action118",
	"Action119",
	"Action120",
}

type token32 struct {
	pegRule
	begin, end uint32
}

func (t *token32) String() string {
	return fmt.Sprintf("\x1B[34m%v\x1B[m %v %v", rul3s[t.pegRule], t.begin, t.end)
}

type node32 struct {
	token32
	up, next *node32
}

func (node *node32) print(w io.Writer, pretty bool, buffer string) {
	var print func(node *node32, depth int)
	print = func(node *node32, depth int) {
		for node != nil {
			for c := 0; c < depth; c++ {
				fmt.Fprintf(w, " ")
			}
			rule := rul3s[node.pegRule]
			quote := strconv.Quote(string(([]rune(buffer)[node.begin:node.end])))
			if !pretty {
				fmt.Fprintf(w, "%v %v\n", rule, quote)
			} else {
				fmt.Fprintf(w, "\x1B[36m%v\x1B[m %v\n", rule, quote)
			}
			if node.up != nil {
				print(node.up, depth+1)
			}
			node = node.next
		}
	}
	print(node, 0)
}

func (node *node32) Print(w io.Writer, buffer string) {
	node.print(w, false, buffer)
}

func (node *node32) PrettyPrint(w io.Writer, buffer string) {
	node.print(w, true, buffer)
}

type tokens32 struct {
	tree []token32
}

func (t *tokens32) Trim(length uint32) {
	t.tree = t.tree[:length]
}

func (t *tokens32) Print() {
	for _, token := range t.tree {
		fmt.Println(token.String())
	}
}

func (t *tokens32) AST() *node32 {
	type element struct {
		node *node32
		down *element
	}
	tokens := t.Tokens()
	var stack *element
	for _, token := range tokens {
		if token.begin == token.end {
			continue
		}
		node := &node32{token32: token}
		for stack != nil && stack.node.begin >= token.begin && stack.node.end <= token.end {
			stack.node.next = node.up
			node.up = stack.node
			stack = stack.down
		}
		stack = &element{node: node, down: stack}
	}
	if stack != nil {
		return stack.node
	}
	return nil
}

func (t *tokens32) PrintSyntaxTree(buffer string) {
	t.AST().Print(os.Stdout, buffer)
}

func (t *tokens32) WriteSyntaxTree(w io.Writer, buffer string) {
	t.AST().Print(w, buffer)
}

func (t *tokens32) PrettyPrintSyntaxTree(buffer string) {
	t.AST().PrettyPrint(os.Stdout, buffer)
}

func (t *tokens32) Add(rule pegRule, begin, end, index uint32) {
	tree, i := t.tree, int(index)
	if i >= len(tree) {
		t.tree = append(tree, token32{pegRule: rule, begin: begin, end: end})
		return
	}
	tree[i] = token32{pegRule: rule, begin: begin, end: end}
}

func (t *tokens32) Tokens() []token32 {
	return t.tree
}

type logQL struct {

	// the query being built
	LogQuery *typesv1.LogQuery

	// stack for recursive generic structures
	Exprs []*typesv1.Expr

	// accumulate statements
	Stmts      []*typesv1.Statement
	RenderStmt *typesv1.RenderStatement

	// scratch space for table operators
	FilterOp      *typesv1.FilterOperator
	SummarizeOp   *typesv1.SummarizeOperator
	ProjectOp     *typesv1.ProjectOperator
	ProjectAwayOp *typesv1.ProjectAwayOperator
	ProjectKeepOp *typesv1.ProjectKeepOperator
	ExtendOp      *typesv1.ExtendOperator
	CountOp       *typesv1.CountOperator
	DistinctOp    *typesv1.DistinctOperator
	SampleOp      *typesv1.SampleOperator
	SearchOp      *typesv1.SearchOperator
	SortOp        *typesv1.SortOperator
	TakeOp        *typesv1.TakeOperator
	TopOp         *typesv1.TopOperator

	// scratch space for search predicates
	identifier string

	// scratch space for render statements
	SplitByOp *typesv1.SplitOperator

	// scratch space, not needed but `Literal` being a type is convenient
	Literal *typesv1.Val

	// scalars
	String    string
	F64       float64
	I64       int64
	Bool      bool
	Timestamp time.Time
	Duration  time.Duration

	// stack for non-expr recursive structures
	Arrs      [][]*typesv1.Val
	ObjsKVs   [][]*typesv1.KV
	FuncCalls []*typesv1.FuncCall

	// errors seen along the way
	err error

	Buffer string
	buffer []rune
	rules  [222]func() bool
	parse  func(rule ...int) error
	reset  func()
	Pretty bool
	tokens32
}

func (p *logQL) Parse(rule ...int) error {
	return p.parse(rule...)
}

func (p *logQL) Reset() {
	p.reset()
}

type textPosition struct {
	line, symbol int
}

type textPositionMap map[int]textPosition

func translatePositions(buffer []rune, positions []int) textPositionMap {
	length, translations, j, line, symbol := len(positions), make(textPositionMap, len(positions)), 0, 1, 0
	sort.Ints(positions)

search:
	for i, c := range buffer {
		if c == '\n' {
			line, symbol = line+1, 0
		} else {
			symbol++
		}
		if i == positions[j] {
			translations[positions[j]] = textPosition{line, symbol}
			for j++; j < length; j++ {
				if i != positions[j] {
					continue search
				}
			}
			break search
		}
	}

	return translations
}

type parseError struct {
	p   *logQL
	max token32
}

func (e *parseError) Error() string {
	tokens, err := []token32{e.max}, "\n"
	positions, p := make([]int, 2*len(tokens)), 0
	for _, token := range tokens {
		positions[p], p = int(token.begin), p+1
		positions[p], p = int(token.end), p+1
	}
	translations := translatePositions(e.p.buffer, positions)
	format := "parse error near %v (line %v symbol %v - line %v symbol %v):\n%v\n"
	if e.p.Pretty {
		format = "parse error near \x1B[34m%v\x1B[m (line %v symbol %v - line %v symbol %v):\n%v\n"
	}
	for _, token := range tokens {
		begin, end := int(token.begin), int(token.end)
		err += fmt.Sprintf(format,
			rul3s[token.pegRule],
			translations[begin].line, translations[begin].symbol,
			translations[end].line, translations[end].symbol,
			strconv.Quote(string(e.p.buffer[begin:end])))
	}

	return err
}

func (p *logQL) PrintSyntaxTree() {
	if p.Pretty {
		p.tokens32.PrettyPrintSyntaxTree(p.Buffer)
	} else {
		p.tokens32.PrintSyntaxTree(p.Buffer)
	}
}

func (p *logQL) WriteSyntaxTree(w io.Writer) {
	p.tokens32.WriteSyntaxTree(w, p.Buffer)
}

func (p *logQL) SprintSyntaxTree() string {
	var bldr strings.Builder
	p.WriteSyntaxTree(&bldr)
	return bldr.String()
}

func (p *logQL) Execute() {
	buffer, _buffer, text, begin, end := p.Buffer, p.buffer, "", 0, 0
	for _, token := range p.Tokens() {
		switch token.pegRule {

		case rulePegText:
			begin, end = int(token.begin), int(token.end)
			text = string(_buffer[begin:end])

		case ruleAction0:
			p.SetQuery(p.Stmts)
		case ruleAction1:
			p.SetQuery(p.Stmts)
		case ruleAction2:
			p.SetFrom(p.popExpr())
		case ruleAction3:
			p.SetTo(p.popExpr())
		case ruleAction4:
			p.SetContextMachine(typesv1.BinaryOp_CMP_EQ, p.popExpr())
		case ruleAction5:
			p.SetContextMachine(typesv1.BinaryOp_CMP_NOTEQ, p.popExpr())
		case ruleAction6:
			p.SetContextMachine(typesv1.BinaryOp_SET_IN, p.popExpr())
		case ruleAction7:
			p.SetContextMachine(typesv1.BinaryOp_SET_NOTIN, p.popExpr())
		case ruleAction8:
			p.SetContextSession(typesv1.BinaryOp_CMP_EQ, p.popExpr())
		case ruleAction9:
			p.SetContextSession(typesv1.BinaryOp_CMP_NOTEQ, p.popExpr())
		case ruleAction10:
			p.SetContextSession(typesv1.BinaryOp_SET_IN, p.popExpr())
		case ruleAction11:
			p.SetContextSession(typesv1.BinaryOp_SET_NOTIN, p.popExpr())
		case ruleAction12:
			p.addFilterStatement(p.FilterOp)
		case ruleAction13:
			p.addSummarizeStatement(p.SummarizeOp)
		case ruleAction14:
			p.addProjectStatement(p.ProjectOp)
		case ruleAction15:
			p.addProjectAwayStatement(p.ProjectAwayOp)
		case ruleAction16:
			p.addProjectKeepStatement(p.ProjectKeepOp)
		case ruleAction17:
			p.addExtendStatement(p.ExtendOp)
		case ruleAction18:
			p.addCountStatement(p.CountOp)
		case ruleAction19:
			p.addDistinctStatement(p.DistinctOp)
		case ruleAction20:
			p.addSampleStatement(p.SampleOp)
		case ruleAction21:
			p.addSearchStatement(p.SearchOp)
		case ruleAction22:
			p.addSortStatement(p.SortOp)
		case ruleAction23:
			p.addTakeStatement(p.TakeOp)
		case ruleAction24:
			p.addTopStatement(p.TopOp)
		case ruleAction25:
			p.setRenderSplitByStatement(p.SplitByOp)
		case ruleAction26:
			p.setFilterOp(p.popExpr())
		case ruleAction27:
			p.startSummarizeOp()
		case ruleAction28:
			p.startSummarizeParameterNamedFunc(text)
		case ruleAction29:
			p.endSummarizeParameterNamedFunc(p.popFunc())
		case ruleAction30:
			p.addSummarizeParameterUnnamedFunc(p.popFunc())
		case ruleAction31:
			p.startSummarizeByUnnamedGroupExpression(text)
		case ruleAction32:
			p.endSummarizeByUnnamedGroupExpression(p.popExpr())
		case ruleAction33:
			p.addSummarizeByUnnamedGroupExpression(p.popExpr())
		case ruleAction34:
			p.startProjectOp()
		case ruleAction35:
			p.startProjectOpArg(text)
		case ruleAction36:
			p.setProjectOpArgValue(p.popExpr())
		case ruleAction37:
			p.startProjectAwayOp()
		case ruleAction38:
			p.addProjectAwayOpArg(text)
		case ruleAction39:
			p.startProjectKeepOp()
		case ruleAction40:
			p.addProjectKeepOpArg(text)
		case ruleAction41:
			p.startExtendOp()
		case ruleAction42:
			p.setExtendOpArgColumnName(text)
		case ruleAction43:
			p.setExtendOpArgValue(p.popExpr())
		case ruleAction44:
			p.startCountOp()
		case ruleAction45:
			p.startDistinctOp()
		case ruleAction46:
			p.startSampleOp()
		case ruleAction47:
			p.setSampleOpCount(p.I64)
		case ruleAction48:
			p.startSearchOp()
		case ruleAction49:
			p.setSearchOpKindDefault()
		case ruleAction50:
			p.setSearchOpKindCaseInsensitive()
		case ruleAction51:
			p.setSearchOpKindCaseSensitive()
		case ruleAction52:
			p.setSearchOpPredicateLiteral(text)
		case ruleAction53:
			p.identifier = text
		case ruleAction54:
			p.setSearchOpPredicateFieldSearch(p.identifier, p.String)
		case ruleAction55:
			p.setSearchOpPredicateExactSearch(p.identifier, p.String)
		case ruleAction56:
			p.setSearchOpPredicateRegexSearch(p.identifier, p.String)
		case ruleAction57:
			p.startSortOp()
		case ruleAction58:
			p.startSortOpArg(text)
		case ruleAction59:
			p.setSortOpArgOrderAsc()
		case ruleAction60:
			p.setSortOpArgOrderDesc()
		case ruleAction61:
			p.startTakeOp()
		case ruleAction62:
			p.setTakeOpCount(p.I64)
		case ruleAction63:
			p.startTopOp()
		case ruleAction64:
			p.setTopOpCount(p.I64)
		case ruleAction65:
			p.setTopOpByColumnScalar(p.popExpr())
		case ruleAction66:
			p.setTopOpByColumnOrderAsc()
		case ruleAction67:
			p.setTopOpByColumnOrderDesc()
		case ruleAction68:
			p.startRenderSplitOp()
		case ruleAction69:
			p.addRenderSplitByOp(p.popExpr())
		case ruleAction70:
			rhs, lhs := p.popExpr(), p.popExpr()
			p.pushExpr(typesv1.ExprBinary(lhs, typesv1.BinaryOp_NUM_ADD, rhs))
		case ruleAction71:
			rhs, lhs := p.popExpr(), p.popExpr()
			p.pushExpr(typesv1.ExprBinary(lhs, typesv1.BinaryOp_NUM_SUB, rhs))
		case ruleAction72:
			rhs, lhs := p.popExpr(), p.popExpr()
			p.pushExpr(typesv1.ExprBinary(lhs, typesv1.BinaryOp_NUM_MUL, rhs))
		case ruleAction73:
			rhs, lhs := p.popExpr(), p.popExpr()
			p.pushExpr(typesv1.ExprBinary(lhs, typesv1.BinaryOp_NUM_DIV, rhs))
		case ruleAction74:
			rhs, lhs := p.popExpr(), p.popExpr()
			p.pushExpr(typesv1.ExprBinary(lhs, typesv1.BinaryOp_LOG_AND, rhs))
		case ruleAction75:
			rhs, lhs := p.popExpr(), p.popExpr()
			p.pushExpr(typesv1.ExprBinary(lhs, typesv1.BinaryOp_LOG_OR, rhs))
		case ruleAction76:
			rhs, lhs := p.popExpr(), p.popExpr()
			p.pushExpr(typesv1.ExprBinary(lhs, typesv1.BinaryOp_CMP_EQ, rhs))
		case ruleAction77:
			rhs, lhs := p.popExpr(), p.popExpr()
			p.pushExpr(typesv1.ExprBinary(lhs, typesv1.BinaryOp_CMP_NOTEQ, rhs))
		case ruleAction78:
			rhs, lhs := p.popExpr(), p.popExpr()
			p.pushExpr(typesv1.ExprBinary(lhs, typesv1.BinaryOp_CMP_GT, rhs))
		case ruleAction79:
			rhs, lhs := p.popExpr(), p.popExpr()
			p.pushExpr(typesv1.ExprBinary(lhs, typesv1.BinaryOp_CMP_GTE, rhs))
		case ruleAction80:
			rhs, lhs := p.popExpr(), p.popExpr()
			p.pushExpr(typesv1.ExprBinary(lhs, typesv1.BinaryOp_CMP_LT, rhs))
		case ruleAction81:
			rhs, lhs := p.popExpr(), p.popExpr()
			p.pushExpr(typesv1.ExprBinary(lhs, typesv1.BinaryOp_CMP_LTE, rhs))
		case ruleAction82:
			rhs, lhs := p.popExpr(), p.popExpr()
			p.pushExpr(typesv1.ExprBinary(lhs, typesv1.BinaryOp_SET_IN, rhs))
		case ruleAction83:
			rhs, lhs := p.popExpr(), p.popExpr()
			p.pushExpr(typesv1.ExprBinary(lhs, typesv1.BinaryOp_SET_NOTIN, rhs))
		case ruleAction84:
			index, x := p.popExpr(), p.popExpr()
			p.pushExpr(typesv1.ExprIndexor(x, index))
		case ruleAction85:
			p.pushExpr(typesv1.ExprUnary(typesv1.UnaryOp_NOT, typesv1.ExprLiteral(p.Literal)))
			p.Literal = nil
		case ruleAction86:
			arg := p.popExpr()
			p.pushExpr(typesv1.ExprUnary(typesv1.UnaryOp_NOT, arg))
		case ruleAction87:
			p.pushExpr(typesv1.ExprUnary(typesv1.UnaryOp_NEG, typesv1.ExprLiteral(p.Literal)))
			p.Literal = nil
		case ruleAction88:
			arg := p.popExpr()
			p.pushExpr(typesv1.ExprUnary(typesv1.UnaryOp_NEG, arg))
		case ruleAction89:
			p.pushExpr(typesv1.ExprLiteral(p.Literal))
			p.Literal = nil
		case ruleAction90:
			fn := p.popFunc()
			p.pushExpr(typesv1.ExprFuncCall(fn.Name, fn.Args...))
		case ruleAction91:
			p.Literal = typesv1.ValStr(p.String)
		case ruleAction92:
			p.Literal = typesv1.ValDuration(p.Duration)
		case ruleAction93:
			p.Literal = typesv1.ValTime(p.Timestamp)
		case ruleAction94:
			p.Literal = typesv1.ValF64(p.F64)
		case ruleAction95:
			p.Literal = typesv1.ValI64(p.I64)
		case ruleAction96:
			p.Literal = typesv1.ValBool(p.Bool)
		case ruleAction97:
			p.Literal = typesv1.ValArr(p.popArray()...)
		case ruleAction98:
			p.Literal = typesv1.ValObj(p.popObj()...)
		case ruleAction99:
			p.pushFunc()
		case ruleAction100:
			p.setFuncName(text)
		case ruleAction101:
			p.addFuncArg(p.popExpr())
		case ruleAction102:
			p.pushExpr(typesv1.ExprIdentifier(text))
		case ruleAction103:
			p.pushExpr(typesv1.ExprIdentifier(p.String))
		case ruleAction104:
			p.pushExpr(typesv1.ExprIdentifier(p.String))
		case ruleAction105:
			p.String = p.parseDoubleQuoteString(text)
		case ruleAction106:
			p.F64 = p.parseFloat64(text)
		case ruleAction107:
			p.F64 = p.parseFloat64(text)
		case ruleAction108:
			p.F64 = p.parseFloat64(text)
		case ruleAction109:
			p.I64 = 0
		case ruleAction110:
			p.I64 = p.parseInt64(text)
		case ruleAction111:
			p.Bool = true
		case ruleAction112:
			p.Bool = false
		case ruleAction113:
			p.pushArray()
		case ruleAction114:
			p.addArrItem(p.Literal)
			p.Literal = nil
		case ruleAction115:
			p.pushObj()
		case ruleAction116:
			p.closeObjItem(p.Literal)
			p.Literal = nil
		case ruleAction117:
			p.startObjItem(p.String)
		case ruleAction118:
			p.Duration = p.parseDurationF64(p.F64, text)
		case ruleAction119:
			p.Duration = p.parseDurationI64(p.I64, text)
		case ruleAction120:
			p.Timestamp = p.parseTime(time.RFC3339Nano, text)

		}
	}
	_, _, _, _, _ = buffer, _buffer, text, begin, end
}

func Pretty(pretty bool) func(*logQL) error {
	return func(p *logQL) error {
		p.Pretty = pretty
		return nil
	}
}

func Size(size int) func(*logQL) error {
	return func(p *logQL) error {
		p.tokens32 = tokens32{tree: make([]token32, 0, size)}
		return nil
	}
}
func (p *logQL) Init(options ...func(*logQL) error) error {
	var (
		max                  token32
		position, tokenIndex uint32
		buffer               []rune
	)
	for _, option := range options {
		err := option(p)
		if err != nil {
			return err
		}
	}
	p.reset = func() {
		max = token32{}
		position, tokenIndex = 0, 0

		p.buffer = []rune(p.Buffer)
		if len(p.buffer) == 0 || p.buffer[len(p.buffer)-1] != endSymbol {
			p.buffer = append(p.buffer, endSymbol)
		}
		buffer = p.buffer
	}
	p.reset()

	_rules := p.rules
	tree := p.tokens32
	p.parse = func(rule ...int) error {
		r := 1
		if len(rule) > 0 {
			r = rule[0]
		}
		matches := p.rules[r]()
		p.tokens32 = tree
		if matches {
			p.Trim(tokenIndex)
			return nil
		}
		return &parseError{p, max}
	}

	add := func(rule pegRule, begin uint32) {
		tree.Add(rule, begin, position, tokenIndex)
		tokenIndex++
		if begin != position && position > max.end {
			max = token32{rule, begin, position}
		}
	}

	matchDot := func() bool {
		if buffer[position] != endSymbol {
			position++
			return true
		}
		return false
	}

	/*matchChar := func(c byte) bool {
		if buffer[position] == c {
			position++
			return true
		}
		return false
	}*/

	/*matchRange := func(lower byte, upper byte) bool {
		if c := buffer[position]; c >= lower && c <= upper {
			position++
			return true
		}
		return false
	}*/

	_rules = [...]func() bool{
		nil,
		/* 0 Grammar <- <(Space ((Statements Action0) / ((QueryContext MustSpace)? Statements Action1) / QueryContext)? RenderStatement? EOF)> */
		func() bool {
			position0, tokenIndex0 := position, tokenIndex
			{
				position1 := position
				if !_rules[ruleSpace]() {
					goto l0
				}
				{
					position2, tokenIndex2 := position, tokenIndex
					{
						position4, tokenIndex4 := position, tokenIndex
						if !_rules[ruleStatements]() {
							goto l5
						}
						if !_rules[ruleAction0]() {
							goto l5
						}
						goto l4
					l5:
						position, tokenIndex = position4, tokenIndex4
						{
							position7, tokenIndex7 := position, tokenIndex
							if !_rules[ruleQueryContext]() {
								goto l7
							}
							if !_rules[ruleMustSpace]() {
								goto l7
							}
							goto l8
						l7:
							position, tokenIndex = position7, tokenIndex7
						}
					l8:
						if !_rules[ruleStatements]() {
							goto l6
						}
						if !_rules[ruleAction1]() {
							goto l6
						}
						goto l4
					l6:
						position, tokenIndex = position4, tokenIndex4
						if !_rules[ruleQueryContext]() {
							goto l2
						}
					}
				l4:
					goto l3
				l2:
					position, tokenIndex = position2, tokenIndex2
				}
			l3:
				{
					position9, tokenIndex9 := position, tokenIndex
					if !_rules[ruleRenderStatement]() {
						goto l9
					}
					goto l10
				l9:
					position, tokenIndex = position9, tokenIndex9
				}
			l10:
				if !_rules[ruleEOF]() {
					goto l0
				}
				add(ruleGrammar, position1)
			}
			return true
		l0:
			position, tokenIndex = position0, tokenIndex0
			return false
		},
		/* 1 QueryContext <- <(L_SQUIGGLY Space QueryContextItem+ R_SQUIGGLY)> */
		func() bool {
			position11, tokenIndex11 := position, tokenIndex
			{
				position12 := position
				if !_rules[ruleL_SQUIGGLY]() {
					goto l11
				}
				if !_rules[ruleSpace]() {
					goto l11
				}
				if !_rules[ruleQueryContextItem]() {
					goto l11
				}
			l13:
				{
					position14, tokenIndex14 := position, tokenIndex
					if !_rules[ruleQueryContextItem]() {
						goto l14
					}
					goto l13
				l14:
					position, tokenIndex = position14, tokenIndex14
				}
				if !_rules[ruleR_SQUIGGLY]() {
					goto l11
				}
				add(ruleQueryContext, position12)
			}
			return true
		l11:
			position, tokenIndex = position11, tokenIndex11
			return false
		},
		/* 2 QueryContextItem <- <((QueryMachineContext / QuerySessionContext / QueryFrom / QueryTo) Space)> */
		func() bool {
			position15, tokenIndex15 := position, tokenIndex
			{
				position16 := position
				{
					position17, tokenIndex17 := position, tokenIndex
					if !_rules[ruleQueryMachineContext]() {
						goto l18
					}
					goto l17
				l18:
					position, tokenIndex = position17, tokenIndex17
					if !_rules[ruleQuerySessionContext]() {
						goto l19
					}
					goto l17
				l19:
					position, tokenIndex = position17, tokenIndex17
					if !_rules[ruleQueryFrom]() {
						goto l20
					}
					goto l17
				l20:
					position, tokenIndex = position17, tokenIndex17
					if !_rules[ruleQueryTo]() {
						goto l15
					}
				}
			l17:
				if !_rules[ruleSpace]() {
					goto l15
				}
				add(ruleQueryContextItem, position16)
			}
			return true
		l15:
			position, tokenIndex = position15, tokenIndex15
			return false
		},
		/* 3 QueryFrom <- <('f' 'r' 'o' 'm' Space CMP_EQ Space Expr Action2)> */
		func() bool {
			position21, tokenIndex21 := position, tokenIndex
			{
				position22 := position
				if buffer[position] != rune('f') {
					goto l21
				}
				position++
				if buffer[position] != rune('r') {
					goto l21
				}
				position++
				if buffer[position] != rune('o') {
					goto l21
				}
				position++
				if buffer[position] != rune('m') {
					goto l21
				}
				position++
				if !_rules[ruleSpace]() {
					goto l21
				}
				if !_rules[ruleCMP_EQ]() {
					goto l21
				}
				if !_rules[ruleSpace]() {
					goto l21
				}
				if !_rules[ruleExpr]() {
					goto l21
				}
				if !_rules[ruleAction2]() {
					goto l21
				}
				add(ruleQueryFrom, position22)
			}
			return true
		l21:
			position, tokenIndex = position21, tokenIndex21
			return false
		},
		/* 4 QueryTo <- <('t' 'o' Space CMP_EQ Space Expr Action3)> */
		func() bool {
			position23, tokenIndex23 := position, tokenIndex
			{
				position24 := position
				if buffer[position] != rune('t') {
					goto l23
				}
				position++
				if buffer[position] != rune('o') {
					goto l23
				}
				position++
				if !_rules[ruleSpace]() {
					goto l23
				}
				if !_rules[ruleCMP_EQ]() {
					goto l23
				}
				if !_rules[ruleSpace]() {
					goto l23
				}
				if !_rules[ruleExpr]() {
					goto l23
				}
				if !_rules[ruleAction3]() {
					goto l23
				}
				add(ruleQueryTo, position24)
			}
			return true
		l23:
			position, tokenIndex = position23, tokenIndex23
			return false
		},
		/* 5 QueryMachineContext <- <('m' 'a' 'c' 'h' 'i' 'n' 'e' Space ((CMP_EQ Space Expr Action4) / (CMP_NOTEQ Space Expr Action5) / (SET_IN Space Expr Action6) / (SET_NOTIN Space Expr Action7)))> */
		func() bool {
			position25, tokenIndex25 := position, tokenIndex
			{
				position26 := position
				if buffer[position] != rune('m') {
					goto l25
				}
				position++
				if buffer[position] != rune('a') {
					goto l25
				}
				position++
				if buffer[position] != rune('c') {
					goto l25
				}
				position++
				if buffer[position] != rune('h') {
					goto l25
				}
				position++
				if buffer[position] != rune('i') {
					goto l25
				}
				position++
				if buffer[position] != rune('n') {
					goto l25
				}
				position++
				if buffer[position] != rune('e') {
					goto l25
				}
				position++
				if !_rules[ruleSpace]() {
					goto l25
				}
				{
					position27, tokenIndex27 := position, tokenIndex
					if !_rules[ruleCMP_EQ]() {
						goto l28
					}
					if !_rules[ruleSpace]() {
						goto l28
					}
					if !_rules[ruleExpr]() {
						goto l28
					}
					if !_rules[ruleAction4]() {
						goto l28
					}
					goto l27
				l28:
					position, tokenIndex = position27, tokenIndex27
					if !_rules[ruleCMP_NOTEQ]() {
						goto l29
					}
					if !_rules[ruleSpace]() {
						goto l29
					}
					if !_rules[ruleExpr]() {
						goto l29
					}
					if !_rules[ruleAction5]() {
						goto l29
					}
					goto l27
				l29:
					position, tokenIndex = position27, tokenIndex27
					if !_rules[ruleSET_IN]() {
						goto l30
					}
					if !_rules[ruleSpace]() {
						goto l30
					}
					if !_rules[ruleExpr]() {
						goto l30
					}
					if !_rules[ruleAction6]() {
						goto l30
					}
					goto l27
				l30:
					position, tokenIndex = position27, tokenIndex27
					if !_rules[ruleSET_NOTIN]() {
						goto l25
					}
					if !_rules[ruleSpace]() {
						goto l25
					}
					if !_rules[ruleExpr]() {
						goto l25
					}
					if !_rules[ruleAction7]() {
						goto l25
					}
				}
			l27:
				add(ruleQueryMachineContext, position26)
			}
			return true
		l25:
			position, tokenIndex = position25, tokenIndex25
			return false
		},
		/* 6 QuerySessionContext <- <('s' 'e' 's' 's' 'i' 'o' 'n' Space ((CMP_EQ Space Expr Action8) / (CMP_NOTEQ Space Expr Action9) / (SET_IN Space Expr Action10) / (SET_NOTIN Space Expr Action11)))> */
		func() bool {
			position31, tokenIndex31 := position, tokenIndex
			{
				position32 := position
				if buffer[position] != rune('s') {
					goto l31
				}
				position++
				if buffer[position] != rune('e') {
					goto l31
				}
				position++
				if buffer[position] != rune('s') {
					goto l31
				}
				position++
				if buffer[position] != rune('s') {
					goto l31
				}
				position++
				if buffer[position] != rune('i') {
					goto l31
				}
				position++
				if buffer[position] != rune('o') {
					goto l31
				}
				position++
				if buffer[position] != rune('n') {
					goto l31
				}
				position++
				if !_rules[ruleSpace]() {
					goto l31
				}
				{
					position33, tokenIndex33 := position, tokenIndex
					if !_rules[ruleCMP_EQ]() {
						goto l34
					}
					if !_rules[ruleSpace]() {
						goto l34
					}
					if !_rules[ruleExpr]() {
						goto l34
					}
					if !_rules[ruleAction8]() {
						goto l34
					}
					goto l33
				l34:
					position, tokenIndex = position33, tokenIndex33
					if !_rules[ruleCMP_NOTEQ]() {
						goto l35
					}
					if !_rules[ruleSpace]() {
						goto l35
					}
					if !_rules[ruleExpr]() {
						goto l35
					}
					if !_rules[ruleAction9]() {
						goto l35
					}
					goto l33
				l35:
					position, tokenIndex = position33, tokenIndex33
					if !_rules[ruleSET_IN]() {
						goto l36
					}
					if !_rules[ruleSpace]() {
						goto l36
					}
					if !_rules[ruleExpr]() {
						goto l36
					}
					if !_rules[ruleAction10]() {
						goto l36
					}
					goto l33
				l36:
					position, tokenIndex = position33, tokenIndex33
					if !_rules[ruleSET_NOTIN]() {
						goto l31
					}
					if !_rules[ruleSpace]() {
						goto l31
					}
					if !_rules[ruleExpr]() {
						goto l31
					}
					if !_rules[ruleAction11]() {
						goto l31
					}
				}
			l33:
				add(ruleQuerySessionContext, position32)
			}
			return true
		l31:
			position, tokenIndex = position31, tokenIndex31
			return false
		},
		/* 7 Statements <- <(Statement (Space PIPE Space Statement)*)> */
		func() bool {
			position37, tokenIndex37 := position, tokenIndex
			{
				position38 := position
				if !_rules[ruleStatement]() {
					goto l37
				}
			l39:
				{
					position40, tokenIndex40 := position, tokenIndex
					if !_rules[ruleSpace]() {
						goto l40
					}
					if !_rules[rulePIPE]() {
						goto l40
					}
					if !_rules[ruleSpace]() {
						goto l40
					}
					if !_rules[ruleStatement]() {
						goto l40
					}
					goto l39
				l40:
					position, tokenIndex = position40, tokenIndex40
				}
				add(ruleStatements, position38)
			}
			return true
		l37:
			position, tokenIndex = position37, tokenIndex37
			return false
		},
		/* 8 Statement <- <(((('f' 'i' 'l' 't' 'e' 'r') / ('w' 'h' 'e' 'r' 'e')) FilterOperator Action12) / ('s' 'u' 'm' 'm' 'a' 'r' 'i' 'z' 'e' SummarizeOperator Action13) / ('p' 'r' 'o' 'j' 'e' 'c' 't' ProjectOperator Action14) / ('p' 'r' 'o' 'j' 'e' 'c' 't' '-' 'a' 'w' 'a' 'y' ProjectAwayOperator Action15) / ('p' 'r' 'o' 'j' 'e' 'c' 't' '-' 'k' 'e' 'e' 'p' ProjectKeepOperator Action16) / ('e' 'x' 't' 'e' 'n' 'd' ExtendOperator Action17) / ('c' 'o' 'u' 'n' 't' CountOperator Action18) / ('d' 'i' 's' 't' 'i' 'n' 'c' 't' DistinctOperator Action19) / ('s' 'a' 'm' 'p' 'l' 'e' SampleOperator Action20) / ('s' 'e' 'a' 'r' 'c' 'h' SearchOperator Action21) / ('s' 'o' 'r' 't' SortOperator Action22) / ('t' 'a' 'k' 'e' TakeOperator Action23) / ('t' 'o' 'p' TopOperator Action24))> */
		func() bool {
			position41, tokenIndex41 := position, tokenIndex
			{
				position42 := position
				{
					position43, tokenIndex43 := position, tokenIndex
					{
						position45, tokenIndex45 := position, tokenIndex
						if buffer[position] != rune('f') {
							goto l46
						}
						position++
						if buffer[position] != rune('i') {
							goto l46
						}
						position++
						if buffer[position] != rune('l') {
							goto l46
						}
						position++
						if buffer[position] != rune('t') {
							goto l46
						}
						position++
						if buffer[position] != rune('e') {
							goto l46
						}
						position++
						if buffer[position] != rune('r') {
							goto l46
						}
						position++
						goto l45
					l46:
						position, tokenIndex = position45, tokenIndex45
						if buffer[position] != rune('w') {
							goto l44
						}
						position++
						if buffer[position] != rune('h') {
							goto l44
						}
						position++
						if buffer[position] != rune('e') {
							goto l44
						}
						position++
						if buffer[position] != rune('r') {
							goto l44
						}
						position++
						if buffer[position] != rune('e') {
							goto l44
						}
						position++
					}
				l45:
					if !_rules[ruleFilterOperator]() {
						goto l44
					}
					if !_rules[ruleAction12]() {
						goto l44
					}
					goto l43
				l44:
					position, tokenIndex = position43, tokenIndex43
					if buffer[position] != rune('s') {
						goto l47
					}
					position++
					if buffer[position] != rune('u') {
						goto l47
					}
					position++
					if buffer[position] != rune('m') {
						goto l47
					}
					position++
					if buffer[position] != rune('m') {
						goto l47
					}
					position++
					if buffer[position] != rune('a') {
						goto l47
					}
					position++
					if buffer[position] != rune('r') {
						goto l47
					}
					position++
					if buffer[position] != rune('i') {
						goto l47
					}
					position++
					if buffer[position] != rune('z') {
						goto l47
					}
					position++
					if buffer[position] != rune('e') {
						goto l47
					}
					position++
					if !_rules[ruleSummarizeOperator]() {
						goto l47
					}
					if !_rules[ruleAction13]() {
						goto l47
					}
					goto l43
				l47:
					position, tokenIndex = position43, tokenIndex43
					if buffer[position] != rune('p') {
						goto l48
					}
					position++
					if buffer[position] != rune('r') {
						goto l48
					}
					position++
					if buffer[position] != rune('o') {
						goto l48
					}
					position++
					if buffer[position] != rune('j') {
						goto l48
					}
					position++
					if buffer[position] != rune('e') {
						goto l48
					}
					position++
					if buffer[position] != rune('c') {
						goto l48
					}
					position++
					if buffer[position] != rune('t') {
						goto l48
					}
					position++
					if !_rules[ruleProjectOperator]() {
						goto l48
					}
					if !_rules[ruleAction14]() {
						goto l48
					}
					goto l43
				l48:
					position, tokenIndex = position43, tokenIndex43
					if buffer[position] != rune('p') {
						goto l49
					}
					position++
					if buffer[position] != rune('r') {
						goto l49
					}
					position++
					if buffer[position] != rune('o') {
						goto l49
					}
					position++
					if buffer[position] != rune('j') {
						goto l49
					}
					position++
					if buffer[position] != rune('e') {
						goto l49
					}
					position++
					if buffer[position] != rune('c') {
						goto l49
					}
					position++
					if buffer[position] != rune('t') {
						goto l49
					}
					position++
					if buffer[position] != rune('-') {
						goto l49
					}
					position++
					if buffer[position] != rune('a') {
						goto l49
					}
					position++
					if buffer[position] != rune('w') {
						goto l49
					}
					position++
					if buffer[position] != rune('a') {
						goto l49
					}
					position++
					if buffer[position] != rune('y') {
						goto l49
					}
					position++
					if !_rules[ruleProjectAwayOperator]() {
						goto l49
					}
					if !_rules[ruleAction15]() {
						goto l49
					}
					goto l43
				l49:
					position, tokenIndex = position43, tokenIndex43
					if buffer[position] != rune('p') {
						goto l50
					}
					position++
					if buffer[position] != rune('r') {
						goto l50
					}
					position++
					if buffer[position] != rune('o') {
						goto l50
					}
					position++
					if buffer[position] != rune('j') {
						goto l50
					}
					position++
					if buffer[position] != rune('e') {
						goto l50
					}
					position++
					if buffer[position] != rune('c') {
						goto l50
					}
					position++
					if buffer[position] != rune('t') {
						goto l50
					}
					position++
					if buffer[position] != rune('-') {
						goto l50
					}
					position++
					if buffer[position] != rune('k') {
						goto l50
					}
					position++
					if buffer[position] != rune('e') {
						goto l50
					}
					position++
					if buffer[position] != rune('e') {
						goto l50
					}
					position++
					if buffer[position] != rune('p') {
						goto l50
					}
					position++
					if !_rules[ruleProjectKeepOperator]() {
						goto l50
					}
					if !_rules[ruleAction16]() {
						goto l50
					}
					goto l43
				l50:
					position, tokenIndex = position43, tokenIndex43
					if buffer[position] != rune('e') {
						goto l51
					}
					position++
					if buffer[position] != rune('x') {
						goto l51
					}
					position++
					if buffer[position] != rune('t') {
						goto l51
					}
					position++
					if buffer[position] != rune('e') {
						goto l51
					}
					position++
					if buffer[position] != rune('n') {
						goto l51
					}
					position++
					if buffer[position] != rune('d') {
						goto l51
					}
					position++
					if !_rules[ruleExtendOperator]() {
						goto l51
					}
					if !_rules[ruleAction17]() {
						goto l51
					}
					goto l43
				l51:
					position, tokenIndex = position43, tokenIndex43
					if buffer[position] != rune('c') {
						goto l52
					}
					position++
					if buffer[position] != rune('o') {
						goto l52
					}
					position++
					if buffer[position] != rune('u') {
						goto l52
					}
					position++
					if buffer[position] != rune('n') {
						goto l52
					}
					position++
					if buffer[position] != rune('t') {
						goto l52
					}
					position++
					if !_rules[ruleCountOperator]() {
						goto l52
					}
					if !_rules[ruleAction18]() {
						goto l52
					}
					goto l43
				l52:
					position, tokenIndex = position43, tokenIndex43
					if buffer[position] != rune('d') {
						goto l53
					}
					position++
					if buffer[position] != rune('i') {
						goto l53
					}
					position++
					if buffer[position] != rune('s') {
						goto l53
					}
					position++
					if buffer[position] != rune('t') {
						goto l53
					}
					position++
					if buffer[position] != rune('i') {
						goto l53
					}
					position++
					if buffer[position] != rune('n') {
						goto l53
					}
					position++
					if buffer[position] != rune('c') {
						goto l53
					}
					position++
					if buffer[position] != rune('t') {
						goto l53
					}
					position++
					if !_rules[ruleDistinctOperator]() {
						goto l53
					}
					if !_rules[ruleAction19]() {
						goto l53
					}
					goto l43
				l53:
					position, tokenIndex = position43, tokenIndex43
					if buffer[position] != rune('s') {
						goto l54
					}
					position++
					if buffer[position] != rune('a') {
						goto l54
					}
					position++
					if buffer[position] != rune('m') {
						goto l54
					}
					position++
					if buffer[position] != rune('p') {
						goto l54
					}
					position++
					if buffer[position] != rune('l') {
						goto l54
					}
					position++
					if buffer[position] != rune('e') {
						goto l54
					}
					position++
					if !_rules[ruleSampleOperator]() {
						goto l54
					}
					if !_rules[ruleAction20]() {
						goto l54
					}
					goto l43
				l54:
					position, tokenIndex = position43, tokenIndex43
					if buffer[position] != rune('s') {
						goto l55
					}
					position++
					if buffer[position] != rune('e') {
						goto l55
					}
					position++
					if buffer[position] != rune('a') {
						goto l55
					}
					position++
					if buffer[position] != rune('r') {
						goto l55
					}
					position++
					if buffer[position] != rune('c') {
						goto l55
					}
					position++
					if buffer[position] != rune('h') {
						goto l55
					}
					position++
					if !_rules[ruleSearchOperator]() {
						goto l55
					}
					if !_rules[ruleAction21]() {
						goto l55
					}
					goto l43
				l55:
					position, tokenIndex = position43, tokenIndex43
					if buffer[position] != rune('s') {
						goto l56
					}
					position++
					if buffer[position] != rune('o') {
						goto l56
					}
					position++
					if buffer[position] != rune('r') {
						goto l56
					}
					position++
					if buffer[position] != rune('t') {
						goto l56
					}
					position++
					if !_rules[ruleSortOperator]() {
						goto l56
					}
					if !_rules[ruleAction22]() {
						goto l56
					}
					goto l43
				l56:
					position, tokenIndex = position43, tokenIndex43
					if buffer[position] != rune('t') {
						goto l57
					}
					position++
					if buffer[position] != rune('a') {
						goto l57
					}
					position++
					if buffer[position] != rune('k') {
						goto l57
					}
					position++
					if buffer[position] != rune('e') {
						goto l57
					}
					position++
					if !_rules[ruleTakeOperator]() {
						goto l57
					}
					if !_rules[ruleAction23]() {
						goto l57
					}
					goto l43
				l57:
					position, tokenIndex = position43, tokenIndex43
					if buffer[position] != rune('t') {
						goto l41
					}
					position++
					if buffer[position] != rune('o') {
						goto l41
					}
					position++
					if buffer[position] != rune('p') {
						goto l41
					}
					position++
					if !_rules[ruleTopOperator]() {
						goto l41
					}
					if !_rules[ruleAction24]() {
						goto l41
					}
				}
			l43:
				add(ruleStatement, position42)
			}
			return true
		l41:
			position, tokenIndex = position41, tokenIndex41
			return false
		},
		/* 9 RenderStatement <- <(Space PIPE Space ('r' 'e' 'n' 'd' 'e' 'r') MustSpace RenderSplitOperator Action25)> */
		func() bool {
			position58, tokenIndex58 := position, tokenIndex
			{
				position59 := position
				if !_rules[ruleSpace]() {
					goto l58
				}
				if !_rules[rulePIPE]() {
					goto l58
				}
				if !_rules[ruleSpace]() {
					goto l58
				}
				if buffer[position] != rune('r') {
					goto l58
				}
				position++
				if buffer[position] != rune('e') {
					goto l58
				}
				position++
				if buffer[position] != rune('n') {
					goto l58
				}
				position++
				if buffer[position] != rune('d') {
					goto l58
				}
				position++
				if buffer[position] != rune('e') {
					goto l58
				}
				position++
				if buffer[position] != rune('r') {
					goto l58
				}
				position++
				if !_rules[ruleMustSpace]() {
					goto l58
				}
				if !_rules[ruleRenderSplitOperator]() {
					goto l58
				}
				if !_rules[ruleAction25]() {
					goto l58
				}
				add(ruleRenderStatement, position59)
			}
			return true
		l58:
			position, tokenIndex = position58, tokenIndex58
			return false
		},
		/* 10 FilterOperator <- <(MustSpace Expr Action26)> */
		func() bool {
			position60, tokenIndex60 := position, tokenIndex
			{
				position61 := position
				if !_rules[ruleMustSpace]() {
					goto l60
				}
				if !_rules[ruleExpr]() {
					goto l60
				}
				if !_rules[ruleAction26]() {
					goto l60
				}
				add(ruleFilterOperator, position61)
			}
			return true
		l60:
			position, tokenIndex = position60, tokenIndex60
			return false
		},
		/* 11 SummarizeOperator <- <(MustSpace Action27 SummarizeParameters SummarizeByGroupExpressions?)> */
		func() bool {
			position62, tokenIndex62 := position, tokenIndex
			{
				position63 := position
				if !_rules[ruleMustSpace]() {
					goto l62
				}
				if !_rules[ruleAction27]() {
					goto l62
				}
				if !_rules[ruleSummarizeParameters]() {
					goto l62
				}
				{
					position64, tokenIndex64 := position, tokenIndex
					if !_rules[ruleSummarizeByGroupExpressions]() {
						goto l64
					}
					goto l65
				l64:
					position, tokenIndex = position64, tokenIndex64
				}
			l65:
				add(ruleSummarizeOperator, position63)
			}
			return true
		l62:
			position, tokenIndex = position62, tokenIndex62
			return false
		},
		/* 12 SummarizeParameters <- <(SummarizeParameter (Space ',' Space SummarizeParameter)* Space)> */
		func() bool {
			position66, tokenIndex66 := position, tokenIndex
			{
				position67 := position
				if !_rules[ruleSummarizeParameter]() {
					goto l66
				}
			l68:
				{
					position69, tokenIndex69 := position, tokenIndex
					if !_rules[ruleSpace]() {
						goto l69
					}
					if buffer[position] != rune(',') {
						goto l69
					}
					position++
					if !_rules[ruleSpace]() {
						goto l69
					}
					if !_rules[ruleSummarizeParameter]() {
						goto l69
					}
					goto l68
				l69:
					position, tokenIndex = position69, tokenIndex69
				}
				if !_rules[ruleSpace]() {
					goto l66
				}
				add(ruleSummarizeParameters, position67)
			}
			return true
		l66:
			position, tokenIndex = position66, tokenIndex66
			return false
		},
		/* 13 SummarizeParameter <- <((Identifier Action28 (Space '=' Space FuncCall) Action29) / (FuncCall Action30))> */
		func() bool {
			position70, tokenIndex70 := position, tokenIndex
			{
				position71 := position
				{
					position72, tokenIndex72 := position, tokenIndex
					if !_rules[ruleIdentifier]() {
						goto l73
					}
					if !_rules[ruleAction28]() {
						goto l73
					}
					if !_rules[ruleSpace]() {
						goto l73
					}
					if buffer[position] != rune('=') {
						goto l73
					}
					position++
					if !_rules[ruleSpace]() {
						goto l73
					}
					if !_rules[ruleFuncCall]() {
						goto l73
					}
					if !_rules[ruleAction29]() {
						goto l73
					}
					goto l72
				l73:
					position, tokenIndex = position72, tokenIndex72
					if !_rules[ruleFuncCall]() {
						goto l70
					}
					if !_rules[ruleAction30]() {
						goto l70
					}
				}
			l72:
				add(ruleSummarizeParameter, position71)
			}
			return true
		l70:
			position, tokenIndex = position70, tokenIndex70
			return false
		},
		/* 14 SummarizeByGroupExpressions <- <('b' 'y' MustSpace SummarizeByGroupExpression (Space ',' Space SummarizeByGroupExpression)* Space)> */
		func() bool {
			position74, tokenIndex74 := position, tokenIndex
			{
				position75 := position
				if buffer[position] != rune('b') {
					goto l74
				}
				position++
				if buffer[position] != rune('y') {
					goto l74
				}
				position++
				if !_rules[ruleMustSpace]() {
					goto l74
				}
				if !_rules[ruleSummarizeByGroupExpression]() {
					goto l74
				}
			l76:
				{
					position77, tokenIndex77 := position, tokenIndex
					if !_rules[ruleSpace]() {
						goto l77
					}
					if buffer[position] != rune(',') {
						goto l77
					}
					position++
					if !_rules[ruleSpace]() {
						goto l77
					}
					if !_rules[ruleSummarizeByGroupExpression]() {
						goto l77
					}
					goto l76
				l77:
					position, tokenIndex = position77, tokenIndex77
				}
				if !_rules[ruleSpace]() {
					goto l74
				}
				add(ruleSummarizeByGroupExpressions, position75)
			}
			return true
		l74:
			position, tokenIndex = position74, tokenIndex74
			return false
		},
		/* 15 SummarizeByGroupExpression <- <((Identifier Action31 (Space '=' Space Expr Action32)) / (Expr Action33))> */
		func() bool {
			position78, tokenIndex78 := position, tokenIndex
			{
				position79 := position
				{
					position80, tokenIndex80 := position, tokenIndex
					if !_rules[ruleIdentifier]() {
						goto l81
					}
					if !_rules[ruleAction31]() {
						goto l81
					}
					if !_rules[ruleSpace]() {
						goto l81
					}
					if buffer[position] != rune('=') {
						goto l81
					}
					position++
					if !_rules[ruleSpace]() {
						goto l81
					}
					if !_rules[ruleExpr]() {
						goto l81
					}
					if !_rules[ruleAction32]() {
						goto l81
					}
					goto l80
				l81:
					position, tokenIndex = position80, tokenIndex80
					if !_rules[ruleExpr]() {
						goto l78
					}
					if !_rules[ruleAction33]() {
						goto l78
					}
				}
			l80:
				add(ruleSummarizeByGroupExpression, position79)
			}
			return true
		l78:
			position, tokenIndex = position78, tokenIndex78
			return false
		},
		/* 16 ProjectOperator <- <(MustSpace Action34 ProjectArg (Space ',' Space ProjectArg)* Space)> */
		func() bool {
			position82, tokenIndex82 := position, tokenIndex
			{
				position83 := position
				if !_rules[ruleMustSpace]() {
					goto l82
				}
				if !_rules[ruleAction34]() {
					goto l82
				}
				if !_rules[ruleProjectArg]() {
					goto l82
				}
			l84:
				{
					position85, tokenIndex85 := position, tokenIndex
					if !_rules[ruleSpace]() {
						goto l85
					}
					if buffer[position] != rune(',') {
						goto l85
					}
					position++
					if !_rules[ruleSpace]() {
						goto l85
					}
					if !_rules[ruleProjectArg]() {
						goto l85
					}
					goto l84
				l85:
					position, tokenIndex = position85, tokenIndex85
				}
				if !_rules[ruleSpace]() {
					goto l82
				}
				add(ruleProjectOperator, position83)
			}
			return true
		l82:
			position, tokenIndex = position82, tokenIndex82
			return false
		},
		/* 17 ProjectArg <- <(Identifier Action35 (Space '=' Space Expr Action36)?)> */
		func() bool {
			position86, tokenIndex86 := position, tokenIndex
			{
				position87 := position
				if !_rules[ruleIdentifier]() {
					goto l86
				}
				if !_rules[ruleAction35]() {
					goto l86
				}
				{
					position88, tokenIndex88 := position, tokenIndex
					if !_rules[ruleSpace]() {
						goto l88
					}
					if buffer[position] != rune('=') {
						goto l88
					}
					position++
					if !_rules[ruleSpace]() {
						goto l88
					}
					if !_rules[ruleExpr]() {
						goto l88
					}
					if !_rules[ruleAction36]() {
						goto l88
					}
					goto l89
				l88:
					position, tokenIndex = position88, tokenIndex88
				}
			l89:
				add(ruleProjectArg, position87)
			}
			return true
		l86:
			position, tokenIndex = position86, tokenIndex86
			return false
		},
		/* 18 ProjectAwayOperator <- <(MustSpace Action37 ProjectAwayArg (Space ',' Space ProjectAwayArg)* Space)> */
		func() bool {
			position90, tokenIndex90 := position, tokenIndex
			{
				position91 := position
				if !_rules[ruleMustSpace]() {
					goto l90
				}
				if !_rules[ruleAction37]() {
					goto l90
				}
				if !_rules[ruleProjectAwayArg]() {
					goto l90
				}
			l92:
				{
					position93, tokenIndex93 := position, tokenIndex
					if !_rules[ruleSpace]() {
						goto l93
					}
					if buffer[position] != rune(',') {
						goto l93
					}
					position++
					if !_rules[ruleSpace]() {
						goto l93
					}
					if !_rules[ruleProjectAwayArg]() {
						goto l93
					}
					goto l92
				l93:
					position, tokenIndex = position93, tokenIndex93
				}
				if !_rules[ruleSpace]() {
					goto l90
				}
				add(ruleProjectAwayOperator, position91)
			}
			return true
		l90:
			position, tokenIndex = position90, tokenIndex90
			return false
		},
		/* 19 ProjectAwayArg <- <(Identifier Action38)> */
		func() bool {
			position94, tokenIndex94 := position, tokenIndex
			{
				position95 := position
				if !_rules[ruleIdentifier]() {
					goto l94
				}
				if !_rules[ruleAction38]() {
					goto l94
				}
				add(ruleProjectAwayArg, position95)
			}
			return true
		l94:
			position, tokenIndex = position94, tokenIndex94
			return false
		},
		/* 20 ProjectKeepOperator <- <(MustSpace Action39 ProjectKeepArg (Space ',' Space ProjectKeepArg)* Space)> */
		func() bool {
			position96, tokenIndex96 := position, tokenIndex
			{
				position97 := position
				if !_rules[ruleMustSpace]() {
					goto l96
				}
				if !_rules[ruleAction39]() {
					goto l96
				}
				if !_rules[ruleProjectKeepArg]() {
					goto l96
				}
			l98:
				{
					position99, tokenIndex99 := position, tokenIndex
					if !_rules[ruleSpace]() {
						goto l99
					}
					if buffer[position] != rune(',') {
						goto l99
					}
					position++
					if !_rules[ruleSpace]() {
						goto l99
					}
					if !_rules[ruleProjectKeepArg]() {
						goto l99
					}
					goto l98
				l99:
					position, tokenIndex = position99, tokenIndex99
				}
				if !_rules[ruleSpace]() {
					goto l96
				}
				add(ruleProjectKeepOperator, position97)
			}
			return true
		l96:
			position, tokenIndex = position96, tokenIndex96
			return false
		},
		/* 21 ProjectKeepArg <- <(Identifier Action40)> */
		func() bool {
			position100, tokenIndex100 := position, tokenIndex
			{
				position101 := position
				if !_rules[ruleIdentifier]() {
					goto l100
				}
				if !_rules[ruleAction40]() {
					goto l100
				}
				add(ruleProjectKeepArg, position101)
			}
			return true
		l100:
			position, tokenIndex = position100, tokenIndex100
			return false
		},
		/* 22 ExtendOperator <- <(MustSpace Action41 ExtendArg (Space ',' Space ExtendArg)* Space)> */
		func() bool {
			position102, tokenIndex102 := position, tokenIndex
			{
				position103 := position
				if !_rules[ruleMustSpace]() {
					goto l102
				}
				if !_rules[ruleAction41]() {
					goto l102
				}
				if !_rules[ruleExtendArg]() {
					goto l102
				}
			l104:
				{
					position105, tokenIndex105 := position, tokenIndex
					if !_rules[ruleSpace]() {
						goto l105
					}
					if buffer[position] != rune(',') {
						goto l105
					}
					position++
					if !_rules[ruleSpace]() {
						goto l105
					}
					if !_rules[ruleExtendArg]() {
						goto l105
					}
					goto l104
				l105:
					position, tokenIndex = position105, tokenIndex105
				}
				if !_rules[ruleSpace]() {
					goto l102
				}
				add(ruleExtendOperator, position103)
			}
			return true
		l102:
			position, tokenIndex = position102, tokenIndex102
			return false
		},
		/* 23 ExtendArg <- <(Identifier Action42 Space '=' Space Expr Action43)> */
		func() bool {
			position106, tokenIndex106 := position, tokenIndex
			{
				position107 := position
				if !_rules[ruleIdentifier]() {
					goto l106
				}
				if !_rules[ruleAction42]() {
					goto l106
				}
				if !_rules[ruleSpace]() {
					goto l106
				}
				if buffer[position] != rune('=') {
					goto l106
				}
				position++
				if !_rules[ruleSpace]() {
					goto l106
				}
				if !_rules[ruleExpr]() {
					goto l106
				}
				if !_rules[ruleAction43]() {
					goto l106
				}
				add(ruleExtendArg, position107)
			}
			return true
		l106:
			position, tokenIndex = position106, tokenIndex106
			return false
		},
		/* 24 CountOperator <- <Action44> */
		func() bool {
			position108, tokenIndex108 := position, tokenIndex
			{
				position109 := position
				if !_rules[ruleAction44]() {
					goto l108
				}
				add(ruleCountOperator, position109)
			}
			return true
		l108:
			position, tokenIndex = position108, tokenIndex108
			return false
		},
		/* 25 DistinctOperator <- <Action45> */
		func() bool {
			position110, tokenIndex110 := position, tokenIndex
			{
				position111 := position
				if !_rules[ruleAction45]() {
					goto l110
				}
				add(ruleDistinctOperator, position111)
			}
			return true
		l110:
			position, tokenIndex = position110, tokenIndex110
			return false
		},
		/* 26 SampleOperator <- <(MustSpace Action46 I64 Space Action47)> */
		func() bool {
			position112, tokenIndex112 := position, tokenIndex
			{
				position113 := position
				if !_rules[ruleMustSpace]() {
					goto l112
				}
				if !_rules[ruleAction46]() {
					goto l112
				}
				if !_rules[ruleI64]() {
					goto l112
				}
				if !_rules[ruleSpace]() {
					goto l112
				}
				if !_rules[ruleAction47]() {
					goto l112
				}
				add(ruleSampleOperator, position113)
			}
			return true
		l112:
			position, tokenIndex = position112, tokenIndex112
			return false
		},
		/* 27 SearchOperator <- <(MustSpace Action48 ('k' 'i' 'n' 'd' Space '=' Space SearchOperatorCaseSensitivity MustSpace)? SearchOperatorPredicate)> */
		func() bool {
			position114, tokenIndex114 := position, tokenIndex
			{
				position115 := position
				if !_rules[ruleMustSpace]() {
					goto l114
				}
				if !_rules[ruleAction48]() {
					goto l114
				}
				{
					position116, tokenIndex116 := position, tokenIndex
					if buffer[position] != rune('k') {
						goto l116
					}
					position++
					if buffer[position] != rune('i') {
						goto l116
					}
					position++
					if buffer[position] != rune('n') {
						goto l116
					}
					position++
					if buffer[position] != rune('d') {
						goto l116
					}
					position++
					if !_rules[ruleSpace]() {
						goto l116
					}
					if buffer[position] != rune('=') {
						goto l116
					}
					position++
					if !_rules[ruleSpace]() {
						goto l116
					}
					if !_rules[ruleSearchOperatorCaseSensitivity]() {
						goto l116
					}
					if !_rules[ruleMustSpace]() {
						goto l116
					}
					goto l117
				l116:
					position, tokenIndex = position116, tokenIndex116
				}
			l117:
				if !_rules[ruleSearchOperatorPredicate]() {
					goto l114
				}
				add(ruleSearchOperator, position115)
			}
			return true
		l114:
			position, tokenIndex = position114, tokenIndex114
			return false
		},
		/* 28 SearchOperatorCaseSensitivity <- <(('d' 'e' 'f' 'a' 'u' 'l' 't' Action49) / ('c' 'a' 's' 'e' '_' 'i' 'n' 's' 'e' 'n' 's' 'i' 't' 'i' 'v' 'e' Action50) / ('c' 'a' 's' 'e' '_' 's' 'e' 'n' 's' 'i' 't' 'i' 'v' 'e' Action51))> */
		func() bool {
			position118, tokenIndex118 := position, tokenIndex
			{
				position119 := position
				{
					position120, tokenIndex120 := position, tokenIndex
					if buffer[position] != rune('d') {
						goto l121
					}
					position++
					if buffer[position] != rune('e') {
						goto l121
					}
					position++
					if buffer[position] != rune('f') {
						goto l121
					}
					position++
					if buffer[position] != rune('a') {
						goto l121
					}
					position++
					if buffer[position] != rune('u') {
						goto l121
					}
					position++
					if buffer[position] != rune('l') {
						goto l121
					}
					position++
					if buffer[position] != rune('t') {
						goto l121
					}
					position++
					if !_rules[ruleAction49]() {
						goto l121
					}
					goto l120
				l121:
					position, tokenIndex = position120, tokenIndex120
					if buffer[position] != rune('c') {
						goto l122
					}
					position++
					if buffer[position] != rune('a') {
						goto l122
					}
					position++
					if buffer[position] != rune('s') {
						goto l122
					}
					position++
					if buffer[position] != rune('e') {
						goto l122
					}
					position++
					if buffer[position] != rune('_') {
						goto l122
					}
					position++
					if buffer[position] != rune('i') {
						goto l122
					}
					position++
					if buffer[position] != rune('n') {
						goto l122
					}
					position++
					if buffer[position] != rune('s') {
						goto l122
					}
					position++
					if buffer[position] != rune('e') {
						goto l122
					}
					position++
					if buffer[position] != rune('n') {
						goto l122
					}
					position++
					if buffer[position] != rune('s') {
						goto l122
					}
					position++
					if buffer[position] != rune('i') {
						goto l122
					}
					position++
					if buffer[position] != rune('t') {
						goto l122
					}
					position++
					if buffer[position] != rune('i') {
						goto l122
					}
					position++
					if buffer[position] != rune('v') {
						goto l122
					}
					position++
					if buffer[position] != rune('e') {
						goto l122
					}
					position++
					if !_rules[ruleAction50]() {
						goto l122
					}
					goto l120
				l122:
					position, tokenIndex = position120, tokenIndex120
					if buffer[position] != rune('c') {
						goto l118
					}
					position++
					if buffer[position] != rune('a') {
						goto l118
					}
					position++
					if buffer[position] != rune('s') {
						goto l118
					}
					position++
					if buffer[position] != rune('e') {
						goto l118
					}
					position++
					if buffer[position] != rune('_') {
						goto l118
					}
					position++
					if buffer[position] != rune('s') {
						goto l118
					}
					position++
					if buffer[position] != rune('e') {
						goto l118
					}
					position++
					if buffer[position] != rune('n') {
						goto l118
					}
					position++
					if buffer[position] != rune('s') {
						goto l118
					}
					position++
					if buffer[position] != rune('i') {
						goto l118
					}
					position++
					if buffer[position] != rune('t') {
						goto l118
					}
					position++
					if buffer[position] != rune('i') {
						goto l118
					}
					position++
					if buffer[position] != rune('v') {
						goto l118
					}
					position++
					if buffer[position] != rune('e') {
						goto l118
					}
					position++
					if !_rules[ruleAction51]() {
						goto l118
					}
				}
			l120:
				add(ruleSearchOperatorCaseSensitivity, position119)
			}
			return true
		l118:
			position, tokenIndex = position118, tokenIndex118
			return false
		},
		/* 29 SearchOperatorPredicate <- <((Literal Action52) / (Identifier Action53 ((':' String Action54) / ('=' '=' String Action55) / (MustSpace ('m' 'a' 't' 'c' 'h' 'e' 's' ' ' 'r' 'e' 'g' 'e' 'x') MustSpace String Action56))))> */
		func() bool {
			position123, tokenIndex123 := position, tokenIndex
			{
				position124 := position
				{
					position125, tokenIndex125 := position, tokenIndex
					if !_rules[ruleLiteral]() {
						goto l126
					}
					if !_rules[ruleAction52]() {
						goto l126
					}
					goto l125
				l126:
					position, tokenIndex = position125, tokenIndex125
					if !_rules[ruleIdentifier]() {
						goto l123
					}
					if !_rules[ruleAction53]() {
						goto l123
					}
					{
						position127, tokenIndex127 := position, tokenIndex
						if buffer[position] != rune(':') {
							goto l128
						}
						position++
						if !_rules[ruleString]() {
							goto l128
						}
						if !_rules[ruleAction54]() {
							goto l128
						}
						goto l127
					l128:
						position, tokenIndex = position127, tokenIndex127
						if buffer[position] != rune('=') {
							goto l129
						}
						position++
						if buffer[position] != rune('=') {
							goto l129
						}
						position++
						if !_rules[ruleString]() {
							goto l129
						}
						if !_rules[ruleAction55]() {
							goto l129
						}
						goto l127
					l129:
						position, tokenIndex = position127, tokenIndex127
						if !_rules[ruleMustSpace]() {
							goto l123
						}
						if buffer[position] != rune('m') {
							goto l123
						}
						position++
						if buffer[position] != rune('a') {
							goto l123
						}
						position++
						if buffer[position] != rune('t') {
							goto l123
						}
						position++
						if buffer[position] != rune('c') {
							goto l123
						}
						position++
						if buffer[position] != rune('h') {
							goto l123
						}
						position++
						if buffer[position] != rune('e') {
							goto l123
						}
						position++
						if buffer[position] != rune('s') {
							goto l123
						}
						position++
						if buffer[position] != rune(' ') {
							goto l123
						}
						position++
						if buffer[position] != rune('r') {
							goto l123
						}
						position++
						if buffer[position] != rune('e') {
							goto l123
						}
						position++
						if buffer[position] != rune('g') {
							goto l123
						}
						position++
						if buffer[position] != rune('e') {
							goto l123
						}
						position++
						if buffer[position] != rune('x') {
							goto l123
						}
						position++
						if !_rules[ruleMustSpace]() {
							goto l123
						}
						if !_rules[ruleString]() {
							goto l123
						}
						if !_rules[ruleAction56]() {
							goto l123
						}
					}
				l127:
				}
			l125:
				add(ruleSearchOperatorPredicate, position124)
			}
			return true
		l123:
			position, tokenIndex = position123, tokenIndex123
			return false
		},
		/* 30 SortOperator <- <(MustSpace Action57 ('b' 'y') MustSpace SortOperatorArg (Space ',' Space SortOperatorArg)* Space)> */
		func() bool {
			position130, tokenIndex130 := position, tokenIndex
			{
				position131 := position
				if !_rules[ruleMustSpace]() {
					goto l130
				}
				if !_rules[ruleAction57]() {
					goto l130
				}
				if buffer[position] != rune('b') {
					goto l130
				}
				position++
				if buffer[position] != rune('y') {
					goto l130
				}
				position++
				if !_rules[ruleMustSpace]() {
					goto l130
				}
				if !_rules[ruleSortOperatorArg]() {
					goto l130
				}
			l132:
				{
					position133, tokenIndex133 := position, tokenIndex
					if !_rules[ruleSpace]() {
						goto l133
					}
					if buffer[position] != rune(',') {
						goto l133
					}
					position++
					if !_rules[ruleSpace]() {
						goto l133
					}
					if !_rules[ruleSortOperatorArg]() {
						goto l133
					}
					goto l132
				l133:
					position, tokenIndex = position133, tokenIndex133
				}
				if !_rules[ruleSpace]() {
					goto l130
				}
				add(ruleSortOperator, position131)
			}
			return true
		l130:
			position, tokenIndex = position130, tokenIndex130
			return false
		},
		/* 31 SortOperatorArg <- <(Identifier Action58 (MustSpace (('a' 's' 'c' Action59) / ('d' 'e' 's' 'c' Action60)))?)> */
		func() bool {
			position134, tokenIndex134 := position, tokenIndex
			{
				position135 := position
				if !_rules[ruleIdentifier]() {
					goto l134
				}
				if !_rules[ruleAction58]() {
					goto l134
				}
				{
					position136, tokenIndex136 := position, tokenIndex
					if !_rules[ruleMustSpace]() {
						goto l136
					}
					{
						position138, tokenIndex138 := position, tokenIndex
						if buffer[position] != rune('a') {
							goto l139
						}
						position++
						if buffer[position] != rune('s') {
							goto l139
						}
						position++
						if buffer[position] != rune('c') {
							goto l139
						}
						position++
						if !_rules[ruleAction59]() {
							goto l139
						}
						goto l138
					l139:
						position, tokenIndex = position138, tokenIndex138
						if buffer[position] != rune('d') {
							goto l136
						}
						position++
						if buffer[position] != rune('e') {
							goto l136
						}
						position++
						if buffer[position] != rune('s') {
							goto l136
						}
						position++
						if buffer[position] != rune('c') {
							goto l136
						}
						position++
						if !_rules[ruleAction60]() {
							goto l136
						}
					}
				l138:
					goto l137
				l136:
					position, tokenIndex = position136, tokenIndex136
				}
			l137:
				add(ruleSortOperatorArg, position135)
			}
			return true
		l134:
			position, tokenIndex = position134, tokenIndex134
			return false
		},
		/* 32 TakeOperator <- <(MustSpace Action61 I64 Action62)> */
		func() bool {
			position140, tokenIndex140 := position, tokenIndex
			{
				position141 := position
				if !_rules[ruleMustSpace]() {
					goto l140
				}
				if !_rules[ruleAction61]() {
					goto l140
				}
				if !_rules[ruleI64]() {
					goto l140
				}
				if !_rules[ruleAction62]() {
					goto l140
				}
				add(ruleTakeOperator, position141)
			}
			return true
		l140:
			position, tokenIndex = position140, tokenIndex140
			return false
		},
		/* 33 TopOperator <- <(MustSpace Action63 I64 MustSpace Action64 ('b' 'y') MustSpace Expr Action65 (MustSpace (('a' 's' 'c' Action66) / ('d' 'e' 's' 'c' Action67)))?)> */
		func() bool {
			position142, tokenIndex142 := position, tokenIndex
			{
				position143 := position
				if !_rules[ruleMustSpace]() {
					goto l142
				}
				if !_rules[ruleAction63]() {
					goto l142
				}
				if !_rules[ruleI64]() {
					goto l142
				}
				if !_rules[ruleMustSpace]() {
					goto l142
				}
				if !_rules[ruleAction64]() {
					goto l142
				}
				if buffer[position] != rune('b') {
					goto l142
				}
				position++
				if buffer[position] != rune('y') {
					goto l142
				}
				position++
				if !_rules[ruleMustSpace]() {
					goto l142
				}
				if !_rules[ruleExpr]() {
					goto l142
				}
				if !_rules[ruleAction65]() {
					goto l142
				}
				{
					position144, tokenIndex144 := position, tokenIndex
					if !_rules[ruleMustSpace]() {
						goto l144
					}
					{
						position146, tokenIndex146 := position, tokenIndex
						if buffer[position] != rune('a') {
							goto l147
						}
						position++
						if buffer[position] != rune('s') {
							goto l147
						}
						position++
						if buffer[position] != rune('c') {
							goto l147
						}
						position++
						if !_rules[ruleAction66]() {
							goto l147
						}
						goto l146
					l147:
						position, tokenIndex = position146, tokenIndex146
						if buffer[position] != rune('d') {
							goto l144
						}
						position++
						if buffer[position] != rune('e') {
							goto l144
						}
						position++
						if buffer[position] != rune('s') {
							goto l144
						}
						position++
						if buffer[position] != rune('c') {
							goto l144
						}
						position++
						if !_rules[ruleAction67]() {
							goto l144
						}
					}
				l146:
					goto l145
				l144:
					position, tokenIndex = position144, tokenIndex144
				}
			l145:
				add(ruleTopOperator, position143)
			}
			return true
		l142:
			position, tokenIndex = position142, tokenIndex142
			return false
		},
		/* 34 RenderSplitOperator <- <('s' 'p' 'l' 'i' 't' Action68 MustSpace RenderSplitByOperator)> */
		func() bool {
			position148, tokenIndex148 := position, tokenIndex
			{
				position149 := position
				if buffer[position] != rune('s') {
					goto l148
				}
				position++
				if buffer[position] != rune('p') {
					goto l148
				}
				position++
				if buffer[position] != rune('l') {
					goto l148
				}
				position++
				if buffer[position] != rune('i') {
					goto l148
				}
				position++
				if buffer[position] != rune('t') {
					goto l148
				}
				position++
				if !_rules[ruleAction68]() {
					goto l148
				}
				if !_rules[ruleMustSpace]() {
					goto l148
				}
				if !_rules[ruleRenderSplitByOperator]() {
					goto l148
				}
				add(ruleRenderSplitOperator, position149)
			}
			return true
		l148:
			position, tokenIndex = position148, tokenIndex148
			return false
		},
		/* 35 RenderSplitByOperator <- <('b' 'y' MustSpace RenderSplitByOperatorArg (Space ',' Space RenderSplitByOperatorArg)* Space)> */
		func() bool {
			position150, tokenIndex150 := position, tokenIndex
			{
				position151 := position
				if buffer[position] != rune('b') {
					goto l150
				}
				position++
				if buffer[position] != rune('y') {
					goto l150
				}
				position++
				if !_rules[ruleMustSpace]() {
					goto l150
				}
				if !_rules[ruleRenderSplitByOperatorArg]() {
					goto l150
				}
			l152:
				{
					position153, tokenIndex153 := position, tokenIndex
					if !_rules[ruleSpace]() {
						goto l153
					}
					if buffer[position] != rune(',') {
						goto l153
					}
					position++
					if !_rules[ruleSpace]() {
						goto l153
					}
					if !_rules[ruleRenderSplitByOperatorArg]() {
						goto l153
					}
					goto l152
				l153:
					position, tokenIndex = position153, tokenIndex153
				}
				if !_rules[ruleSpace]() {
					goto l150
				}
				add(ruleRenderSplitByOperator, position151)
			}
			return true
		l150:
			position, tokenIndex = position150, tokenIndex150
			return false
		},
		/* 36 RenderSplitByOperatorArg <- <(Expr Action69)> */
		func() bool {
			position154, tokenIndex154 := position, tokenIndex
			{
				position155 := position
				if !_rules[ruleExpr]() {
					goto l154
				}
				if !_rules[ruleAction69]() {
					goto l154
				}
				add(ruleRenderSplitByOperatorArg, position155)
			}
			return true
		l154:
			position, tokenIndex = position154, tokenIndex154
			return false
		},
		/* 37 Expr <- <(Expr1 ((Space NUM_ADD Expr1 Space Action70) / (Space NUM_SUB Expr1 Space Action71))*)> */
		func() bool {
			position156, tokenIndex156 := position, tokenIndex
			{
				position157 := position
				if !_rules[ruleExpr1]() {
					goto l156
				}
			l158:
				{
					position159, tokenIndex159 := position, tokenIndex
					{
						position160, tokenIndex160 := position, tokenIndex
						if !_rules[ruleSpace]() {
							goto l161
						}
						if !_rules[ruleNUM_ADD]() {
							goto l161
						}
						if !_rules[ruleExpr1]() {
							goto l161
						}
						if !_rules[ruleSpace]() {
							goto l161
						}
						if !_rules[ruleAction70]() {
							goto l161
						}
						goto l160
					l161:
						position, tokenIndex = position160, tokenIndex160
						if !_rules[ruleSpace]() {
							goto l159
						}
						if !_rules[ruleNUM_SUB]() {
							goto l159
						}
						if !_rules[ruleExpr1]() {
							goto l159
						}
						if !_rules[ruleSpace]() {
							goto l159
						}
						if !_rules[ruleAction71]() {
							goto l159
						}
					}
				l160:
					goto l158
				l159:
					position, tokenIndex = position159, tokenIndex159
				}
				add(ruleExpr, position157)
			}
			return true
		l156:
			position, tokenIndex = position156, tokenIndex156
			return false
		},
		/* 38 Expr1 <- <(Expr2 ((Space NUM_MUL Expr2 Space Action72) / (Space NUM_DIV Expr2 Space Action73))*)> */
		func() bool {
			position162, tokenIndex162 := position, tokenIndex
			{
				position163 := position
				if !_rules[ruleExpr2]() {
					goto l162
				}
			l164:
				{
					position165, tokenIndex165 := position, tokenIndex
					{
						position166, tokenIndex166 := position, tokenIndex
						if !_rules[ruleSpace]() {
							goto l167
						}
						if !_rules[ruleNUM_MUL]() {
							goto l167
						}
						if !_rules[ruleExpr2]() {
							goto l167
						}
						if !_rules[ruleSpace]() {
							goto l167
						}
						if !_rules[ruleAction72]() {
							goto l167
						}
						goto l166
					l167:
						position, tokenIndex = position166, tokenIndex166
						if !_rules[ruleSpace]() {
							goto l165
						}
						if !_rules[ruleNUM_DIV]() {
							goto l165
						}
						if !_rules[ruleExpr2]() {
							goto l165
						}
						if !_rules[ruleSpace]() {
							goto l165
						}
						if !_rules[ruleAction73]() {
							goto l165
						}
					}
				l166:
					goto l164
				l165:
					position, tokenIndex = position165, tokenIndex165
				}
				add(ruleExpr1, position163)
			}
			return true
		l162:
			position, tokenIndex = position162, tokenIndex162
			return false
		},
		/* 39 Expr2 <- <(Expr3 ((Space LOG_AND Expr3 Space Action74) / (Space LOG_OR Expr3 Space Action75))*)> */
		func() bool {
			position168, tokenIndex168 := position, tokenIndex
			{
				position169 := position
				if !_rules[ruleExpr3]() {
					goto l168
				}
			l170:
				{
					position171, tokenIndex171 := position, tokenIndex
					{
						position172, tokenIndex172 := position, tokenIndex
						if !_rules[ruleSpace]() {
							goto l173
						}
						if !_rules[ruleLOG_AND]() {
							goto l173
						}
						if !_rules[ruleExpr3]() {
							goto l173
						}
						if !_rules[ruleSpace]() {
							goto l173
						}
						if !_rules[ruleAction74]() {
							goto l173
						}
						goto l172
					l173:
						position, tokenIndex = position172, tokenIndex172
						if !_rules[ruleSpace]() {
							goto l171
						}
						if !_rules[ruleLOG_OR]() {
							goto l171
						}
						if !_rules[ruleExpr3]() {
							goto l171
						}
						if !_rules[ruleSpace]() {
							goto l171
						}
						if !_rules[ruleAction75]() {
							goto l171
						}
					}
				l172:
					goto l170
				l171:
					position, tokenIndex = position171, tokenIndex171
				}
				add(ruleExpr2, position169)
			}
			return true
		l168:
			position, tokenIndex = position168, tokenIndex168
			return false
		},
		/* 40 Expr3 <- <(Expr4 ((Space CMP_EQ Expr4 Action76) / (Space CMP_NOTEQ Expr4 Action77) / (Space CMP_GT Expr4 Action78) / (Space CMP_GTE Expr4 Action79) / (Space CMP_LT Expr4 Action80) / (Space CMP_LTE Expr4 Action81) / (Space SET_IN Expr4 Action82) / (Space SET_NOTIN Expr4 Action83))*)> */
		func() bool {
			position174, tokenIndex174 := position, tokenIndex
			{
				position175 := position
				if !_rules[ruleExpr4]() {
					goto l174
				}
			l176:
				{
					position177, tokenIndex177 := position, tokenIndex
					{
						position178, tokenIndex178 := position, tokenIndex
						if !_rules[ruleSpace]() {
							goto l179
						}
						if !_rules[ruleCMP_EQ]() {
							goto l179
						}
						if !_rules[ruleExpr4]() {
							goto l179
						}
						if !_rules[ruleAction76]() {
							goto l179
						}
						goto l178
					l179:
						position, tokenIndex = position178, tokenIndex178
						if !_rules[ruleSpace]() {
							goto l180
						}
						if !_rules[ruleCMP_NOTEQ]() {
							goto l180
						}
						if !_rules[ruleExpr4]() {
							goto l180
						}
						if !_rules[ruleAction77]() {
							goto l180
						}
						goto l178
					l180:
						position, tokenIndex = position178, tokenIndex178
						if !_rules[ruleSpace]() {
							goto l181
						}
						if !_rules[ruleCMP_GT]() {
							goto l181
						}
						if !_rules[ruleExpr4]() {
							goto l181
						}
						if !_rules[ruleAction78]() {
							goto l181
						}
						goto l178
					l181:
						position, tokenIndex = position178, tokenIndex178
						if !_rules[ruleSpace]() {
							goto l182
						}
						if !_rules[ruleCMP_GTE]() {
							goto l182
						}
						if !_rules[ruleExpr4]() {
							goto l182
						}
						if !_rules[ruleAction79]() {
							goto l182
						}
						goto l178
					l182:
						position, tokenIndex = position178, tokenIndex178
						if !_rules[ruleSpace]() {
							goto l183
						}
						if !_rules[ruleCMP_LT]() {
							goto l183
						}
						if !_rules[ruleExpr4]() {
							goto l183
						}
						if !_rules[ruleAction80]() {
							goto l183
						}
						goto l178
					l183:
						position, tokenIndex = position178, tokenIndex178
						if !_rules[ruleSpace]() {
							goto l184
						}
						if !_rules[ruleCMP_LTE]() {
							goto l184
						}
						if !_rules[ruleExpr4]() {
							goto l184
						}
						if !_rules[ruleAction81]() {
							goto l184
						}
						goto l178
					l184:
						position, tokenIndex = position178, tokenIndex178
						if !_rules[ruleSpace]() {
							goto l185
						}
						if !_rules[ruleSET_IN]() {
							goto l185
						}
						if !_rules[ruleExpr4]() {
							goto l185
						}
						if !_rules[ruleAction82]() {
							goto l185
						}
						goto l178
					l185:
						position, tokenIndex = position178, tokenIndex178
						if !_rules[ruleSpace]() {
							goto l177
						}
						if !_rules[ruleSET_NOTIN]() {
							goto l177
						}
						if !_rules[ruleExpr4]() {
							goto l177
						}
						if !_rules[ruleAction83]() {
							goto l177
						}
					}
				l178:
					goto l176
				l177:
					position, tokenIndex = position177, tokenIndex177
				}
				add(ruleExpr3, position175)
			}
			return true
		l174:
			position, tokenIndex = position174, tokenIndex174
			return false
		},
		/* 41 Expr4 <- <(Expr5 (Space L_BRACKET Expr5 R_BRACKET Action84)*)> */
		func() bool {
			position186, tokenIndex186 := position, tokenIndex
			{
				position187 := position
				if !_rules[ruleExpr5]() {
					goto l186
				}
			l188:
				{
					position189, tokenIndex189 := position, tokenIndex
					if !_rules[ruleSpace]() {
						goto l189
					}
					if !_rules[ruleL_BRACKET]() {
						goto l189
					}
					if !_rules[ruleExpr5]() {
						goto l189
					}
					if !_rules[ruleR_BRACKET]() {
						goto l189
					}
					if !_rules[ruleAction84]() {
						goto l189
					}
					goto l188
				l189:
					position, tokenIndex = position189, tokenIndex189
				}
				add(ruleExpr4, position187)
			}
			return true
		l186:
			position, tokenIndex = position186, tokenIndex186
			return false
		},
		/* 42 Expr5 <- <((L_PARENS Expr R_PARENS Space) / (NOT Literal Space Action85) / (NOT L_PARENS Expr R_PARENS Space Action86) / (NEG Literal Space Action87) / (NEG L_PARENS Expr R_PARENS Space Action88) / (Literal Space Action89) / (FuncCall Space Action90) / Identifier)> */
		func() bool {
			position190, tokenIndex190 := position, tokenIndex
			{
				position191 := position
				{
					position192, tokenIndex192 := position, tokenIndex
					if !_rules[ruleL_PARENS]() {
						goto l193
					}
					if !_rules[ruleExpr]() {
						goto l193
					}
					if !_rules[ruleR_PARENS]() {
						goto l193
					}
					if !_rules[ruleSpace]() {
						goto l193
					}
					goto l192
				l193:
					position, tokenIndex = position192, tokenIndex192
					if !_rules[ruleNOT]() {
						goto l194
					}
					if !_rules[ruleLiteral]() {
						goto l194
					}
					if !_rules[ruleSpace]() {
						goto l194
					}
					if !_rules[ruleAction85]() {
						goto l194
					}
					goto l192
				l194:
					position, tokenIndex = position192, tokenIndex192
					if !_rules[ruleNOT]() {
						goto l195
					}
					if !_rules[ruleL_PARENS]() {
						goto l195
					}
					if !_rules[ruleExpr]() {
						goto l195
					}
					if !_rules[ruleR_PARENS]() {
						goto l195
					}
					if !_rules[ruleSpace]() {
						goto l195
					}
					if !_rules[ruleAction86]() {
						goto l195
					}
					goto l192
				l195:
					position, tokenIndex = position192, tokenIndex192
					if !_rules[ruleNEG]() {
						goto l196
					}
					if !_rules[ruleLiteral]() {
						goto l196
					}
					if !_rules[ruleSpace]() {
						goto l196
					}
					if !_rules[ruleAction87]() {
						goto l196
					}
					goto l192
				l196:
					position, tokenIndex = position192, tokenIndex192
					if !_rules[ruleNEG]() {
						goto l197
					}
					if !_rules[ruleL_PARENS]() {
						goto l197
					}
					if !_rules[ruleExpr]() {
						goto l197
					}
					if !_rules[ruleR_PARENS]() {
						goto l197
					}
					if !_rules[ruleSpace]() {
						goto l197
					}
					if !_rules[ruleAction88]() {
						goto l197
					}
					goto l192
				l197:
					position, tokenIndex = position192, tokenIndex192
					if !_rules[ruleLiteral]() {
						goto l198
					}
					if !_rules[ruleSpace]() {
						goto l198
					}
					if !_rules[ruleAction89]() {
						goto l198
					}
					goto l192
				l198:
					position, tokenIndex = position192, tokenIndex192
					if !_rules[ruleFuncCall]() {
						goto l199
					}
					if !_rules[ruleSpace]() {
						goto l199
					}
					if !_rules[ruleAction90]() {
						goto l199
					}
					goto l192
				l199:
					position, tokenIndex = position192, tokenIndex192
					if !_rules[ruleIdentifier]() {
						goto l190
					}
				}
			l192:
				add(ruleExpr5, position191)
			}
			return true
		l190:
			position, tokenIndex = position190, tokenIndex190
			return false
		},
		/* 43 Literal <- <((String Action91) / (('d' 'u' 'r' ':')? Duration Action92) / (('t' 's' ':')? Timestamp Action93) / (F64 Action94) / (I64 Action95) / (Bool Action96) / (Array Action97) / (Object Action98))> */
		func() bool {
			position200, tokenIndex200 := position, tokenIndex
			{
				position201 := position
				{
					position202, tokenIndex202 := position, tokenIndex
					if !_rules[ruleString]() {
						goto l203
					}
					if !_rules[ruleAction91]() {
						goto l203
					}
					goto l202
				l203:
					position, tokenIndex = position202, tokenIndex202
					{
						position205, tokenIndex205 := position, tokenIndex
						if buffer[position] != rune('d') {
							goto l205
						}
						position++
						if buffer[position] != rune('u') {
							goto l205
						}
						position++
						if buffer[position] != rune('r') {
							goto l205
						}
						position++
						if buffer[position] != rune(':') {
							goto l205
						}
						position++
						goto l206
					l205:
						position, tokenIndex = position205, tokenIndex205
					}
				l206:
					if !_rules[ruleDuration]() {
						goto l204
					}
					if !_rules[ruleAction92]() {
						goto l204
					}
					goto l202
				l204:
					position, tokenIndex = position202, tokenIndex202
					{
						position208, tokenIndex208 := position, tokenIndex
						if buffer[position] != rune('t') {
							goto l208
						}
						position++
						if buffer[position] != rune('s') {
							goto l208
						}
						position++
						if buffer[position] != rune(':') {
							goto l208
						}
						position++
						goto l209
					l208:
						position, tokenIndex = position208, tokenIndex208
					}
				l209:
					if !_rules[ruleTimestamp]() {
						goto l207
					}
					if !_rules[ruleAction93]() {
						goto l207
					}
					goto l202
				l207:
					position, tokenIndex = position202, tokenIndex202
					if !_rules[ruleF64]() {
						goto l210
					}
					if !_rules[ruleAction94]() {
						goto l210
					}
					goto l202
				l210:
					position, tokenIndex = position202, tokenIndex202
					if !_rules[ruleI64]() {
						goto l211
					}
					if !_rules[ruleAction95]() {
						goto l211
					}
					goto l202
				l211:
					position, tokenIndex = position202, tokenIndex202
					if !_rules[ruleBool]() {
						goto l212
					}
					if !_rules[ruleAction96]() {
						goto l212
					}
					goto l202
				l212:
					position, tokenIndex = position202, tokenIndex202
					if !_rules[ruleArray]() {
						goto l213
					}
					if !_rules[ruleAction97]() {
						goto l213
					}
					goto l202
				l213:
					position, tokenIndex = position202, tokenIndex202
					if !_rules[ruleObject]() {
						goto l200
					}
					if !_rules[ruleAction98]() {
						goto l200
					}
				}
			l202:
				add(ruleLiteral, position201)
			}
			return true
		l200:
			position, tokenIndex = position200, tokenIndex200
			return false
		},
		/* 44 FuncCall <- <(Action99 FuncName '(' FuncArgs? ')' Space)> */
		func() bool {
			position214, tokenIndex214 := position, tokenIndex
			{
				position215 := position
				if !_rules[ruleAction99]() {
					goto l214
				}
				if !_rules[ruleFuncName]() {
					goto l214
				}
				if buffer[position] != rune('(') {
					goto l214
				}
				position++
				{
					position216, tokenIndex216 := position, tokenIndex
					if !_rules[ruleFuncArgs]() {
						goto l216
					}
					goto l217
				l216:
					position, tokenIndex = position216, tokenIndex216
				}
			l217:
				if buffer[position] != rune(')') {
					goto l214
				}
				position++
				if !_rules[ruleSpace]() {
					goto l214
				}
				add(ruleFuncCall, position215)
			}
			return true
		l214:
			position, tokenIndex = position214, tokenIndex214
			return false
		},
		/* 45 FuncName <- <(!ReservedKeyword <(([a-z] / [A-Z] / '_') ([a-z] / [A-Z] / '_' / [0-9])*)> Action100)> */
		func() bool {
			position218, tokenIndex218 := position, tokenIndex
			{
				position219 := position
				{
					position220, tokenIndex220 := position, tokenIndex
					if !_rules[ruleReservedKeyword]() {
						goto l220
					}
					goto l218
				l220:
					position, tokenIndex = position220, tokenIndex220
				}
				{
					position221 := position
					{
						position222, tokenIndex222 := position, tokenIndex
						if c := buffer[position]; c < rune('a') || c > rune('z') {
							goto l223
						}
						position++
						goto l222
					l223:
						position, tokenIndex = position222, tokenIndex222
						if c := buffer[position]; c < rune('A') || c > rune('Z') {
							goto l224
						}
						position++
						goto l222
					l224:
						position, tokenIndex = position222, tokenIndex222
						if buffer[position] != rune('_') {
							goto l218
						}
						position++
					}
				l222:
				l225:
					{
						position226, tokenIndex226 := position, tokenIndex
						{
							position227, tokenIndex227 := position, tokenIndex
							if c := buffer[position]; c < rune('a') || c > rune('z') {
								goto l228
							}
							position++
							goto l227
						l228:
							position, tokenIndex = position227, tokenIndex227
							if c := buffer[position]; c < rune('A') || c > rune('Z') {
								goto l229
							}
							position++
							goto l227
						l229:
							position, tokenIndex = position227, tokenIndex227
							if buffer[position] != rune('_') {
								goto l230
							}
							position++
							goto l227
						l230:
							position, tokenIndex = position227, tokenIndex227
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l226
							}
							position++
						}
					l227:
						goto l225
					l226:
						position, tokenIndex = position226, tokenIndex226
					}
					add(rulePegText, position221)
				}
				if !_rules[ruleAction100]() {
					goto l218
				}
				add(ruleFuncName, position219)
			}
			return true
		l218:
			position, tokenIndex = position218, tokenIndex218
			return false
		},
		/* 46 FuncArgs <- <(FuncArg (Space ',' Space FuncArg)* Space)> */
		func() bool {
			position231, tokenIndex231 := position, tokenIndex
			{
				position232 := position
				if !_rules[ruleFuncArg]() {
					goto l231
				}
			l233:
				{
					position234, tokenIndex234 := position, tokenIndex
					if !_rules[ruleSpace]() {
						goto l234
					}
					if buffer[position] != rune(',') {
						goto l234
					}
					position++
					if !_rules[ruleSpace]() {
						goto l234
					}
					if !_rules[ruleFuncArg]() {
						goto l234
					}
					goto l233
				l234:
					position, tokenIndex = position234, tokenIndex234
				}
				if !_rules[ruleSpace]() {
					goto l231
				}
				add(ruleFuncArgs, position232)
			}
			return true
		l231:
			position, tokenIndex = position231, tokenIndex231
			return false
		},
		/* 47 FuncArg <- <(Expr Action101)> */
		func() bool {
			position235, tokenIndex235 := position, tokenIndex
			{
				position236 := position
				if !_rules[ruleExpr]() {
					goto l235
				}
				if !_rules[ruleAction101]() {
					goto l235
				}
				add(ruleFuncArg, position236)
			}
			return true
		l235:
			position, tokenIndex = position235, tokenIndex235
			return false
		},
		/* 48 Identifier <- <((<(([a-z] / [A-Z] / '_') ([a-z] / [A-Z] / [0-9] / '_')*)> Action102) / ('[' '\'' <([a-z] / [A-Z] / [0-9] / '_' / '-' / '.' / ' ')*> ('\'' ']') Action103) / ('[' '"' <([a-z] / [A-Z] / [0-9] / '_' / '-' / '.' / ' ')*> ('"' ']') Action104))> */
		func() bool {
			position237, tokenIndex237 := position, tokenIndex
			{
				position238 := position
				{
					position239, tokenIndex239 := position, tokenIndex
					{
						position241 := position
						{
							position242, tokenIndex242 := position, tokenIndex
							if c := buffer[position]; c < rune('a') || c > rune('z') {
								goto l243
							}
							position++
							goto l242
						l243:
							position, tokenIndex = position242, tokenIndex242
							if c := buffer[position]; c < rune('A') || c > rune('Z') {
								goto l244
							}
							position++
							goto l242
						l244:
							position, tokenIndex = position242, tokenIndex242
							if buffer[position] != rune('_') {
								goto l240
							}
							position++
						}
					l242:
					l245:
						{
							position246, tokenIndex246 := position, tokenIndex
							{
								position247, tokenIndex247 := position, tokenIndex
								if c := buffer[position]; c < rune('a') || c > rune('z') {
									goto l248
								}
								position++
								goto l247
							l248:
								position, tokenIndex = position247, tokenIndex247
								if c := buffer[position]; c < rune('A') || c > rune('Z') {
									goto l249
								}
								position++
								goto l247
							l249:
								position, tokenIndex = position247, tokenIndex247
								if c := buffer[position]; c < rune('0') || c > rune('9') {
									goto l250
								}
								position++
								goto l247
							l250:
								position, tokenIndex = position247, tokenIndex247
								if buffer[position] != rune('_') {
									goto l246
								}
								position++
							}
						l247:
							goto l245
						l246:
							position, tokenIndex = position246, tokenIndex246
						}
						add(rulePegText, position241)
					}
					if !_rules[ruleAction102]() {
						goto l240
					}
					goto l239
				l240:
					position, tokenIndex = position239, tokenIndex239
					if buffer[position] != rune('[') {
						goto l251
					}
					position++
					if buffer[position] != rune('\'') {
						goto l251
					}
					position++
					{
						position252 := position
					l253:
						{
							position254, tokenIndex254 := position, tokenIndex
							{
								position255, tokenIndex255 := position, tokenIndex
								if c := buffer[position]; c < rune('a') || c > rune('z') {
									goto l256
								}
								position++
								goto l255
							l256:
								position, tokenIndex = position255, tokenIndex255
								if c := buffer[position]; c < rune('A') || c > rune('Z') {
									goto l257
								}
								position++
								goto l255
							l257:
								position, tokenIndex = position255, tokenIndex255
								if c := buffer[position]; c < rune('0') || c > rune('9') {
									goto l258
								}
								position++
								goto l255
							l258:
								position, tokenIndex = position255, tokenIndex255
								if buffer[position] != rune('_') {
									goto l259
								}
								position++
								goto l255
							l259:
								position, tokenIndex = position255, tokenIndex255
								if buffer[position] != rune('-') {
									goto l260
								}
								position++
								goto l255
							l260:
								position, tokenIndex = position255, tokenIndex255
								if buffer[position] != rune('.') {
									goto l261
								}
								position++
								goto l255
							l261:
								position, tokenIndex = position255, tokenIndex255
								if buffer[position] != rune(' ') {
									goto l254
								}
								position++
							}
						l255:
							goto l253
						l254:
							position, tokenIndex = position254, tokenIndex254
						}
						add(rulePegText, position252)
					}
					if buffer[position] != rune('\'') {
						goto l251
					}
					position++
					if buffer[position] != rune(']') {
						goto l251
					}
					position++
					if !_rules[ruleAction103]() {
						goto l251
					}
					goto l239
				l251:
					position, tokenIndex = position239, tokenIndex239
					if buffer[position] != rune('[') {
						goto l237
					}
					position++
					if buffer[position] != rune('"') {
						goto l237
					}
					position++
					{
						position262 := position
					l263:
						{
							position264, tokenIndex264 := position, tokenIndex
							{
								position265, tokenIndex265 := position, tokenIndex
								if c := buffer[position]; c < rune('a') || c > rune('z') {
									goto l266
								}
								position++
								goto l265
							l266:
								position, tokenIndex = position265, tokenIndex265
								if c := buffer[position]; c < rune('A') || c > rune('Z') {
									goto l267
								}
								position++
								goto l265
							l267:
								position, tokenIndex = position265, tokenIndex265
								if c := buffer[position]; c < rune('0') || c > rune('9') {
									goto l268
								}
								position++
								goto l265
							l268:
								position, tokenIndex = position265, tokenIndex265
								if buffer[position] != rune('_') {
									goto l269
								}
								position++
								goto l265
							l269:
								position, tokenIndex = position265, tokenIndex265
								if buffer[position] != rune('-') {
									goto l270
								}
								position++
								goto l265
							l270:
								position, tokenIndex = position265, tokenIndex265
								if buffer[position] != rune('.') {
									goto l271
								}
								position++
								goto l265
							l271:
								position, tokenIndex = position265, tokenIndex265
								if buffer[position] != rune(' ') {
									goto l264
								}
								position++
							}
						l265:
							goto l263
						l264:
							position, tokenIndex = position264, tokenIndex264
						}
						add(rulePegText, position262)
					}
					if buffer[position] != rune('"') {
						goto l237
					}
					position++
					if buffer[position] != rune(']') {
						goto l237
					}
					position++
					if !_rules[ruleAction104]() {
						goto l237
					}
				}
			l239:
				add(ruleIdentifier, position238)
			}
			return true
		l237:
			position, tokenIndex = position237, tokenIndex237
			return false
		},
		/* 49 String <- <(<('"' DoubleQuoteStringChar* '"')> Action105)> */
		func() bool {
			position272, tokenIndex272 := position, tokenIndex
			{
				position273 := position
				{
					position274 := position
					if buffer[position] != rune('"') {
						goto l272
					}
					position++
				l275:
					{
						position276, tokenIndex276 := position, tokenIndex
						if !_rules[ruleDoubleQuoteStringChar]() {
							goto l276
						}
						goto l275
					l276:
						position, tokenIndex = position276, tokenIndex276
					}
					if buffer[position] != rune('"') {
						goto l272
					}
					position++
					add(rulePegText, position274)
				}
				if !_rules[ruleAction105]() {
					goto l272
				}
				add(ruleString, position273)
			}
			return true
		l272:
			position, tokenIndex = position272, tokenIndex272
			return false
		},
		/* 50 F64 <- <((<(Digits '.' Digits? Exponent?)> Action106) / (<('.' Digits Exponent?)> Action107) / (<(Digits Exponent)> Action108))> */
		func() bool {
			position277, tokenIndex277 := position, tokenIndex
			{
				position278 := position
				{
					position279, tokenIndex279 := position, tokenIndex
					{
						position281 := position
						if !_rules[ruleDigits]() {
							goto l280
						}
						if buffer[position] != rune('.') {
							goto l280
						}
						position++
						{
							position282, tokenIndex282 := position, tokenIndex
							if !_rules[ruleDigits]() {
								goto l282
							}
							goto l283
						l282:
							position, tokenIndex = position282, tokenIndex282
						}
					l283:
						{
							position284, tokenIndex284 := position, tokenIndex
							if !_rules[ruleExponent]() {
								goto l284
							}
							goto l285
						l284:
							position, tokenIndex = position284, tokenIndex284
						}
					l285:
						add(rulePegText, position281)
					}
					if !_rules[ruleAction106]() {
						goto l280
					}
					goto l279
				l280:
					position, tokenIndex = position279, tokenIndex279
					{
						position287 := position
						if buffer[position] != rune('.') {
							goto l286
						}
						position++
						if !_rules[ruleDigits]() {
							goto l286
						}
						{
							position288, tokenIndex288 := position, tokenIndex
							if !_rules[ruleExponent]() {
								goto l288
							}
							goto l289
						l288:
							position, tokenIndex = position288, tokenIndex288
						}
					l289:
						add(rulePegText, position287)
					}
					if !_rules[ruleAction107]() {
						goto l286
					}
					goto l279
				l286:
					position, tokenIndex = position279, tokenIndex279
					{
						position290 := position
						if !_rules[ruleDigits]() {
							goto l277
						}
						if !_rules[ruleExponent]() {
							goto l277
						}
						add(rulePegText, position290)
					}
					if !_rules[ruleAction108]() {
						goto l277
					}
				}
			l279:
				add(ruleF64, position278)
			}
			return true
		l277:
			position, tokenIndex = position277, tokenIndex277
			return false
		},
		/* 51 I64 <- <(('0' Action109) / (<([1-9] ('_'* [0-9])*)> Action110))> */
		func() bool {
			position291, tokenIndex291 := position, tokenIndex
			{
				position292 := position
				{
					position293, tokenIndex293 := position, tokenIndex
					if buffer[position] != rune('0') {
						goto l294
					}
					position++
					if !_rules[ruleAction109]() {
						goto l294
					}
					goto l293
				l294:
					position, tokenIndex = position293, tokenIndex293
					{
						position295 := position
						if c := buffer[position]; c < rune('1') || c > rune('9') {
							goto l291
						}
						position++
					l296:
						{
							position297, tokenIndex297 := position, tokenIndex
						l298:
							{
								position299, tokenIndex299 := position, tokenIndex
								if buffer[position] != rune('_') {
									goto l299
								}
								position++
								goto l298
							l299:
								position, tokenIndex = position299, tokenIndex299
							}
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l297
							}
							position++
							goto l296
						l297:
							position, tokenIndex = position297, tokenIndex297
						}
						add(rulePegText, position295)
					}
					if !_rules[ruleAction110]() {
						goto l291
					}
				}
			l293:
				add(ruleI64, position292)
			}
			return true
		l291:
			position, tokenIndex = position291, tokenIndex291
			return false
		},
		/* 52 Bool <- <(('t' 'r' 'u' 'e' Action111) / ('f' 'a' 'l' 's' 'e' Action112))> */
		func() bool {
			position300, tokenIndex300 := position, tokenIndex
			{
				position301 := position
				{
					position302, tokenIndex302 := position, tokenIndex
					if buffer[position] != rune('t') {
						goto l303
					}
					position++
					if buffer[position] != rune('r') {
						goto l303
					}
					position++
					if buffer[position] != rune('u') {
						goto l303
					}
					position++
					if buffer[position] != rune('e') {
						goto l303
					}
					position++
					if !_rules[ruleAction111]() {
						goto l303
					}
					goto l302
				l303:
					position, tokenIndex = position302, tokenIndex302
					if buffer[position] != rune('f') {
						goto l300
					}
					position++
					if buffer[position] != rune('a') {
						goto l300
					}
					position++
					if buffer[position] != rune('l') {
						goto l300
					}
					position++
					if buffer[position] != rune('s') {
						goto l300
					}
					position++
					if buffer[position] != rune('e') {
						goto l300
					}
					position++
					if !_rules[ruleAction112]() {
						goto l300
					}
				}
			l302:
				add(ruleBool, position301)
			}
			return true
		l300:
			position, tokenIndex = position300, tokenIndex300
			return false
		},
		/* 53 ReservedKeyword <- <(('l' 'v' 'l') / ('m' 's' 'g') / ('k' 'v') / Bool)> */
		func() bool {
			position304, tokenIndex304 := position, tokenIndex
			{
				position305 := position
				{
					position306, tokenIndex306 := position, tokenIndex
					if buffer[position] != rune('l') {
						goto l307
					}
					position++
					if buffer[position] != rune('v') {
						goto l307
					}
					position++
					if buffer[position] != rune('l') {
						goto l307
					}
					position++
					goto l306
				l307:
					position, tokenIndex = position306, tokenIndex306
					if buffer[position] != rune('m') {
						goto l308
					}
					position++
					if buffer[position] != rune('s') {
						goto l308
					}
					position++
					if buffer[position] != rune('g') {
						goto l308
					}
					position++
					goto l306
				l308:
					position, tokenIndex = position306, tokenIndex306
					if buffer[position] != rune('k') {
						goto l309
					}
					position++
					if buffer[position] != rune('v') {
						goto l309
					}
					position++
					goto l306
				l309:
					position, tokenIndex = position306, tokenIndex306
					if !_rules[ruleBool]() {
						goto l304
					}
				}
			l306:
				add(ruleReservedKeyword, position305)
			}
			return true
		l304:
			position, tokenIndex = position304, tokenIndex304
			return false
		},
		/* 54 Array <- <(L_BRACKET Action113 (ArrayItem (COMMA ArrayItem)*)? R_BRACKET)> */
		func() bool {
			position310, tokenIndex310 := position, tokenIndex
			{
				position311 := position
				if !_rules[ruleL_BRACKET]() {
					goto l310
				}
				if !_rules[ruleAction113]() {
					goto l310
				}
				{
					position312, tokenIndex312 := position, tokenIndex
					if !_rules[ruleArrayItem]() {
						goto l312
					}
				l314:
					{
						position315, tokenIndex315 := position, tokenIndex
						if !_rules[ruleCOMMA]() {
							goto l315
						}
						if !_rules[ruleArrayItem]() {
							goto l315
						}
						goto l314
					l315:
						position, tokenIndex = position315, tokenIndex315
					}
					goto l313
				l312:
					position, tokenIndex = position312, tokenIndex312
				}
			l313:
				if !_rules[ruleR_BRACKET]() {
					goto l310
				}
				add(ruleArray, position311)
			}
			return true
		l310:
			position, tokenIndex = position310, tokenIndex310
			return false
		},
		/* 55 ArrayItem <- <(Literal Action114)> */
		func() bool {
			position316, tokenIndex316 := position, tokenIndex
			{
				position317 := position
				if !_rules[ruleLiteral]() {
					goto l316
				}
				if !_rules[ruleAction114]() {
					goto l316
				}
				add(ruleArrayItem, position317)
			}
			return true
		l316:
			position, tokenIndex = position316, tokenIndex316
			return false
		},
		/* 56 Object <- <(L_SQUIGGLY Action115 (ObjectItem (COMMA ObjectItem)*)? R_SQUIGGLY)> */
		func() bool {
			position318, tokenIndex318 := position, tokenIndex
			{
				position319 := position
				if !_rules[ruleL_SQUIGGLY]() {
					goto l318
				}
				if !_rules[ruleAction115]() {
					goto l318
				}
				{
					position320, tokenIndex320 := position, tokenIndex
					if !_rules[ruleObjectItem]() {
						goto l320
					}
				l322:
					{
						position323, tokenIndex323 := position, tokenIndex
						if !_rules[ruleCOMMA]() {
							goto l323
						}
						if !_rules[ruleObjectItem]() {
							goto l323
						}
						goto l322
					l323:
						position, tokenIndex = position323, tokenIndex323
					}
					goto l321
				l320:
					position, tokenIndex = position320, tokenIndex320
				}
			l321:
				if !_rules[ruleR_SQUIGGLY]() {
					goto l318
				}
				add(ruleObject, position319)
			}
			return true
		l318:
			position, tokenIndex = position318, tokenIndex318
			return false
		},
		/* 57 ObjectItem <- <(ObjectKey COLON Literal Action116)> */
		func() bool {
			position324, tokenIndex324 := position, tokenIndex
			{
				position325 := position
				if !_rules[ruleObjectKey]() {
					goto l324
				}
				if !_rules[ruleCOLON]() {
					goto l324
				}
				if !_rules[ruleLiteral]() {
					goto l324
				}
				if !_rules[ruleAction116]() {
					goto l324
				}
				add(ruleObjectItem, position325)
			}
			return true
		l324:
			position, tokenIndex = position324, tokenIndex324
			return false
		},
		/* 58 ObjectKey <- <(String Action117)> */
		func() bool {
			position326, tokenIndex326 := position, tokenIndex
			{
				position327 := position
				if !_rules[ruleString]() {
					goto l326
				}
				if !_rules[ruleAction117]() {
					goto l326
				}
				add(ruleObjectKey, position327)
			}
			return true
		l326:
			position, tokenIndex = position326, tokenIndex326
			return false
		},
		/* 59 Duration <- <((F64 <(('u' 's') / ('µ' 's') / ('m' 's') / 's' / 'm' / 'h' / 'd' / 'w')> Action118) / (I64 <(('n' 's') / ('u' 's') / ('µ' 's') / ('m' 's') / 's' / 'm' / 'h' / 'd' / 'w')> Action119))> */
		func() bool {
			position328, tokenIndex328 := position, tokenIndex
			{
				position329 := position
				{
					position330, tokenIndex330 := position, tokenIndex
					if !_rules[ruleF64]() {
						goto l331
					}
					{
						position332 := position
						{
							position333, tokenIndex333 := position, tokenIndex
							if buffer[position] != rune('u') {
								goto l334
							}
							position++
							if buffer[position] != rune('s') {
								goto l334
							}
							position++
							goto l333
						l334:
							position, tokenIndex = position333, tokenIndex333
							if buffer[position] != rune('µ') {
								goto l335
							}
							position++
							if buffer[position] != rune('s') {
								goto l335
							}
							position++
							goto l333
						l335:
							position, tokenIndex = position333, tokenIndex333
							if buffer[position] != rune('m') {
								goto l336
							}
							position++
							if buffer[position] != rune('s') {
								goto l336
							}
							position++
							goto l333
						l336:
							position, tokenIndex = position333, tokenIndex333
							if buffer[position] != rune('s') {
								goto l337
							}
							position++
							goto l333
						l337:
							position, tokenIndex = position333, tokenIndex333
							if buffer[position] != rune('m') {
								goto l338
							}
							position++
							goto l333
						l338:
							position, tokenIndex = position333, tokenIndex333
							if buffer[position] != rune('h') {
								goto l339
							}
							position++
							goto l333
						l339:
							position, tokenIndex = position333, tokenIndex333
							if buffer[position] != rune('d') {
								goto l340
							}
							position++
							goto l333
						l340:
							position, tokenIndex = position333, tokenIndex333
							if buffer[position] != rune('w') {
								goto l331
							}
							position++
						}
					l333:
						add(rulePegText, position332)
					}
					if !_rules[ruleAction118]() {
						goto l331
					}
					goto l330
				l331:
					position, tokenIndex = position330, tokenIndex330
					if !_rules[ruleI64]() {
						goto l328
					}
					{
						position341 := position
						{
							position342, tokenIndex342 := position, tokenIndex
							if buffer[position] != rune('n') {
								goto l343
							}
							position++
							if buffer[position] != rune('s') {
								goto l343
							}
							position++
							goto l342
						l343:
							position, tokenIndex = position342, tokenIndex342
							if buffer[position] != rune('u') {
								goto l344
							}
							position++
							if buffer[position] != rune('s') {
								goto l344
							}
							position++
							goto l342
						l344:
							position, tokenIndex = position342, tokenIndex342
							if buffer[position] != rune('µ') {
								goto l345
							}
							position++
							if buffer[position] != rune('s') {
								goto l345
							}
							position++
							goto l342
						l345:
							position, tokenIndex = position342, tokenIndex342
							if buffer[position] != rune('m') {
								goto l346
							}
							position++
							if buffer[position] != rune('s') {
								goto l346
							}
							position++
							goto l342
						l346:
							position, tokenIndex = position342, tokenIndex342
							if buffer[position] != rune('s') {
								goto l347
							}
							position++
							goto l342
						l347:
							position, tokenIndex = position342, tokenIndex342
							if buffer[position] != rune('m') {
								goto l348
							}
							position++
							goto l342
						l348:
							position, tokenIndex = position342, tokenIndex342
							if buffer[position] != rune('h') {
								goto l349
							}
							position++
							goto l342
						l349:
							position, tokenIndex = position342, tokenIndex342
							if buffer[position] != rune('d') {
								goto l350
							}
							position++
							goto l342
						l350:
							position, tokenIndex = position342, tokenIndex342
							if buffer[position] != rune('w') {
								goto l328
							}
							position++
						}
					l342:
						add(rulePegText, position341)
					}
					if !_rules[ruleAction119]() {
						goto l328
					}
				}
			l330:
				add(ruleDuration, position329)
			}
			return true
		l328:
			position, tokenIndex = position328, tokenIndex328
			return false
		},
		/* 60 Timestamp <- <(<RFC3339Nano> Action120)> */
		func() bool {
			position351, tokenIndex351 := position, tokenIndex
			{
				position352 := position
				{
					position353 := position
					if !_rules[ruleRFC3339Nano]() {
						goto l351
					}
					add(rulePegText, position353)
				}
				if !_rules[ruleAction120]() {
					goto l351
				}
				add(ruleTimestamp, position352)
			}
			return true
		l351:
			position, tokenIndex = position351, tokenIndex351
			return false
		},
		/* 61 DoubleQuoteStringChar <- <(('\\' ('\'' / '"' / '?' / '\\' / '%' / 'a' / 'b' / 'f' / 'n' / 'r' / 't' / 'v')) / (!('"' / '\n' / '\\') .))> */
		func() bool {
			position354, tokenIndex354 := position, tokenIndex
			{
				position355 := position
				{
					position356, tokenIndex356 := position, tokenIndex
					if buffer[position] != rune('\\') {
						goto l357
					}
					position++
					{
						position358, tokenIndex358 := position, tokenIndex
						if buffer[position] != rune('\'') {
							goto l359
						}
						position++
						goto l358
					l359:
						position, tokenIndex = position358, tokenIndex358
						if buffer[position] != rune('"') {
							goto l360
						}
						position++
						goto l358
					l360:
						position, tokenIndex = position358, tokenIndex358
						if buffer[position] != rune('?') {
							goto l361
						}
						position++
						goto l358
					l361:
						position, tokenIndex = position358, tokenIndex358
						if buffer[position] != rune('\\') {
							goto l362
						}
						position++
						goto l358
					l362:
						position, tokenIndex = position358, tokenIndex358
						if buffer[position] != rune('%') {
							goto l363
						}
						position++
						goto l358
					l363:
						position, tokenIndex = position358, tokenIndex358
						if buffer[position] != rune('a') {
							goto l364
						}
						position++
						goto l358
					l364:
						position, tokenIndex = position358, tokenIndex358
						if buffer[position] != rune('b') {
							goto l365
						}
						position++
						goto l358
					l365:
						position, tokenIndex = position358, tokenIndex358
						if buffer[position] != rune('f') {
							goto l366
						}
						position++
						goto l358
					l366:
						position, tokenIndex = position358, tokenIndex358
						if buffer[position] != rune('n') {
							goto l367
						}
						position++
						goto l358
					l367:
						position, tokenIndex = position358, tokenIndex358
						if buffer[position] != rune('r') {
							goto l368
						}
						position++
						goto l358
					l368:
						position, tokenIndex = position358, tokenIndex358
						if buffer[position] != rune('t') {
							goto l369
						}
						position++
						goto l358
					l369:
						position, tokenIndex = position358, tokenIndex358
						if buffer[position] != rune('v') {
							goto l357
						}
						position++
					}
				l358:
					goto l356
				l357:
					position, tokenIndex = position356, tokenIndex356
					{
						position370, tokenIndex370 := position, tokenIndex
						{
							position371, tokenIndex371 := position, tokenIndex
							if buffer[position] != rune('"') {
								goto l372
							}
							position++
							goto l371
						l372:
							position, tokenIndex = position371, tokenIndex371
							if buffer[position] != rune('\n') {
								goto l373
							}
							position++
							goto l371
						l373:
							position, tokenIndex = position371, tokenIndex371
							if buffer[position] != rune('\\') {
								goto l370
							}
							position++
						}
					l371:
						goto l354
					l370:
						position, tokenIndex = position370, tokenIndex370
					}
					if !matchDot() {
						goto l354
					}
				}
			l356:
				add(ruleDoubleQuoteStringChar, position355)
			}
			return true
		l354:
			position, tokenIndex = position354, tokenIndex354
			return false
		},
		/* 62 Exponent <- <(('e' / 'E') ('+' / '-')? Digits)> */
		func() bool {
			position374, tokenIndex374 := position, tokenIndex
			{
				position375 := position
				{
					position376, tokenIndex376 := position, tokenIndex
					if buffer[position] != rune('e') {
						goto l377
					}
					position++
					goto l376
				l377:
					position, tokenIndex = position376, tokenIndex376
					if buffer[position] != rune('E') {
						goto l374
					}
					position++
				}
			l376:
				{
					position378, tokenIndex378 := position, tokenIndex
					{
						position380, tokenIndex380 := position, tokenIndex
						if buffer[position] != rune('+') {
							goto l381
						}
						position++
						goto l380
					l381:
						position, tokenIndex = position380, tokenIndex380
						if buffer[position] != rune('-') {
							goto l378
						}
						position++
					}
				l380:
					goto l379
				l378:
					position, tokenIndex = position378, tokenIndex378
				}
			l379:
				if !_rules[ruleDigits]() {
					goto l374
				}
				add(ruleExponent, position375)
			}
			return true
		l374:
			position, tokenIndex = position374, tokenIndex374
			return false
		},
		/* 63 Digits <- <([0-9] ('_'* [0-9])*)> */
		func() bool {
			position382, tokenIndex382 := position, tokenIndex
			{
				position383 := position
				if c := buffer[position]; c < rune('0') || c > rune('9') {
					goto l382
				}
				position++
			l384:
				{
					position385, tokenIndex385 := position, tokenIndex
				l386:
					{
						position387, tokenIndex387 := position, tokenIndex
						if buffer[position] != rune('_') {
							goto l387
						}
						position++
						goto l386
					l387:
						position, tokenIndex = position387, tokenIndex387
					}
					if c := buffer[position]; c < rune('0') || c > rune('9') {
						goto l385
					}
					position++
					goto l384
				l385:
					position, tokenIndex = position385, tokenIndex385
				}
				add(ruleDigits, position383)
			}
			return true
		l382:
			position, tokenIndex = position382, tokenIndex382
			return false
		},
		/* 64 RFC3339Nano <- <(RFC3339NanoDate 'T' RFC3339NanoTime RFC3339NanoTimezone)> */
		func() bool {
			position388, tokenIndex388 := position, tokenIndex
			{
				position389 := position
				if !_rules[ruleRFC3339NanoDate]() {
					goto l388
				}
				if buffer[position] != rune('T') {
					goto l388
				}
				position++
				if !_rules[ruleRFC3339NanoTime]() {
					goto l388
				}
				if !_rules[ruleRFC3339NanoTimezone]() {
					goto l388
				}
				add(ruleRFC3339Nano, position389)
			}
			return true
		l388:
			position, tokenIndex = position388, tokenIndex388
			return false
		},
		/* 65 RFC3339NanoDate <- <(Number '-' Number '-' Number)> */
		func() bool {
			position390, tokenIndex390 := position, tokenIndex
			{
				position391 := position
				if !_rules[ruleNumber]() {
					goto l390
				}
				if buffer[position] != rune('-') {
					goto l390
				}
				position++
				if !_rules[ruleNumber]() {
					goto l390
				}
				if buffer[position] != rune('-') {
					goto l390
				}
				position++
				if !_rules[ruleNumber]() {
					goto l390
				}
				add(ruleRFC3339NanoDate, position391)
			}
			return true
		l390:
			position, tokenIndex = position390, tokenIndex390
			return false
		},
		/* 66 RFC3339NanoTime <- <(Number ':' Number ':' Number ('.' Number)?)> */
		func() bool {
			position392, tokenIndex392 := position, tokenIndex
			{
				position393 := position
				if !_rules[ruleNumber]() {
					goto l392
				}
				if buffer[position] != rune(':') {
					goto l392
				}
				position++
				if !_rules[ruleNumber]() {
					goto l392
				}
				if buffer[position] != rune(':') {
					goto l392
				}
				position++
				if !_rules[ruleNumber]() {
					goto l392
				}
				{
					position394, tokenIndex394 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l394
					}
					position++
					if !_rules[ruleNumber]() {
						goto l394
					}
					goto l395
				l394:
					position, tokenIndex = position394, tokenIndex394
				}
			l395:
				add(ruleRFC3339NanoTime, position393)
			}
			return true
		l392:
			position, tokenIndex = position392, tokenIndex392
			return false
		},
		/* 67 RFC3339NanoTimezone <- <('Z' / ('+' Number ':' Number))> */
		func() bool {
			position396, tokenIndex396 := position, tokenIndex
			{
				position397 := position
				{
					position398, tokenIndex398 := position, tokenIndex
					if buffer[position] != rune('Z') {
						goto l399
					}
					position++
					goto l398
				l399:
					position, tokenIndex = position398, tokenIndex398
					if buffer[position] != rune('+') {
						goto l396
					}
					position++
					if !_rules[ruleNumber]() {
						goto l396
					}
					if buffer[position] != rune(':') {
						goto l396
					}
					position++
					if !_rules[ruleNumber]() {
						goto l396
					}
				}
			l398:
				add(ruleRFC3339NanoTimezone, position397)
			}
			return true
		l396:
			position, tokenIndex = position396, tokenIndex396
			return false
		},
		/* 68 Number <- <<[0-9]+>> */
		func() bool {
			position400, tokenIndex400 := position, tokenIndex
			{
				position401 := position
				{
					position402 := position
					if c := buffer[position]; c < rune('0') || c > rune('9') {
						goto l400
					}
					position++
				l403:
					{
						position404, tokenIndex404 := position, tokenIndex
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l404
						}
						position++
						goto l403
					l404:
						position, tokenIndex = position404, tokenIndex404
					}
					add(rulePegText, position402)
				}
				add(ruleNumber, position401)
			}
			return true
		l400:
			position, tokenIndex = position400, tokenIndex400
			return false
		},
		/* 69 NOT <- <('!' Space)> */
		func() bool {
			position405, tokenIndex405 := position, tokenIndex
			{
				position406 := position
				if buffer[position] != rune('!') {
					goto l405
				}
				position++
				if !_rules[ruleSpace]() {
					goto l405
				}
				add(ruleNOT, position406)
			}
			return true
		l405:
			position, tokenIndex = position405, tokenIndex405
			return false
		},
		/* 70 NEG <- <('-' Space)> */
		func() bool {
			position407, tokenIndex407 := position, tokenIndex
			{
				position408 := position
				if buffer[position] != rune('-') {
					goto l407
				}
				position++
				if !_rules[ruleSpace]() {
					goto l407
				}
				add(ruleNEG, position408)
			}
			return true
		l407:
			position, tokenIndex = position407, tokenIndex407
			return false
		},
		/* 71 NUM_ADD <- <('+' Space)> */
		func() bool {
			position409, tokenIndex409 := position, tokenIndex
			{
				position410 := position
				if buffer[position] != rune('+') {
					goto l409
				}
				position++
				if !_rules[ruleSpace]() {
					goto l409
				}
				add(ruleNUM_ADD, position410)
			}
			return true
		l409:
			position, tokenIndex = position409, tokenIndex409
			return false
		},
		/* 72 NUM_SUB <- <('-' Space)> */
		func() bool {
			position411, tokenIndex411 := position, tokenIndex
			{
				position412 := position
				if buffer[position] != rune('-') {
					goto l411
				}
				position++
				if !_rules[ruleSpace]() {
					goto l411
				}
				add(ruleNUM_SUB, position412)
			}
			return true
		l411:
			position, tokenIndex = position411, tokenIndex411
			return false
		},
		/* 73 NUM_DIV <- <('/' Space)> */
		func() bool {
			position413, tokenIndex413 := position, tokenIndex
			{
				position414 := position
				if buffer[position] != rune('/') {
					goto l413
				}
				position++
				if !_rules[ruleSpace]() {
					goto l413
				}
				add(ruleNUM_DIV, position414)
			}
			return true
		l413:
			position, tokenIndex = position413, tokenIndex413
			return false
		},
		/* 74 NUM_MUL <- <('*' Space)> */
		func() bool {
			position415, tokenIndex415 := position, tokenIndex
			{
				position416 := position
				if buffer[position] != rune('*') {
					goto l415
				}
				position++
				if !_rules[ruleSpace]() {
					goto l415
				}
				add(ruleNUM_MUL, position416)
			}
			return true
		l415:
			position, tokenIndex = position415, tokenIndex415
			return false
		},
		/* 75 LOG_AND <- <('&' '&' Space)> */
		func() bool {
			position417, tokenIndex417 := position, tokenIndex
			{
				position418 := position
				if buffer[position] != rune('&') {
					goto l417
				}
				position++
				if buffer[position] != rune('&') {
					goto l417
				}
				position++
				if !_rules[ruleSpace]() {
					goto l417
				}
				add(ruleLOG_AND, position418)
			}
			return true
		l417:
			position, tokenIndex = position417, tokenIndex417
			return false
		},
		/* 76 LOG_OR <- <('|' '|' Space)> */
		func() bool {
			position419, tokenIndex419 := position, tokenIndex
			{
				position420 := position
				if buffer[position] != rune('|') {
					goto l419
				}
				position++
				if buffer[position] != rune('|') {
					goto l419
				}
				position++
				if !_rules[ruleSpace]() {
					goto l419
				}
				add(ruleLOG_OR, position420)
			}
			return true
		l419:
			position, tokenIndex = position419, tokenIndex419
			return false
		},
		/* 77 CMP_EQ <- <('=' '=' Space)> */
		func() bool {
			position421, tokenIndex421 := position, tokenIndex
			{
				position422 := position
				if buffer[position] != rune('=') {
					goto l421
				}
				position++
				if buffer[position] != rune('=') {
					goto l421
				}
				position++
				if !_rules[ruleSpace]() {
					goto l421
				}
				add(ruleCMP_EQ, position422)
			}
			return true
		l421:
			position, tokenIndex = position421, tokenIndex421
			return false
		},
		/* 78 CMP_NOTEQ <- <('!' '=' Space)> */
		func() bool {
			position423, tokenIndex423 := position, tokenIndex
			{
				position424 := position
				if buffer[position] != rune('!') {
					goto l423
				}
				position++
				if buffer[position] != rune('=') {
					goto l423
				}
				position++
				if !_rules[ruleSpace]() {
					goto l423
				}
				add(ruleCMP_NOTEQ, position424)
			}
			return true
		l423:
			position, tokenIndex = position423, tokenIndex423
			return false
		},
		/* 79 CMP_GT <- <('>' Space)> */
		func() bool {
			position425, tokenIndex425 := position, tokenIndex
			{
				position426 := position
				if buffer[position] != rune('>') {
					goto l425
				}
				position++
				if !_rules[ruleSpace]() {
					goto l425
				}
				add(ruleCMP_GT, position426)
			}
			return true
		l425:
			position, tokenIndex = position425, tokenIndex425
			return false
		},
		/* 80 CMP_GTE <- <('>' '=' Space)> */
		func() bool {
			position427, tokenIndex427 := position, tokenIndex
			{
				position428 := position
				if buffer[position] != rune('>') {
					goto l427
				}
				position++
				if buffer[position] != rune('=') {
					goto l427
				}
				position++
				if !_rules[ruleSpace]() {
					goto l427
				}
				add(ruleCMP_GTE, position428)
			}
			return true
		l427:
			position, tokenIndex = position427, tokenIndex427
			return false
		},
		/* 81 CMP_LT <- <('<' Space)> */
		func() bool {
			position429, tokenIndex429 := position, tokenIndex
			{
				position430 := position
				if buffer[position] != rune('<') {
					goto l429
				}
				position++
				if !_rules[ruleSpace]() {
					goto l429
				}
				add(ruleCMP_LT, position430)
			}
			return true
		l429:
			position, tokenIndex = position429, tokenIndex429
			return false
		},
		/* 82 CMP_LTE <- <('<' '=' Space)> */
		func() bool {
			position431, tokenIndex431 := position, tokenIndex
			{
				position432 := position
				if buffer[position] != rune('<') {
					goto l431
				}
				position++
				if buffer[position] != rune('=') {
					goto l431
				}
				position++
				if !_rules[ruleSpace]() {
					goto l431
				}
				add(ruleCMP_LTE, position432)
			}
			return true
		l431:
			position, tokenIndex = position431, tokenIndex431
			return false
		},
		/* 83 SET_IN <- <('i' 'n' Space)> */
		func() bool {
			position433, tokenIndex433 := position, tokenIndex
			{
				position434 := position
				if buffer[position] != rune('i') {
					goto l433
				}
				position++
				if buffer[position] != rune('n') {
					goto l433
				}
				position++
				if !_rules[ruleSpace]() {
					goto l433
				}
				add(ruleSET_IN, position434)
			}
			return true
		l433:
			position, tokenIndex = position433, tokenIndex433
			return false
		},
		/* 84 SET_NOTIN <- <('n' 'o' 't' ' ' 'i' 'n' Space)> */
		func() bool {
			position435, tokenIndex435 := position, tokenIndex
			{
				position436 := position
				if buffer[position] != rune('n') {
					goto l435
				}
				position++
				if buffer[position] != rune('o') {
					goto l435
				}
				position++
				if buffer[position] != rune('t') {
					goto l435
				}
				position++
				if buffer[position] != rune(' ') {
					goto l435
				}
				position++
				if buffer[position] != rune('i') {
					goto l435
				}
				position++
				if buffer[position] != rune('n') {
					goto l435
				}
				position++
				if !_rules[ruleSpace]() {
					goto l435
				}
				add(ruleSET_NOTIN, position436)
			}
			return true
		l435:
			position, tokenIndex = position435, tokenIndex435
			return false
		},
		/* 85 PIPE <- <('|' Space)> */
		func() bool {
			position437, tokenIndex437 := position, tokenIndex
			{
				position438 := position
				if buffer[position] != rune('|') {
					goto l437
				}
				position++
				if !_rules[ruleSpace]() {
					goto l437
				}
				add(rulePIPE, position438)
			}
			return true
		l437:
			position, tokenIndex = position437, tokenIndex437
			return false
		},
		/* 86 L_PARENS <- <('(' Space)> */
		func() bool {
			position439, tokenIndex439 := position, tokenIndex
			{
				position440 := position
				if buffer[position] != rune('(') {
					goto l439
				}
				position++
				if !_rules[ruleSpace]() {
					goto l439
				}
				add(ruleL_PARENS, position440)
			}
			return true
		l439:
			position, tokenIndex = position439, tokenIndex439
			return false
		},
		/* 87 R_PARENS <- <(')' Space)> */
		func() bool {
			position441, tokenIndex441 := position, tokenIndex
			{
				position442 := position
				if buffer[position] != rune(')') {
					goto l441
				}
				position++
				if !_rules[ruleSpace]() {
					goto l441
				}
				add(ruleR_PARENS, position442)
			}
			return true
		l441:
			position, tokenIndex = position441, tokenIndex441
			return false
		},
		/* 88 L_BRACKET <- <('[' Space)> */
		func() bool {
			position443, tokenIndex443 := position, tokenIndex
			{
				position444 := position
				if buffer[position] != rune('[') {
					goto l443
				}
				position++
				if !_rules[ruleSpace]() {
					goto l443
				}
				add(ruleL_BRACKET, position444)
			}
			return true
		l443:
			position, tokenIndex = position443, tokenIndex443
			return false
		},
		/* 89 R_BRACKET <- <(']' Space)> */
		func() bool {
			position445, tokenIndex445 := position, tokenIndex
			{
				position446 := position
				if buffer[position] != rune(']') {
					goto l445
				}
				position++
				if !_rules[ruleSpace]() {
					goto l445
				}
				add(ruleR_BRACKET, position446)
			}
			return true
		l445:
			position, tokenIndex = position445, tokenIndex445
			return false
		},
		/* 90 L_SQUIGGLY <- <('{' Space)> */
		func() bool {
			position447, tokenIndex447 := position, tokenIndex
			{
				position448 := position
				if buffer[position] != rune('{') {
					goto l447
				}
				position++
				if !_rules[ruleSpace]() {
					goto l447
				}
				add(ruleL_SQUIGGLY, position448)
			}
			return true
		l447:
			position, tokenIndex = position447, tokenIndex447
			return false
		},
		/* 91 R_SQUIGGLY <- <'}'> */
		func() bool {
			position449, tokenIndex449 := position, tokenIndex
			{
				position450 := position
				if buffer[position] != rune('}') {
					goto l449
				}
				position++
				add(ruleR_SQUIGGLY, position450)
			}
			return true
		l449:
			position, tokenIndex = position449, tokenIndex449
			return false
		},
		/* 92 COLON <- <(':' Space)> */
		func() bool {
			position451, tokenIndex451 := position, tokenIndex
			{
				position452 := position
				if buffer[position] != rune(':') {
					goto l451
				}
				position++
				if !_rules[ruleSpace]() {
					goto l451
				}
				add(ruleCOLON, position452)
			}
			return true
		l451:
			position, tokenIndex = position451, tokenIndex451
			return false
		},
		/* 93 COMMA <- <(',' Space)> */
		func() bool {
			position453, tokenIndex453 := position, tokenIndex
			{
				position454 := position
				if buffer[position] != rune(',') {
					goto l453
				}
				position++
				if !_rules[ruleSpace]() {
					goto l453
				}
				add(ruleCOMMA, position454)
			}
			return true
		l453:
			position, tokenIndex = position453, tokenIndex453
			return false
		},
		/* 94 Space <- <Whitespace*> */
		func() bool {
			{
				position456 := position
			l457:
				{
					position458, tokenIndex458 := position, tokenIndex
					if !_rules[ruleWhitespace]() {
						goto l458
					}
					goto l457
				l458:
					position, tokenIndex = position458, tokenIndex458
				}
				add(ruleSpace, position456)
			}
			return true
		},
		/* 95 MustSpace <- <Whitespace+> */
		func() bool {
			position459, tokenIndex459 := position, tokenIndex
			{
				position460 := position
				if !_rules[ruleWhitespace]() {
					goto l459
				}
			l461:
				{
					position462, tokenIndex462 := position, tokenIndex
					if !_rules[ruleWhitespace]() {
						goto l462
					}
					goto l461
				l462:
					position, tokenIndex = position462, tokenIndex462
				}
				add(ruleMustSpace, position460)
			}
			return true
		l459:
			position, tokenIndex = position459, tokenIndex459
			return false
		},
		/* 96 Whitespace <- <(' ' / '\t' / EOL)> */
		func() bool {
			position463, tokenIndex463 := position, tokenIndex
			{
				position464 := position
				{
					position465, tokenIndex465 := position, tokenIndex
					if buffer[position] != rune(' ') {
						goto l466
					}
					position++
					goto l465
				l466:
					position, tokenIndex = position465, tokenIndex465
					if buffer[position] != rune('\t') {
						goto l467
					}
					position++
					goto l465
				l467:
					position, tokenIndex = position465, tokenIndex465
					if !_rules[ruleEOL]() {
						goto l463
					}
				}
			l465:
				add(ruleWhitespace, position464)
			}
			return true
		l463:
			position, tokenIndex = position463, tokenIndex463
			return false
		},
		/* 97 EOL <- <(('\r' '\n') / '\n' / '\r')> */
		func() bool {
			position468, tokenIndex468 := position, tokenIndex
			{
				position469 := position
				{
					position470, tokenIndex470 := position, tokenIndex
					if buffer[position] != rune('\r') {
						goto l471
					}
					position++
					if buffer[position] != rune('\n') {
						goto l471
					}
					position++
					goto l470
				l471:
					position, tokenIndex = position470, tokenIndex470
					if buffer[position] != rune('\n') {
						goto l472
					}
					position++
					goto l470
				l472:
					position, tokenIndex = position470, tokenIndex470
					if buffer[position] != rune('\r') {
						goto l468
					}
					position++
				}
			l470:
				add(ruleEOL, position469)
			}
			return true
		l468:
			position, tokenIndex = position468, tokenIndex468
			return false
		},
		/* 98 EOF <- <!.> */
		func() bool {
			position473, tokenIndex473 := position, tokenIndex
			{
				position474 := position
				{
					position475, tokenIndex475 := position, tokenIndex
					if !matchDot() {
						goto l475
					}
					goto l473
				l475:
					position, tokenIndex = position475, tokenIndex475
				}
				add(ruleEOF, position474)
			}
			return true
		l473:
			position, tokenIndex = position473, tokenIndex473
			return false
		},
		/* 100 Action0 <- <{ p.SetQuery(p.Stmts) }> */
		func() bool {
			{
				add(ruleAction0, position)
			}
			return true
		},
		/* 101 Action1 <- <{ p.SetQuery(p.Stmts) }> */
		func() bool {
			{
				add(ruleAction1, position)
			}
			return true
		},
		/* 102 Action2 <- <{ p.SetFrom(p.popExpr()) }> */
		func() bool {
			{
				add(ruleAction2, position)
			}
			return true
		},
		/* 103 Action3 <- <{ p.SetTo(p.popExpr()) }> */
		func() bool {
			{
				add(ruleAction3, position)
			}
			return true
		},
		/* 104 Action4 <- <{ p.SetContextMachine(typesv1.BinaryOp_CMP_EQ, p.popExpr()) }> */
		func() bool {
			{
				add(ruleAction4, position)
			}
			return true
		},
		/* 105 Action5 <- <{ p.SetContextMachine(typesv1.BinaryOp_CMP_NOTEQ, p.popExpr()) }> */
		func() bool {
			{
				add(ruleAction5, position)
			}
			return true
		},
		/* 106 Action6 <- <{ p.SetContextMachine(typesv1.BinaryOp_SET_IN, p.popExpr()) }> */
		func() bool {
			{
				add(ruleAction6, position)
			}
			return true
		},
		/* 107 Action7 <- <{ p.SetContextMachine(typesv1.BinaryOp_SET_NOTIN, p.popExpr()) }> */
		func() bool {
			{
				add(ruleAction7, position)
			}
			return true
		},
		/* 108 Action8 <- <{ p.SetContextSession(typesv1.BinaryOp_CMP_EQ, p.popExpr()) }> */
		func() bool {
			{
				add(ruleAction8, position)
			}
			return true
		},
		/* 109 Action9 <- <{ p.SetContextSession(typesv1.BinaryOp_CMP_NOTEQ, p.popExpr()) }> */
		func() bool {
			{
				add(ruleAction9, position)
			}
			return true
		},
		/* 110 Action10 <- <{ p.SetContextSession(typesv1.BinaryOp_SET_IN, p.popExpr()) }> */
		func() bool {
			{
				add(ruleAction10, position)
			}
			return true
		},
		/* 111 Action11 <- <{ p.SetContextSession(typesv1.BinaryOp_SET_NOTIN, p.popExpr()) }> */
		func() bool {
			{
				add(ruleAction11, position)
			}
			return true
		},
		/* 112 Action12 <- <{ p.addFilterStatement(p.FilterOp) }> */
		func() bool {
			{
				add(ruleAction12, position)
			}
			return true
		},
		/* 113 Action13 <- <{ p.addSummarizeStatement(p.SummarizeOp) }> */
		func() bool {
			{
				add(ruleAction13, position)
			}
			return true
		},
		/* 114 Action14 <- <{ p.addProjectStatement(p.ProjectOp) }> */
		func() bool {
			{
				add(ruleAction14, position)
			}
			return true
		},
		/* 115 Action15 <- <{ p.addProjectAwayStatement(p.ProjectAwayOp) }> */
		func() bool {
			{
				add(ruleAction15, position)
			}
			return true
		},
		/* 116 Action16 <- <{ p.addProjectKeepStatement(p.ProjectKeepOp) }> */
		func() bool {
			{
				add(ruleAction16, position)
			}
			return true
		},
		/* 117 Action17 <- <{ p.addExtendStatement(p.ExtendOp) }> */
		func() bool {
			{
				add(ruleAction17, position)
			}
			return true
		},
		/* 118 Action18 <- <{ p.addCountStatement(p.CountOp) }> */
		func() bool {
			{
				add(ruleAction18, position)
			}
			return true
		},
		/* 119 Action19 <- <{ p.addDistinctStatement(p.DistinctOp) }> */
		func() bool {
			{
				add(ruleAction19, position)
			}
			return true
		},
		/* 120 Action20 <- <{ p.addSampleStatement(p.SampleOp) }> */
		func() bool {
			{
				add(ruleAction20, position)
			}
			return true
		},
		/* 121 Action21 <- <{ p.addSearchStatement(p.SearchOp) }> */
		func() bool {
			{
				add(ruleAction21, position)
			}
			return true
		},
		/* 122 Action22 <- <{ p.addSortStatement(p.SortOp) }> */
		func() bool {
			{
				add(ruleAction22, position)
			}
			return true
		},
		/* 123 Action23 <- <{ p.addTakeStatement(p.TakeOp) }> */
		func() bool {
			{
				add(ruleAction23, position)
			}
			return true
		},
		/* 124 Action24 <- <{ p.addTopStatement(p.TopOp) }> */
		func() bool {
			{
				add(ruleAction24, position)
			}
			return true
		},
		/* 125 Action25 <- <{ p.setRenderSplitByStatement(p.SplitByOp) }> */
		func() bool {
			{
				add(ruleAction25, position)
			}
			return true
		},
		/* 126 Action26 <- <{ p.setFilterOp(p.popExpr()) }> */
		func() bool {
			{
				add(ruleAction26, position)
			}
			return true
		},
		/* 127 Action27 <- <{ p.startSummarizeOp() }> */
		func() bool {
			{
				add(ruleAction27, position)
			}
			return true
		},
		/* 128 Action28 <- <{ p.startSummarizeParameterNamedFunc(text) }> */
		func() bool {
			{
				add(ruleAction28, position)
			}
			return true
		},
		/* 129 Action29 <- <{ p.endSummarizeParameterNamedFunc(p.popFunc()) }> */
		func() bool {
			{
				add(ruleAction29, position)
			}
			return true
		},
		/* 130 Action30 <- <{ p.addSummarizeParameterUnnamedFunc(p.popFunc()) }> */
		func() bool {
			{
				add(ruleAction30, position)
			}
			return true
		},
		/* 131 Action31 <- <{ p.startSummarizeByUnnamedGroupExpression(text) }> */
		func() bool {
			{
				add(ruleAction31, position)
			}
			return true
		},
		/* 132 Action32 <- <{ p.endSummarizeByUnnamedGroupExpression(p.popExpr()) }> */
		func() bool {
			{
				add(ruleAction32, position)
			}
			return true
		},
		/* 133 Action33 <- <{ p.addSummarizeByUnnamedGroupExpression(p.popExpr()) }> */
		func() bool {
			{
				add(ruleAction33, position)
			}
			return true
		},
		/* 134 Action34 <- <{ p.startProjectOp() }> */
		func() bool {
			{
				add(ruleAction34, position)
			}
			return true
		},
		/* 135 Action35 <- <{ p.startProjectOpArg(text) }> */
		func() bool {
			{
				add(ruleAction35, position)
			}
			return true
		},
		/* 136 Action36 <- <{ p.setProjectOpArgValue(p.popExpr()) }> */
		func() bool {
			{
				add(ruleAction36, position)
			}
			return true
		},
		/* 137 Action37 <- <{ p.startProjectAwayOp() }> */
		func() bool {
			{
				add(ruleAction37, position)
			}
			return true
		},
		/* 138 Action38 <- <{ p.addProjectAwayOpArg(text) }> */
		func() bool {
			{
				add(ruleAction38, position)
			}
			return true
		},
		/* 139 Action39 <- <{ p.startProjectKeepOp() }> */
		func() bool {
			{
				add(ruleAction39, position)
			}
			return true
		},
		/* 140 Action40 <- <{ p.addProjectKeepOpArg(text) }> */
		func() bool {
			{
				add(ruleAction40, position)
			}
			return true
		},
		/* 141 Action41 <- <{ p.startExtendOp() }> */
		func() bool {
			{
				add(ruleAction41, position)
			}
			return true
		},
		/* 142 Action42 <- <{ p.setExtendOpArgColumnName(text) }> */
		func() bool {
			{
				add(ruleAction42, position)
			}
			return true
		},
		/* 143 Action43 <- <{ p.setExtendOpArgValue(p.popExpr()) }> */
		func() bool {
			{
				add(ruleAction43, position)
			}
			return true
		},
		/* 144 Action44 <- <{ p.startCountOp() }> */
		func() bool {
			{
				add(ruleAction44, position)
			}
			return true
		},
		/* 145 Action45 <- <{ p.startDistinctOp() }> */
		func() bool {
			{
				add(ruleAction45, position)
			}
			return true
		},
		/* 146 Action46 <- <{ p.startSampleOp() }> */
		func() bool {
			{
				add(ruleAction46, position)
			}
			return true
		},
		/* 147 Action47 <- <{ p.setSampleOpCount(p.I64) }> */
		func() bool {
			{
				add(ruleAction47, position)
			}
			return true
		},
		/* 148 Action48 <- <{ p.startSearchOp() }> */
		func() bool {
			{
				add(ruleAction48, position)
			}
			return true
		},
		/* 149 Action49 <- <{ p.setSearchOpKindDefault() }> */
		func() bool {
			{
				add(ruleAction49, position)
			}
			return true
		},
		/* 150 Action50 <- <{ p.setSearchOpKindCaseInsensitive() }> */
		func() bool {
			{
				add(ruleAction50, position)
			}
			return true
		},
		/* 151 Action51 <- <{ p.setSearchOpKindCaseSensitive() }> */
		func() bool {
			{
				add(ruleAction51, position)
			}
			return true
		},
		/* 152 Action52 <- <{ p.setSearchOpPredicateLiteral(text) }> */
		func() bool {
			{
				add(ruleAction52, position)
			}
			return true
		},
		/* 153 Action53 <- <{ p.identifier = text }> */
		func() bool {
			{
				add(ruleAction53, position)
			}
			return true
		},
		/* 154 Action54 <- <{ p.setSearchOpPredicateFieldSearch(p.identifier, p.String) }> */
		func() bool {
			{
				add(ruleAction54, position)
			}
			return true
		},
		/* 155 Action55 <- <{ p.setSearchOpPredicateExactSearch(p.identifier, p.String) }> */
		func() bool {
			{
				add(ruleAction55, position)
			}
			return true
		},
		/* 156 Action56 <- <{ p.setSearchOpPredicateRegexSearch(p.identifier, p.String) }> */
		func() bool {
			{
				add(ruleAction56, position)
			}
			return true
		},
		/* 157 Action57 <- <{ p.startSortOp() }> */
		func() bool {
			{
				add(ruleAction57, position)
			}
			return true
		},
		/* 158 Action58 <- <{ p.startSortOpArg(text) }> */
		func() bool {
			{
				add(ruleAction58, position)
			}
			return true
		},
		/* 159 Action59 <- <{ p.setSortOpArgOrderAsc() }> */
		func() bool {
			{
				add(ruleAction59, position)
			}
			return true
		},
		/* 160 Action60 <- <{ p.setSortOpArgOrderDesc() }> */
		func() bool {
			{
				add(ruleAction60, position)
			}
			return true
		},
		/* 161 Action61 <- <{ p.startTakeOp() }> */
		func() bool {
			{
				add(ruleAction61, position)
			}
			return true
		},
		/* 162 Action62 <- <{ p.setTakeOpCount(p.I64) }> */
		func() bool {
			{
				add(ruleAction62, position)
			}
			return true
		},
		/* 163 Action63 <- <{ p.startTopOp() }> */
		func() bool {
			{
				add(ruleAction63, position)
			}
			return true
		},
		/* 164 Action64 <- <{ p.setTopOpCount(p.I64) }> */
		func() bool {
			{
				add(ruleAction64, position)
			}
			return true
		},
		/* 165 Action65 <- <{ p.setTopOpByColumnScalar(p.popExpr()) }> */
		func() bool {
			{
				add(ruleAction65, position)
			}
			return true
		},
		/* 166 Action66 <- <{ p.setTopOpByColumnOrderAsc() }> */
		func() bool {
			{
				add(ruleAction66, position)
			}
			return true
		},
		/* 167 Action67 <- <{ p.setTopOpByColumnOrderDesc() }> */
		func() bool {
			{
				add(ruleAction67, position)
			}
			return true
		},
		/* 168 Action68 <- <{p.startRenderSplitOp()}> */
		func() bool {
			{
				add(ruleAction68, position)
			}
			return true
		},
		/* 169 Action69 <- <{ p.addRenderSplitByOp(p.popExpr()) }> */
		func() bool {
			{
				add(ruleAction69, position)
			}
			return true
		},
		/* 170 Action70 <- <{ rhs, lhs := p.popExpr(), p.popExpr(); p.pushExpr(typesv1.ExprBinary(lhs, typesv1.BinaryOp_NUM_ADD, rhs)) }> */
		func() bool {
			{
				add(ruleAction70, position)
			}
			return true
		},
		/* 171 Action71 <- <{ rhs, lhs := p.popExpr(), p.popExpr(); p.pushExpr(typesv1.ExprBinary(lhs, typesv1.BinaryOp_NUM_SUB, rhs)) }> */
		func() bool {
			{
				add(ruleAction71, position)
			}
			return true
		},
		/* 172 Action72 <- <{ rhs, lhs := p.popExpr(), p.popExpr(); p.pushExpr(typesv1.ExprBinary(lhs, typesv1.BinaryOp_NUM_MUL, rhs)) }> */
		func() bool {
			{
				add(ruleAction72, position)
			}
			return true
		},
		/* 173 Action73 <- <{ rhs, lhs := p.popExpr(), p.popExpr(); p.pushExpr(typesv1.ExprBinary(lhs, typesv1.BinaryOp_NUM_DIV, rhs)) }> */
		func() bool {
			{
				add(ruleAction73, position)
			}
			return true
		},
		/* 174 Action74 <- <{ rhs, lhs := p.popExpr(), p.popExpr(); p.pushExpr(typesv1.ExprBinary(lhs, typesv1.BinaryOp_LOG_AND, rhs)) }> */
		func() bool {
			{
				add(ruleAction74, position)
			}
			return true
		},
		/* 175 Action75 <- <{ rhs, lhs := p.popExpr(), p.popExpr(); p.pushExpr(typesv1.ExprBinary(lhs, typesv1.BinaryOp_LOG_OR, rhs)) }> */
		func() bool {
			{
				add(ruleAction75, position)
			}
			return true
		},
		/* 176 Action76 <- <{ rhs, lhs := p.popExpr(), p.popExpr(); p.pushExpr(typesv1.ExprBinary(lhs, typesv1.BinaryOp_CMP_EQ, rhs)) }> */
		func() bool {
			{
				add(ruleAction76, position)
			}
			return true
		},
		/* 177 Action77 <- <{ rhs, lhs := p.popExpr(), p.popExpr(); p.pushExpr(typesv1.ExprBinary(lhs, typesv1.BinaryOp_CMP_NOTEQ, rhs)) }> */
		func() bool {
			{
				add(ruleAction77, position)
			}
			return true
		},
		/* 178 Action78 <- <{ rhs, lhs := p.popExpr(), p.popExpr(); p.pushExpr(typesv1.ExprBinary(lhs, typesv1.BinaryOp_CMP_GT, rhs)) }> */
		func() bool {
			{
				add(ruleAction78, position)
			}
			return true
		},
		/* 179 Action79 <- <{ rhs, lhs := p.popExpr(), p.popExpr(); p.pushExpr(typesv1.ExprBinary(lhs, typesv1.BinaryOp_CMP_GTE, rhs)) }> */
		func() bool {
			{
				add(ruleAction79, position)
			}
			return true
		},
		/* 180 Action80 <- <{ rhs, lhs := p.popExpr(), p.popExpr(); p.pushExpr(typesv1.ExprBinary(lhs, typesv1.BinaryOp_CMP_LT, rhs)) }> */
		func() bool {
			{
				add(ruleAction80, position)
			}
			return true
		},
		/* 181 Action81 <- <{ rhs, lhs := p.popExpr(), p.popExpr(); p.pushExpr(typesv1.ExprBinary(lhs, typesv1.BinaryOp_CMP_LTE, rhs)) }> */
		func() bool {
			{
				add(ruleAction81, position)
			}
			return true
		},
		/* 182 Action82 <- <{ rhs, lhs := p.popExpr(), p.popExpr(); p.pushExpr(typesv1.ExprBinary(lhs, typesv1.BinaryOp_SET_IN, rhs)) }> */
		func() bool {
			{
				add(ruleAction82, position)
			}
			return true
		},
		/* 183 Action83 <- <{ rhs, lhs := p.popExpr(), p.popExpr(); p.pushExpr(typesv1.ExprBinary(lhs, typesv1.BinaryOp_SET_NOTIN, rhs)) }> */
		func() bool {
			{
				add(ruleAction83, position)
			}
			return true
		},
		/* 184 Action84 <- <{ index, x := p.popExpr(), p.popExpr(); p.pushExpr(typesv1.ExprIndexor(x, index)) }> */
		func() bool {
			{
				add(ruleAction84, position)
			}
			return true
		},
		/* 185 Action85 <- <{ p.pushExpr(typesv1.ExprUnary(typesv1.UnaryOp_NOT, typesv1.ExprLiteral(p.Literal))); p.Literal = nil }> */
		func() bool {
			{
				add(ruleAction85, position)
			}
			return true
		},
		/* 186 Action86 <- <{ arg := p.popExpr(); p.pushExpr(typesv1.ExprUnary(typesv1.UnaryOp_NOT, arg)) }> */
		func() bool {
			{
				add(ruleAction86, position)
			}
			return true
		},
		/* 187 Action87 <- <{ p.pushExpr(typesv1.ExprUnary(typesv1.UnaryOp_NEG, typesv1.ExprLiteral(p.Literal))); p.Literal = nil }> */
		func() bool {
			{
				add(ruleAction87, position)
			}
			return true
		},
		/* 188 Action88 <- <{ arg := p.popExpr(); p.pushExpr(typesv1.ExprUnary(typesv1.UnaryOp_NEG, arg)) }> */
		func() bool {
			{
				add(ruleAction88, position)
			}
			return true
		},
		/* 189 Action89 <- <{ p.pushExpr(typesv1.ExprLiteral(p.Literal)); p.Literal = nil }> */
		func() bool {
			{
				add(ruleAction89, position)
			}
			return true
		},
		/* 190 Action90 <- <{ fn := p.popFunc(); p.pushExpr(typesv1.ExprFuncCall(fn.Name, fn.Args...)) }> */
		func() bool {
			{
				add(ruleAction90, position)
			}
			return true
		},
		/* 191 Action91 <- <{ p.Literal = typesv1.ValStr(p.String) }> */
		func() bool {
			{
				add(ruleAction91, position)
			}
			return true
		},
		/* 192 Action92 <- <{ p.Literal = typesv1.ValDuration(p.Duration) }> */
		func() bool {
			{
				add(ruleAction92, position)
			}
			return true
		},
		/* 193 Action93 <- <{ p.Literal = typesv1.ValTime(p.Timestamp) }> */
		func() bool {
			{
				add(ruleAction93, position)
			}
			return true
		},
		/* 194 Action94 <- <{ p.Literal = typesv1.ValF64(p.F64) }> */
		func() bool {
			{
				add(ruleAction94, position)
			}
			return true
		},
		/* 195 Action95 <- <{ p.Literal = typesv1.ValI64(p.I64) }> */
		func() bool {
			{
				add(ruleAction95, position)
			}
			return true
		},
		/* 196 Action96 <- <{ p.Literal = typesv1.ValBool(p.Bool) }> */
		func() bool {
			{
				add(ruleAction96, position)
			}
			return true
		},
		/* 197 Action97 <- <{ p.Literal = typesv1.ValArr(p.popArray()...) }> */
		func() bool {
			{
				add(ruleAction97, position)
			}
			return true
		},
		/* 198 Action98 <- <{ p.Literal = typesv1.ValObj(p.popObj()...) }> */
		func() bool {
			{
				add(ruleAction98, position)
			}
			return true
		},
		/* 199 Action99 <- <{ p.pushFunc() }> */
		func() bool {
			{
				add(ruleAction99, position)
			}
			return true
		},
		nil,
		/* 201 Action100 <- <{ p.setFuncName(text) }> */
		func() bool {
			{
				add(ruleAction100, position)
			}
			return true
		},
		/* 202 Action101 <- <{ p.addFuncArg(p.popExpr()) }> */
		func() bool {
			{
				add(ruleAction101, position)
			}
			return true
		},
		/* 203 Action102 <- <{ p.pushExpr(typesv1.ExprIdentifier(text)) }> */
		func() bool {
			{
				add(ruleAction102, position)
			}
			return true
		},
		/* 204 Action103 <- <{ p.pushExpr(typesv1.ExprIdentifier(p.String)) }> */
		func() bool {
			{
				add(ruleAction103, position)
			}
			return true
		},
		/* 205 Action104 <- <{ p.pushExpr(typesv1.ExprIdentifier(p.String)) }> */
		func() bool {
			{
				add(ruleAction104, position)
			}
			return true
		},
		/* 206 Action105 <- <{ p.String = p.parseDoubleQuoteString(text) }> */
		func() bool {
			{
				add(ruleAction105, position)
			}
			return true
		},
		/* 207 Action106 <- <{ p.F64 = p.parseFloat64(text) }> */
		func() bool {
			{
				add(ruleAction106, position)
			}
			return true
		},
		/* 208 Action107 <- <{ p.F64 = p.parseFloat64(text) }> */
		func() bool {
			{
				add(ruleAction107, position)
			}
			return true
		},
		/* 209 Action108 <- <{ p.F64 = p.parseFloat64(text) }> */
		func() bool {
			{
				add(ruleAction108, position)
			}
			return true
		},
		/* 210 Action109 <- <{ p.I64 = 0 }> */
		func() bool {
			{
				add(ruleAction109, position)
			}
			return true
		},
		/* 211 Action110 <- <{ p.I64 = p.parseInt64(text) }> */
		func() bool {
			{
				add(ruleAction110, position)
			}
			return true
		},
		/* 212 Action111 <- <{ p.Bool = true }> */
		func() bool {
			{
				add(ruleAction111, position)
			}
			return true
		},
		/* 213 Action112 <- <{ p.Bool = false }> */
		func() bool {
			{
				add(ruleAction112, position)
			}
			return true
		},
		/* 214 Action113 <- <{ p.pushArray() }> */
		func() bool {
			{
				add(ruleAction113, position)
			}
			return true
		},
		/* 215 Action114 <- <{ p.addArrItem(p.Literal); p.Literal = nil }> */
		func() bool {
			{
				add(ruleAction114, position)
			}
			return true
		},
		/* 216 Action115 <- <{ p.pushObj() }> */
		func() bool {
			{
				add(ruleAction115, position)
			}
			return true
		},
		/* 217 Action116 <- <{ p.closeObjItem(p.Literal); p.Literal = nil }> */
		func() bool {
			{
				add(ruleAction116, position)
			}
			return true
		},
		/* 218 Action117 <- <{ p.startObjItem(p.String) }> */
		func() bool {
			{
				add(ruleAction117, position)
			}
			return true
		},
		/* 219 Action118 <- <{ p.Duration = p.parseDurationF64(p.F64, text) }> */
		func() bool {
			{
				add(ruleAction118, position)
			}
			return true
		},
		/* 220 Action119 <- <{ p.Duration = p.parseDurationI64(p.I64, text) }> */
		func() bool {
			{
				add(ruleAction119, position)
			}
			return true
		},
		/* 221 Action120 <- <{ p.Timestamp = p.parseTime(time.RFC3339Nano, text) }> */
		func() bool {
			{
				add(ruleAction120, position)
			}
			return true
		},
	}
	p.rules = _rules
	return nil
}
