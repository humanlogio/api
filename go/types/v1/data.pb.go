// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        (unknown)
// source: types/v1/data.proto

package typesv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Data struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Shape:
	//
	//	*Data_Subqueries
	//	*Data_Tabular
	//	*Data_SingleValue
	//	*Data_ScalarTimeseries
	//	*Data_VectorTimeseries
	Shape         isData_Shape `protobuf_oneof:"shape"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Data) Reset() {
	*x = Data{}
	mi := &file_types_v1_data_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Data) ProtoMessage() {}

func (x *Data) ProtoReflect() protoreflect.Message {
	mi := &file_types_v1_data_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Data.ProtoReflect.Descriptor instead.
func (*Data) Descriptor() ([]byte, []int) {
	return file_types_v1_data_proto_rawDescGZIP(), []int{0}
}

func (x *Data) GetShape() isData_Shape {
	if x != nil {
		return x.Shape
	}
	return nil
}

func (x *Data) GetSubqueries() *Data_SubQueries {
	if x != nil {
		if x, ok := x.Shape.(*Data_Subqueries); ok {
			return x.Subqueries
		}
	}
	return nil
}

func (x *Data) GetTabular() *Tabular {
	if x != nil {
		if x, ok := x.Shape.(*Data_Tabular); ok {
			return x.Tabular
		}
	}
	return nil
}

func (x *Data) GetSingleValue() *Val {
	if x != nil {
		if x, ok := x.Shape.(*Data_SingleValue); ok {
			return x.SingleValue
		}
	}
	return nil
}

func (x *Data) GetScalarTimeseries() *ScalarTimeseries {
	if x != nil {
		if x, ok := x.Shape.(*Data_ScalarTimeseries); ok {
			return x.ScalarTimeseries
		}
	}
	return nil
}

func (x *Data) GetVectorTimeseries() *VectorTimeseries {
	if x != nil {
		if x, ok := x.Shape.(*Data_VectorTimeseries); ok {
			return x.VectorTimeseries
		}
	}
	return nil
}

type isData_Shape interface {
	isData_Shape()
}

type Data_Subqueries struct {
	// SubQueries need to be further queried to obtain actual data.
	Subqueries *Data_SubQueries `protobuf:"bytes,101,opt,name=subqueries,proto3,oneof"`
}

type Data_Tabular struct {
	// tabular is data that has a table header, followed by rows that match the
	// header
	Tabular *Tabular `protobuf:"bytes,201,opt,name=tabular,proto3,oneof"`
}

type Data_SingleValue struct {
	// single_value is a single value
	SingleValue *Val `protobuf:"bytes,301,opt,name=single_value,json=singleValue,proto3,oneof"`
}

type Data_ScalarTimeseries struct {
	// scalar timeseries data is a list of [ts, scalar] where scalar is usually
	// a numeric value
	ScalarTimeseries *ScalarTimeseries `protobuf:"bytes,401,opt,name=scalar_timeseries,json=scalarTimeseries,proto3,oneof"`
}

type Data_VectorTimeseries struct {
	// vector timeseries data is a list of [ts, [scalar0, ..., scalarN]] where
	// scalar is usually a numeric value
	VectorTimeseries *VectorTimeseries `protobuf:"bytes,402,opt,name=vector_timeseries,json=vectorTimeseries,proto3,oneof"`
}

func (*Data_Subqueries) isData_Shape() {}

func (*Data_Tabular) isData_Shape() {}

func (*Data_SingleValue) isData_Shape() {}

func (*Data_ScalarTimeseries) isData_Shape() {}

func (*Data_VectorTimeseries) isData_Shape() {}

type Tabular struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Shape:
	//
	//	*Tabular_LogEvents
	//	*Tabular_FreeForm
	Shape         isTabular_Shape `protobuf_oneof:"shape"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Tabular) Reset() {
	*x = Tabular{}
	mi := &file_types_v1_data_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Tabular) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tabular) ProtoMessage() {}

func (x *Tabular) ProtoReflect() protoreflect.Message {
	mi := &file_types_v1_data_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tabular.ProtoReflect.Descriptor instead.
func (*Tabular) Descriptor() ([]byte, []int) {
	return file_types_v1_data_proto_rawDescGZIP(), []int{1}
}

func (x *Tabular) GetShape() isTabular_Shape {
	if x != nil {
		return x.Shape
	}
	return nil
}

func (x *Tabular) GetLogEvents() *LogEvents {
	if x != nil {
		if x, ok := x.Shape.(*Tabular_LogEvents); ok {
			return x.LogEvents
		}
	}
	return nil
}

func (x *Tabular) GetFreeForm() *Table {
	if x != nil {
		if x, ok := x.Shape.(*Tabular_FreeForm); ok {
			return x.FreeForm
		}
	}
	return nil
}

type isTabular_Shape interface {
	isTabular_Shape()
}

type Tabular_LogEvents struct {
	LogEvents *LogEvents `protobuf:"bytes,201,opt,name=log_events,json=logEvents,proto3,oneof"`
}

type Tabular_FreeForm struct {
	FreeForm *Table `protobuf:"bytes,202,opt,name=free_form,json=freeForm,proto3,oneof"`
}

func (*Tabular_LogEvents) isTabular_Shape() {}

func (*Tabular_FreeForm) isTabular_Shape() {}

type ScalarTimeseries struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// scalars will contain only this type of value
	Type          *VarType           `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Scalars       []*ScalarTimestamp `protobuf:"bytes,3,rep,name=scalars,proto3" json:"scalars,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ScalarTimeseries) Reset() {
	*x = ScalarTimeseries{}
	mi := &file_types_v1_data_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ScalarTimeseries) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScalarTimeseries) ProtoMessage() {}

func (x *ScalarTimeseries) ProtoReflect() protoreflect.Message {
	mi := &file_types_v1_data_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScalarTimeseries.ProtoReflect.Descriptor instead.
func (*ScalarTimeseries) Descriptor() ([]byte, []int) {
	return file_types_v1_data_proto_rawDescGZIP(), []int{2}
}

func (x *ScalarTimeseries) GetType() *VarType {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *ScalarTimeseries) GetScalars() []*ScalarTimestamp {
	if x != nil {
		return x.Scalars
	}
	return nil
}

type LogEvents struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Events        []*IngestedLogEvent    `protobuf:"bytes,1,rep,name=events,proto3" json:"events,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LogEvents) Reset() {
	*x = LogEvents{}
	mi := &file_types_v1_data_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LogEvents) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogEvents) ProtoMessage() {}

func (x *LogEvents) ProtoReflect() protoreflect.Message {
	mi := &file_types_v1_data_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogEvents.ProtoReflect.Descriptor instead.
func (*LogEvents) Descriptor() ([]byte, []int) {
	return file_types_v1_data_proto_rawDescGZIP(), []int{3}
}

func (x *LogEvents) GetEvents() []*IngestedLogEvent {
	if x != nil {
		return x.Events
	}
	return nil
}

type ScalarTimestamp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Ts            *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=ts,proto3" json:"ts,omitempty"`
	Scalar        *Scalar                `protobuf:"bytes,2,opt,name=scalar,proto3" json:"scalar,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ScalarTimestamp) Reset() {
	*x = ScalarTimestamp{}
	mi := &file_types_v1_data_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ScalarTimestamp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScalarTimestamp) ProtoMessage() {}

func (x *ScalarTimestamp) ProtoReflect() protoreflect.Message {
	mi := &file_types_v1_data_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScalarTimestamp.ProtoReflect.Descriptor instead.
func (*ScalarTimestamp) Descriptor() ([]byte, []int) {
	return file_types_v1_data_proto_rawDescGZIP(), []int{4}
}

func (x *ScalarTimestamp) GetTs() *timestamppb.Timestamp {
	if x != nil {
		return x.Ts
	}
	return nil
}

func (x *ScalarTimestamp) GetScalar() *Scalar {
	if x != nil {
		return x.Scalar
	}
	return nil
}

type VectorTimeseries struct {
	state   protoimpl.MessageState `protogen:"open.v1"`
	Context *Obj                   `protobuf:"bytes,1,opt,name=context,proto3" json:"context,omitempty"`
	// vectors will contain only this type of value
	Type          *VarType           `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Vectors       []*VectorTimestamp `protobuf:"bytes,3,rep,name=vectors,proto3" json:"vectors,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VectorTimeseries) Reset() {
	*x = VectorTimeseries{}
	mi := &file_types_v1_data_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VectorTimeseries) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VectorTimeseries) ProtoMessage() {}

func (x *VectorTimeseries) ProtoReflect() protoreflect.Message {
	mi := &file_types_v1_data_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VectorTimeseries.ProtoReflect.Descriptor instead.
func (*VectorTimeseries) Descriptor() ([]byte, []int) {
	return file_types_v1_data_proto_rawDescGZIP(), []int{5}
}

func (x *VectorTimeseries) GetContext() *Obj {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *VectorTimeseries) GetType() *VarType {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *VectorTimeseries) GetVectors() []*VectorTimestamp {
	if x != nil {
		return x.Vectors
	}
	return nil
}

type VectorTimestamp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Ts            *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=ts,proto3" json:"ts,omitempty"`
	Vector        []*Scalar              `protobuf:"bytes,2,rep,name=vector,proto3" json:"vector,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VectorTimestamp) Reset() {
	*x = VectorTimestamp{}
	mi := &file_types_v1_data_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VectorTimestamp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VectorTimestamp) ProtoMessage() {}

func (x *VectorTimestamp) ProtoReflect() protoreflect.Message {
	mi := &file_types_v1_data_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VectorTimestamp.ProtoReflect.Descriptor instead.
func (*VectorTimestamp) Descriptor() ([]byte, []int) {
	return file_types_v1_data_proto_rawDescGZIP(), []int{6}
}

func (x *VectorTimestamp) GetTs() *timestamppb.Timestamp {
	if x != nil {
		return x.Ts
	}
	return nil
}

func (x *VectorTimestamp) GetVector() []*Scalar {
	if x != nil {
		return x.Vector
	}
	return nil
}

type Data_SubQueries struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Queries       []*Query               `protobuf:"bytes,1,rep,name=queries,proto3" json:"queries,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Data_SubQueries) Reset() {
	*x = Data_SubQueries{}
	mi := &file_types_v1_data_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Data_SubQueries) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Data_SubQueries) ProtoMessage() {}

func (x *Data_SubQueries) ProtoReflect() protoreflect.Message {
	mi := &file_types_v1_data_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Data_SubQueries.ProtoReflect.Descriptor instead.
func (*Data_SubQueries) Descriptor() ([]byte, []int) {
	return file_types_v1_data_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Data_SubQueries) GetQueries() []*Query {
	if x != nil {
		return x.Queries
	}
	return nil
}

var File_types_v1_data_proto protoreflect.FileDescriptor

var file_types_v1_data_proto_rawDesc = string([]byte{
	0x0a, 0x13, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x1a,
	0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x17, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x6f, 0x67, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2f, 0x76, 0x31, 0x2f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x16, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x72, 0x61, 0x63, 0x69, 0x6e,
	0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x76,
	0x31, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x82, 0x03,
	0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3b, 0x0a, 0x0a, 0x73, 0x75, 0x62, 0x71, 0x75, 0x65,
	0x72, 0x69, 0x65, 0x73, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x53, 0x75, 0x62, 0x51, 0x75,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x48, 0x00, 0x52, 0x0a, 0x73, 0x75, 0x62, 0x71, 0x75, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x07, 0x74, 0x61, 0x62, 0x75, 0x6c, 0x61, 0x72, 0x18, 0xc9,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x54, 0x61, 0x62, 0x75, 0x6c, 0x61, 0x72, 0x48, 0x00, 0x52, 0x07, 0x74, 0x61, 0x62, 0x75,
	0x6c, 0x61, 0x72, 0x12, 0x33, 0x0a, 0x0c, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0xad, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x69, 0x6e,
	0x67, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x4a, 0x0a, 0x11, 0x73, 0x63, 0x61, 0x6c,
	0x61, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x18, 0x91, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73,
	0x48, 0x00, 0x52, 0x10, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x65,
	0x72, 0x69, 0x65, 0x73, 0x12, 0x4a, 0x0a, 0x11, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x18, 0x92, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x48, 0x00, 0x52, 0x10,
	0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73,
	0x1a, 0x37, 0x0a, 0x0a, 0x53, 0x75, 0x62, 0x51, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x12, 0x29,
	0x0a, 0x07, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x52, 0x07, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x42, 0x07, 0x0a, 0x05, 0x73, 0x68, 0x61,
	0x70, 0x65, 0x22, 0x7a, 0x0a, 0x07, 0x54, 0x61, 0x62, 0x75, 0x6c, 0x61, 0x72, 0x12, 0x35, 0x0a,
	0x0a, 0x6c, 0x6f, 0x67, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0xc9, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f,
	0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x48, 0x00, 0x52, 0x09, 0x6c, 0x6f, 0x67, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x12, 0x2f, 0x0a, 0x09, 0x66, 0x72, 0x65, 0x65, 0x5f, 0x66, 0x6f, 0x72,
	0x6d, 0x18, 0xca, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x08, 0x66, 0x72, 0x65,
	0x65, 0x46, 0x6f, 0x72, 0x6d, 0x42, 0x07, 0x0a, 0x05, 0x73, 0x68, 0x61, 0x70, 0x65, 0x22, 0x6e,
	0x0a, 0x10, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x69,
	0x65, 0x73, 0x12, 0x25, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x61, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x33, 0x0a, 0x07, 0x73, 0x63, 0x61,
	0x6c, 0x61, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x73, 0x22, 0x3f,
	0x0a, 0x09, 0x4c, 0x6f, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x32, 0x0a, 0x06, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4c,
	0x6f, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x22,
	0x67, 0x0a, 0x0f, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x12, 0x2a, 0x0a, 0x02, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x02, 0x74, 0x73, 0x12, 0x28,
	0x0a, 0x06, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72,
	0x52, 0x06, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x22, 0x97, 0x01, 0x0a, 0x10, 0x56, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x12, 0x27, 0x0a,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x52, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x25, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x56, 0x61, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x33, 0x0a,
	0x07, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x76, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x73, 0x22, 0x67, 0x0a, 0x0f, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x2a, 0x0a, 0x02, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x02, 0x74,
	0x73, 0x12, 0x28, 0x0a, 0x06, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x61,
	0x6c, 0x61, 0x72, 0x52, 0x06, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x42, 0x89, 0x01, 0x0a, 0x0c,
	0x63, 0x6f, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x42, 0x09, 0x44, 0x61,
	0x74, 0x61, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x2d, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x68, 0x75, 0x6d, 0x61, 0x6e, 0x6c, 0x6f, 0x67, 0x69, 0x6f,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x6f, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x76, 0x31,
	0x3b, 0x74, 0x79, 0x70, 0x65, 0x73, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x54, 0x58, 0x58, 0xaa, 0x02,
	0x08, 0x54, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x08, 0x54, 0x79, 0x70, 0x65,
	0x73, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x14, 0x54, 0x79, 0x70, 0x65, 0x73, 0x5c, 0x56, 0x31, 0x5c,
	0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x09, 0x54, 0x79,
	0x70, 0x65, 0x73, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_types_v1_data_proto_rawDescOnce sync.Once
	file_types_v1_data_proto_rawDescData []byte
)

func file_types_v1_data_proto_rawDescGZIP() []byte {
	file_types_v1_data_proto_rawDescOnce.Do(func() {
		file_types_v1_data_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_types_v1_data_proto_rawDesc), len(file_types_v1_data_proto_rawDesc)))
	})
	return file_types_v1_data_proto_rawDescData
}

var file_types_v1_data_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_types_v1_data_proto_goTypes = []any{
	(*Data)(nil),                  // 0: types.v1.Data
	(*Tabular)(nil),               // 1: types.v1.Tabular
	(*ScalarTimeseries)(nil),      // 2: types.v1.ScalarTimeseries
	(*LogEvents)(nil),             // 3: types.v1.LogEvents
	(*ScalarTimestamp)(nil),       // 4: types.v1.ScalarTimestamp
	(*VectorTimeseries)(nil),      // 5: types.v1.VectorTimeseries
	(*VectorTimestamp)(nil),       // 6: types.v1.VectorTimestamp
	(*Data_SubQueries)(nil),       // 7: types.v1.Data.SubQueries
	(*Val)(nil),                   // 8: types.v1.Val
	(*Table)(nil),                 // 9: types.v1.Table
	(*VarType)(nil),               // 10: types.v1.VarType
	(*IngestedLogEvent)(nil),      // 11: types.v1.IngestedLogEvent
	(*timestamppb.Timestamp)(nil), // 12: google.protobuf.Timestamp
	(*Scalar)(nil),                // 13: types.v1.Scalar
	(*Obj)(nil),                   // 14: types.v1.Obj
	(*Query)(nil),                 // 15: types.v1.Query
}
var file_types_v1_data_proto_depIdxs = []int32{
	7,  // 0: types.v1.Data.subqueries:type_name -> types.v1.Data.SubQueries
	1,  // 1: types.v1.Data.tabular:type_name -> types.v1.Tabular
	8,  // 2: types.v1.Data.single_value:type_name -> types.v1.Val
	2,  // 3: types.v1.Data.scalar_timeseries:type_name -> types.v1.ScalarTimeseries
	5,  // 4: types.v1.Data.vector_timeseries:type_name -> types.v1.VectorTimeseries
	3,  // 5: types.v1.Tabular.log_events:type_name -> types.v1.LogEvents
	9,  // 6: types.v1.Tabular.free_form:type_name -> types.v1.Table
	10, // 7: types.v1.ScalarTimeseries.type:type_name -> types.v1.VarType
	4,  // 8: types.v1.ScalarTimeseries.scalars:type_name -> types.v1.ScalarTimestamp
	11, // 9: types.v1.LogEvents.events:type_name -> types.v1.IngestedLogEvent
	12, // 10: types.v1.ScalarTimestamp.ts:type_name -> google.protobuf.Timestamp
	13, // 11: types.v1.ScalarTimestamp.scalar:type_name -> types.v1.Scalar
	14, // 12: types.v1.VectorTimeseries.context:type_name -> types.v1.Obj
	10, // 13: types.v1.VectorTimeseries.type:type_name -> types.v1.VarType
	6,  // 14: types.v1.VectorTimeseries.vectors:type_name -> types.v1.VectorTimestamp
	12, // 15: types.v1.VectorTimestamp.ts:type_name -> google.protobuf.Timestamp
	13, // 16: types.v1.VectorTimestamp.vector:type_name -> types.v1.Scalar
	15, // 17: types.v1.Data.SubQueries.queries:type_name -> types.v1.Query
	18, // [18:18] is the sub-list for method output_type
	18, // [18:18] is the sub-list for method input_type
	18, // [18:18] is the sub-list for extension type_name
	18, // [18:18] is the sub-list for extension extendee
	0,  // [0:18] is the sub-list for field type_name
}

func init() { file_types_v1_data_proto_init() }
func file_types_v1_data_proto_init() {
	if File_types_v1_data_proto != nil {
		return
	}
	file_types_v1_logevent_proto_init()
	file_types_v1_query_proto_init()
	file_types_v1_tracing_proto_init()
	file_types_v1_types_proto_init()
	file_types_v1_data_proto_msgTypes[0].OneofWrappers = []any{
		(*Data_Subqueries)(nil),
		(*Data_Tabular)(nil),
		(*Data_SingleValue)(nil),
		(*Data_ScalarTimeseries)(nil),
		(*Data_VectorTimeseries)(nil),
	}
	file_types_v1_data_proto_msgTypes[1].OneofWrappers = []any{
		(*Tabular_LogEvents)(nil),
		(*Tabular_FreeForm)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_types_v1_data_proto_rawDesc), len(file_types_v1_data_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_types_v1_data_proto_goTypes,
		DependencyIndexes: file_types_v1_data_proto_depIdxs,
		MessageInfos:      file_types_v1_data_proto_msgTypes,
	}.Build()
	File_types_v1_data_proto = out.File
	file_types_v1_data_proto_goTypes = nil
	file_types_v1_data_proto_depIdxs = nil
}
