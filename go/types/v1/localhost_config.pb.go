// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        (unknown)
// source: types/v1/localhost_config.proto

package typesv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	structpb "google.golang.org/protobuf/types/known/structpb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type FormatConfig_ColorMode int32

const (
	FormatConfig_COLORMODE_AUTO     FormatConfig_ColorMode = 0
	FormatConfig_COLORMODE_ENABLED  FormatConfig_ColorMode = 1
	FormatConfig_COLORMODE_DISABLED FormatConfig_ColorMode = 2
)

// Enum value maps for FormatConfig_ColorMode.
var (
	FormatConfig_ColorMode_name = map[int32]string{
		0: "COLORMODE_AUTO",
		1: "COLORMODE_ENABLED",
		2: "COLORMODE_DISABLED",
	}
	FormatConfig_ColorMode_value = map[string]int32{
		"COLORMODE_AUTO":     0,
		"COLORMODE_ENABLED":  1,
		"COLORMODE_DISABLED": 2,
	}
)

func (x FormatConfig_ColorMode) Enum() *FormatConfig_ColorMode {
	p := new(FormatConfig_ColorMode)
	*p = x
	return p
}

func (x FormatConfig_ColorMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FormatConfig_ColorMode) Descriptor() protoreflect.EnumDescriptor {
	return file_types_v1_localhost_config_proto_enumTypes[0].Descriptor()
}

func (FormatConfig_ColorMode) Type() protoreflect.EnumType {
	return &file_types_v1_localhost_config_proto_enumTypes[0]
}

func (x FormatConfig_ColorMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FormatConfig_ColorMode.Descriptor instead.
func (FormatConfig_ColorMode) EnumDescriptor() ([]byte, []int) {
	return file_types_v1_localhost_config_proto_rawDescGZIP(), []int{0, 0}
}

type RuntimeConfig_ClientConfig_HTTPProtocol int32

const (
	RuntimeConfig_ClientConfig_HTTP2 RuntimeConfig_ClientConfig_HTTPProtocol = 0
	RuntimeConfig_ClientConfig_HTTP1 RuntimeConfig_ClientConfig_HTTPProtocol = 1
)

// Enum value maps for RuntimeConfig_ClientConfig_HTTPProtocol.
var (
	RuntimeConfig_ClientConfig_HTTPProtocol_name = map[int32]string{
		0: "HTTP2",
		1: "HTTP1",
	}
	RuntimeConfig_ClientConfig_HTTPProtocol_value = map[string]int32{
		"HTTP2": 0,
		"HTTP1": 1,
	}
)

func (x RuntimeConfig_ClientConfig_HTTPProtocol) Enum() *RuntimeConfig_ClientConfig_HTTPProtocol {
	p := new(RuntimeConfig_ClientConfig_HTTPProtocol)
	*p = x
	return p
}

func (x RuntimeConfig_ClientConfig_HTTPProtocol) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RuntimeConfig_ClientConfig_HTTPProtocol) Descriptor() protoreflect.EnumDescriptor {
	return file_types_v1_localhost_config_proto_enumTypes[1].Descriptor()
}

func (RuntimeConfig_ClientConfig_HTTPProtocol) Type() protoreflect.EnumType {
	return &file_types_v1_localhost_config_proto_enumTypes[1]
}

func (x RuntimeConfig_ClientConfig_HTTPProtocol) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RuntimeConfig_ClientConfig_HTTPProtocol.Descriptor instead.
func (RuntimeConfig_ClientConfig_HTTPProtocol) EnumDescriptor() ([]byte, []int) {
	return file_types_v1_localhost_config_proto_rawDescGZIP(), []int{3, 2, 0}
}

type RuntimeConfig_ClientConfig_RPCProtocol int32

const (
	RuntimeConfig_ClientConfig_GRPC      RuntimeConfig_ClientConfig_RPCProtocol = 0
	RuntimeConfig_ClientConfig_GRPC_WEB  RuntimeConfig_ClientConfig_RPCProtocol = 1
	RuntimeConfig_ClientConfig_PROTOJSON RuntimeConfig_ClientConfig_RPCProtocol = 2
)

// Enum value maps for RuntimeConfig_ClientConfig_RPCProtocol.
var (
	RuntimeConfig_ClientConfig_RPCProtocol_name = map[int32]string{
		0: "GRPC",
		1: "GRPC_WEB",
		2: "PROTOJSON",
	}
	RuntimeConfig_ClientConfig_RPCProtocol_value = map[string]int32{
		"GRPC":      0,
		"GRPC_WEB":  1,
		"PROTOJSON": 2,
	}
)

func (x RuntimeConfig_ClientConfig_RPCProtocol) Enum() *RuntimeConfig_ClientConfig_RPCProtocol {
	p := new(RuntimeConfig_ClientConfig_RPCProtocol)
	*p = x
	return p
}

func (x RuntimeConfig_ClientConfig_RPCProtocol) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RuntimeConfig_ClientConfig_RPCProtocol) Descriptor() protoreflect.EnumDescriptor {
	return file_types_v1_localhost_config_proto_enumTypes[2].Descriptor()
}

func (RuntimeConfig_ClientConfig_RPCProtocol) Type() protoreflect.EnumType {
	return &file_types_v1_localhost_config_proto_enumTypes[2]
}

func (x RuntimeConfig_ClientConfig_RPCProtocol) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RuntimeConfig_ClientConfig_RPCProtocol.Descriptor instead.
func (RuntimeConfig_ClientConfig_RPCProtocol) EnumDescriptor() ([]byte, []int) {
	return file_types_v1_localhost_config_proto_rawDescGZIP(), []int{3, 2, 1}
}

type FormatConfig struct {
	state             protoimpl.MessageState   `protogen:"open.v1"`
	Themes            *FormatConfig_Themes     `protobuf:"bytes,1,opt,name=themes,proto3" json:"themes,omitempty"`
	SkipFields        []string                 `protobuf:"bytes,2,rep,name=skip_fields,json=skipFields,proto3" json:"skip_fields,omitempty"`
	KeepFields        []string                 `protobuf:"bytes,3,rep,name=keep_fields,json=keepFields,proto3" json:"keep_fields,omitempty"`
	SortLongest       *bool                    `protobuf:"varint,4,opt,name=sort_longest,json=sortLongest,proto3,oneof" json:"sort_longest,omitempty"`
	SkipUnchanged     *bool                    `protobuf:"varint,5,opt,name=skip_unchanged,json=skipUnchanged,proto3,oneof" json:"skip_unchanged,omitempty"`
	Truncation        *FormatConfig_Truncation `protobuf:"bytes,6,opt,name=truncation,proto3,oneof" json:"truncation,omitempty"`
	Time              *FormatConfig_Time       `protobuf:"bytes,7,opt,name=time,proto3,oneof" json:"time,omitempty"`
	Message           *FormatConfig_Message    `protobuf:"bytes,8,opt,name=message,proto3,oneof" json:"message,omitempty"`
	TerminalColorMode *FormatConfig_ColorMode  `protobuf:"varint,9,opt,name=terminal_color_mode,json=terminalColorMode,proto3,enum=types.v1.FormatConfig_ColorMode,oneof" json:"terminal_color_mode,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *FormatConfig) Reset() {
	*x = FormatConfig{}
	mi := &file_types_v1_localhost_config_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FormatConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FormatConfig) ProtoMessage() {}

func (x *FormatConfig) ProtoReflect() protoreflect.Message {
	mi := &file_types_v1_localhost_config_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FormatConfig.ProtoReflect.Descriptor instead.
func (*FormatConfig) Descriptor() ([]byte, []int) {
	return file_types_v1_localhost_config_proto_rawDescGZIP(), []int{0}
}

func (x *FormatConfig) GetThemes() *FormatConfig_Themes {
	if x != nil {
		return x.Themes
	}
	return nil
}

func (x *FormatConfig) GetSkipFields() []string {
	if x != nil {
		return x.SkipFields
	}
	return nil
}

func (x *FormatConfig) GetKeepFields() []string {
	if x != nil {
		return x.KeepFields
	}
	return nil
}

func (x *FormatConfig) GetSortLongest() bool {
	if x != nil && x.SortLongest != nil {
		return *x.SortLongest
	}
	return false
}

func (x *FormatConfig) GetSkipUnchanged() bool {
	if x != nil && x.SkipUnchanged != nil {
		return *x.SkipUnchanged
	}
	return false
}

func (x *FormatConfig) GetTruncation() *FormatConfig_Truncation {
	if x != nil {
		return x.Truncation
	}
	return nil
}

func (x *FormatConfig) GetTime() *FormatConfig_Time {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *FormatConfig) GetMessage() *FormatConfig_Message {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *FormatConfig) GetTerminalColorMode() FormatConfig_ColorMode {
	if x != nil && x.TerminalColorMode != nil {
		return *x.TerminalColorMode
	}
	return FormatConfig_COLORMODE_AUTO
}

type ParseConfig struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Timestamp     *ParseConfig_Time      `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Message       *ParseConfig_Message   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Level         *ParseConfig_Level     `protobuf:"bytes,3,opt,name=level,proto3" json:"level,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ParseConfig) Reset() {
	*x = ParseConfig{}
	mi := &file_types_v1_localhost_config_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ParseConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParseConfig) ProtoMessage() {}

func (x *ParseConfig) ProtoReflect() protoreflect.Message {
	mi := &file_types_v1_localhost_config_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParseConfig.ProtoReflect.Descriptor instead.
func (*ParseConfig) Descriptor() ([]byte, []int) {
	return file_types_v1_localhost_config_proto_rawDescGZIP(), []int{1}
}

func (x *ParseConfig) GetTimestamp() *ParseConfig_Time {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *ParseConfig) GetMessage() *ParseConfig_Message {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *ParseConfig) GetLevel() *ParseConfig_Level {
	if x != nil {
		return x.Level
	}
	return nil
}

type ServeLocalhostConfig struct {
	state         protoimpl.MessageState     `protogen:"open.v1"`
	Port          int64                      `protobuf:"varint,1,opt,name=port,proto3" json:"port,omitempty"`
	Engine        string                     `protobuf:"bytes,2,opt,name=engine,proto3" json:"engine,omitempty"`
	EngineConfig  *structpb.Struct           `protobuf:"bytes,3,opt,name=engine_config,json=engineConfig,proto3" json:"engine_config,omitempty"`
	ShowInSystray *bool                      `protobuf:"varint,4,opt,name=show_in_systray,json=showInSystray,proto3,oneof" json:"show_in_systray,omitempty"`
	LogDir        *string                    `protobuf:"bytes,5,opt,name=log_dir,json=logDir,proto3,oneof" json:"log_dir,omitempty"`
	Otlp          *ServeLocalhostConfig_OTLP `protobuf:"bytes,101,opt,name=otlp,proto3" json:"otlp,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ServeLocalhostConfig) Reset() {
	*x = ServeLocalhostConfig{}
	mi := &file_types_v1_localhost_config_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ServeLocalhostConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServeLocalhostConfig) ProtoMessage() {}

func (x *ServeLocalhostConfig) ProtoReflect() protoreflect.Message {
	mi := &file_types_v1_localhost_config_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServeLocalhostConfig.ProtoReflect.Descriptor instead.
func (*ServeLocalhostConfig) Descriptor() ([]byte, []int) {
	return file_types_v1_localhost_config_proto_rawDescGZIP(), []int{2}
}

func (x *ServeLocalhostConfig) GetPort() int64 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *ServeLocalhostConfig) GetEngine() string {
	if x != nil {
		return x.Engine
	}
	return ""
}

func (x *ServeLocalhostConfig) GetEngineConfig() *structpb.Struct {
	if x != nil {
		return x.EngineConfig
	}
	return nil
}

func (x *ServeLocalhostConfig) GetShowInSystray() bool {
	if x != nil && x.ShowInSystray != nil {
		return *x.ShowInSystray
	}
	return false
}

func (x *ServeLocalhostConfig) GetLogDir() string {
	if x != nil && x.LogDir != nil {
		return *x.LogDir
	}
	return ""
}

func (x *ServeLocalhostConfig) GetOtlp() *ServeLocalhostConfig_OTLP {
	if x != nil {
		return x.Otlp
	}
	return nil
}

type RuntimeConfig struct {
	state                protoimpl.MessageState              `protogen:"open.v1"`
	Interrupt            *bool                               `protobuf:"varint,1,opt,name=interrupt,proto3,oneof" json:"interrupt,omitempty"`
	SkipCheckForUpdates  *bool                               `protobuf:"varint,2,opt,name=skip_check_for_updates,json=skipCheckForUpdates,proto3,oneof" json:"skip_check_for_updates,omitempty"`
	Features             *RuntimeConfig_Features             `protobuf:"bytes,3,opt,name=features,proto3" json:"features,omitempty"`
	ExperimentalFeatures *RuntimeConfig_ExperimentalFeatures `protobuf:"bytes,4,opt,name=experimental_features,json=experimentalFeatures,proto3" json:"experimental_features,omitempty"`
	ApiClient            *RuntimeConfig_ClientConfig         `protobuf:"bytes,5,opt,name=api_client,json=apiClient,proto3" json:"api_client,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *RuntimeConfig) Reset() {
	*x = RuntimeConfig{}
	mi := &file_types_v1_localhost_config_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RuntimeConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RuntimeConfig) ProtoMessage() {}

func (x *RuntimeConfig) ProtoReflect() protoreflect.Message {
	mi := &file_types_v1_localhost_config_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RuntimeConfig.ProtoReflect.Descriptor instead.
func (*RuntimeConfig) Descriptor() ([]byte, []int) {
	return file_types_v1_localhost_config_proto_rawDescGZIP(), []int{3}
}

func (x *RuntimeConfig) GetInterrupt() bool {
	if x != nil && x.Interrupt != nil {
		return *x.Interrupt
	}
	return false
}

func (x *RuntimeConfig) GetSkipCheckForUpdates() bool {
	if x != nil && x.SkipCheckForUpdates != nil {
		return *x.SkipCheckForUpdates
	}
	return false
}

func (x *RuntimeConfig) GetFeatures() *RuntimeConfig_Features {
	if x != nil {
		return x.Features
	}
	return nil
}

func (x *RuntimeConfig) GetExperimentalFeatures() *RuntimeConfig_ExperimentalFeatures {
	if x != nil {
		return x.ExperimentalFeatures
	}
	return nil
}

func (x *RuntimeConfig) GetApiClient() *RuntimeConfig_ClientConfig {
	if x != nil {
		return x.ApiClient
	}
	return nil
}

type LocalhostConfig struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Version       int64                  `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	Formatter     *FormatConfig          `protobuf:"bytes,2,opt,name=formatter,proto3" json:"formatter,omitempty"`
	Parser        *ParseConfig           `protobuf:"bytes,3,opt,name=parser,proto3" json:"parser,omitempty"`
	Runtime       *RuntimeConfig         `protobuf:"bytes,4,opt,name=runtime,proto3" json:"runtime,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LocalhostConfig) Reset() {
	*x = LocalhostConfig{}
	mi := &file_types_v1_localhost_config_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LocalhostConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocalhostConfig) ProtoMessage() {}

func (x *LocalhostConfig) ProtoReflect() protoreflect.Message {
	mi := &file_types_v1_localhost_config_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocalhostConfig.ProtoReflect.Descriptor instead.
func (*LocalhostConfig) Descriptor() ([]byte, []int) {
	return file_types_v1_localhost_config_proto_rawDescGZIP(), []int{4}
}

func (x *LocalhostConfig) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *LocalhostConfig) GetFormatter() *FormatConfig {
	if x != nil {
		return x.Formatter
	}
	return nil
}

func (x *LocalhostConfig) GetParser() *ParseConfig {
	if x != nil {
		return x.Parser
	}
	return nil
}

func (x *LocalhostConfig) GetRuntime() *RuntimeConfig {
	if x != nil {
		return x.Runtime
	}
	return nil
}

type FormatConfig_Color struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	HtmlHexColor  string                 `protobuf:"bytes,1,opt,name=html_hex_color,json=htmlHexColor,proto3" json:"html_hex_color,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FormatConfig_Color) Reset() {
	*x = FormatConfig_Color{}
	mi := &file_types_v1_localhost_config_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FormatConfig_Color) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FormatConfig_Color) ProtoMessage() {}

func (x *FormatConfig_Color) ProtoReflect() protoreflect.Message {
	mi := &file_types_v1_localhost_config_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FormatConfig_Color.ProtoReflect.Descriptor instead.
func (*FormatConfig_Color) Descriptor() ([]byte, []int) {
	return file_types_v1_localhost_config_proto_rawDescGZIP(), []int{0, 0}
}

func (x *FormatConfig_Color) GetHtmlHexColor() string {
	if x != nil {
		return x.HtmlHexColor
	}
	return ""
}

type FormatConfig_Style struct {
	state      protoimpl.MessageState `protogen:"open.v1"`
	Foreground *FormatConfig_Color    `protobuf:"bytes,1,opt,name=foreground,proto3" json:"foreground,omitempty"`
	Background *FormatConfig_Color    `protobuf:"bytes,2,opt,name=background,proto3,oneof" json:"background,omitempty"`
	// ANSI text formatting
	Bold          *bool `protobuf:"varint,300,opt,name=bold,proto3,oneof" json:"bold,omitempty"`
	Italic        *bool `protobuf:"varint,301,opt,name=italic,proto3,oneof" json:"italic,omitempty"`
	Faint         *bool `protobuf:"varint,302,opt,name=faint,proto3,oneof" json:"faint,omitempty"`
	Blink         *bool `protobuf:"varint,303,opt,name=blink,proto3,oneof" json:"blink,omitempty"`
	Strikethrough *bool `protobuf:"varint,304,opt,name=strikethrough,proto3,oneof" json:"strikethrough,omitempty"`
	Underline     *bool `protobuf:"varint,305,opt,name=underline,proto3,oneof" json:"underline,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FormatConfig_Style) Reset() {
	*x = FormatConfig_Style{}
	mi := &file_types_v1_localhost_config_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FormatConfig_Style) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FormatConfig_Style) ProtoMessage() {}

func (x *FormatConfig_Style) ProtoReflect() protoreflect.Message {
	mi := &file_types_v1_localhost_config_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FormatConfig_Style.ProtoReflect.Descriptor instead.
func (*FormatConfig_Style) Descriptor() ([]byte, []int) {
	return file_types_v1_localhost_config_proto_rawDescGZIP(), []int{0, 1}
}

func (x *FormatConfig_Style) GetForeground() *FormatConfig_Color {
	if x != nil {
		return x.Foreground
	}
	return nil
}

func (x *FormatConfig_Style) GetBackground() *FormatConfig_Color {
	if x != nil {
		return x.Background
	}
	return nil
}

func (x *FormatConfig_Style) GetBold() bool {
	if x != nil && x.Bold != nil {
		return *x.Bold
	}
	return false
}

func (x *FormatConfig_Style) GetItalic() bool {
	if x != nil && x.Italic != nil {
		return *x.Italic
	}
	return false
}

func (x *FormatConfig_Style) GetFaint() bool {
	if x != nil && x.Faint != nil {
		return *x.Faint
	}
	return false
}

func (x *FormatConfig_Style) GetBlink() bool {
	if x != nil && x.Blink != nil {
		return *x.Blink
	}
	return false
}

func (x *FormatConfig_Style) GetStrikethrough() bool {
	if x != nil && x.Strikethrough != nil {
		return *x.Strikethrough
	}
	return false
}

func (x *FormatConfig_Style) GetUnderline() bool {
	if x != nil && x.Underline != nil {
		return *x.Underline
	}
	return false
}

type FormatConfig_NullStyle struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Style         *FormatConfig_Style    `protobuf:"bytes,1,opt,name=style,proto3" json:"style,omitempty"`
	Content       string                 `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FormatConfig_NullStyle) Reset() {
	*x = FormatConfig_NullStyle{}
	mi := &file_types_v1_localhost_config_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FormatConfig_NullStyle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FormatConfig_NullStyle) ProtoMessage() {}

func (x *FormatConfig_NullStyle) ProtoReflect() protoreflect.Message {
	mi := &file_types_v1_localhost_config_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FormatConfig_NullStyle.ProtoReflect.Descriptor instead.
func (*FormatConfig_NullStyle) Descriptor() ([]byte, []int) {
	return file_types_v1_localhost_config_proto_rawDescGZIP(), []int{0, 2}
}

func (x *FormatConfig_NullStyle) GetStyle() *FormatConfig_Style {
	if x != nil {
		return x.Style
	}
	return nil
}

func (x *FormatConfig_NullStyle) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

type FormatConfig_LevelStyle struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Debug         *FormatConfig_Style    `protobuf:"bytes,100,opt,name=debug,proto3" json:"debug,omitempty"`
	Info          *FormatConfig_Style    `protobuf:"bytes,200,opt,name=info,proto3" json:"info,omitempty"`
	Warn          *FormatConfig_Style    `protobuf:"bytes,300,opt,name=warn,proto3" json:"warn,omitempty"`
	Error         *FormatConfig_Style    `protobuf:"bytes,400,opt,name=error,proto3" json:"error,omitempty"`
	Panic         *FormatConfig_Style    `protobuf:"bytes,500,opt,name=panic,proto3" json:"panic,omitempty"`
	Fatal         *FormatConfig_Style    `protobuf:"bytes,600,opt,name=fatal,proto3" json:"fatal,omitempty"`
	Unknown       *FormatConfig_Style    `protobuf:"bytes,700,opt,name=unknown,proto3" json:"unknown,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FormatConfig_LevelStyle) Reset() {
	*x = FormatConfig_LevelStyle{}
	mi := &file_types_v1_localhost_config_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FormatConfig_LevelStyle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FormatConfig_LevelStyle) ProtoMessage() {}

func (x *FormatConfig_LevelStyle) ProtoReflect() protoreflect.Message {
	mi := &file_types_v1_localhost_config_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FormatConfig_LevelStyle.ProtoReflect.Descriptor instead.
func (*FormatConfig_LevelStyle) Descriptor() ([]byte, []int) {
	return file_types_v1_localhost_config_proto_rawDescGZIP(), []int{0, 3}
}

func (x *FormatConfig_LevelStyle) GetDebug() *FormatConfig_Style {
	if x != nil {
		return x.Debug
	}
	return nil
}

func (x *FormatConfig_LevelStyle) GetInfo() *FormatConfig_Style {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *FormatConfig_LevelStyle) GetWarn() *FormatConfig_Style {
	if x != nil {
		return x.Warn
	}
	return nil
}

func (x *FormatConfig_LevelStyle) GetError() *FormatConfig_Style {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *FormatConfig_LevelStyle) GetPanic() *FormatConfig_Style {
	if x != nil {
		return x.Panic
	}
	return nil
}

func (x *FormatConfig_LevelStyle) GetFatal() *FormatConfig_Style {
	if x != nil {
		return x.Fatal
	}
	return nil
}

func (x *FormatConfig_LevelStyle) GetUnknown() *FormatConfig_Style {
	if x != nil {
		return x.Unknown
	}
	return nil
}

type FormatConfig_LogTheme struct {
	state  protoimpl.MessageState   `protogen:"open.v1"`
	Key    *FormatConfig_Style      `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value  *FormatConfig_Style      `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	Time   *FormatConfig_Style      `protobuf:"bytes,3,opt,name=time,proto3" json:"time,omitempty"`
	Msg    *FormatConfig_Style      `protobuf:"bytes,4,opt,name=msg,proto3" json:"msg,omitempty"`
	Levels *FormatConfig_LevelStyle `protobuf:"bytes,5,opt,name=levels,proto3" json:"levels,omitempty"`
	// how to style messages that are missing
	AbsentMsg     *FormatConfig_Style `protobuf:"bytes,6,opt,name=absent_msg,json=absentMsg,proto3" json:"absent_msg,omitempty"`
	AbsentTime    *FormatConfig_Style `protobuf:"bytes,7,opt,name=absent_time,json=absentTime,proto3" json:"absent_time,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FormatConfig_LogTheme) Reset() {
	*x = FormatConfig_LogTheme{}
	mi := &file_types_v1_localhost_config_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FormatConfig_LogTheme) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FormatConfig_LogTheme) ProtoMessage() {}

func (x *FormatConfig_LogTheme) ProtoReflect() protoreflect.Message {
	mi := &file_types_v1_localhost_config_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FormatConfig_LogTheme.ProtoReflect.Descriptor instead.
func (*FormatConfig_LogTheme) Descriptor() ([]byte, []int) {
	return file_types_v1_localhost_config_proto_rawDescGZIP(), []int{0, 4}
}

func (x *FormatConfig_LogTheme) GetKey() *FormatConfig_Style {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *FormatConfig_LogTheme) GetValue() *FormatConfig_Style {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *FormatConfig_LogTheme) GetTime() *FormatConfig_Style {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *FormatConfig_LogTheme) GetMsg() *FormatConfig_Style {
	if x != nil {
		return x.Msg
	}
	return nil
}

func (x *FormatConfig_LogTheme) GetLevels() *FormatConfig_LevelStyle {
	if x != nil {
		return x.Levels
	}
	return nil
}

func (x *FormatConfig_LogTheme) GetAbsentMsg() *FormatConfig_Style {
	if x != nil {
		return x.AbsentMsg
	}
	return nil
}

func (x *FormatConfig_LogTheme) GetAbsentTime() *FormatConfig_Style {
	if x != nil {
		return x.AbsentTime
	}
	return nil
}

type FormatConfig_SpanTheme struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	TraceId        *FormatConfig_Style    `protobuf:"bytes,1,opt,name=trace_id,json=traceId,proto3" json:"trace_id,omitempty"`
	SpanId         *FormatConfig_Style    `protobuf:"bytes,2,opt,name=span_id,json=spanId,proto3" json:"span_id,omitempty"`
	TraceState     *FormatConfig_Style    `protobuf:"bytes,3,opt,name=trace_state,json=traceState,proto3" json:"trace_state,omitempty"`
	ParentSpanId   *FormatConfig_Style    `protobuf:"bytes,4,opt,name=parent_span_id,json=parentSpanId,proto3" json:"parent_span_id,omitempty"`
	Name           *FormatConfig_Style    `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	Kind           *FormatConfig_Style    `protobuf:"bytes,6,opt,name=kind,proto3" json:"kind,omitempty"`
	ServiceName    *FormatConfig_Style    `protobuf:"bytes,7,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	ScopeName      *FormatConfig_Style    `protobuf:"bytes,8,opt,name=scope_name,json=scopeName,proto3" json:"scope_name,omitempty"`
	ScopeVersion   *FormatConfig_Style    `protobuf:"bytes,9,opt,name=scope_version,json=scopeVersion,proto3" json:"scope_version,omitempty"`
	Time           *FormatConfig_Style    `protobuf:"bytes,10,opt,name=time,proto3" json:"time,omitempty"`
	Duration       *FormatConfig_Style    `protobuf:"bytes,11,opt,name=duration,proto3" json:"duration,omitempty"`
	ResourceKey    *FormatConfig_Style    `protobuf:"bytes,12,opt,name=resource_key,json=resourceKey,proto3" json:"resource_key,omitempty"`
	ResourceVal    *FormatConfig_Style    `protobuf:"bytes,13,opt,name=resource_val,json=resourceVal,proto3" json:"resource_val,omitempty"`
	AttributeKey   *FormatConfig_Style    `protobuf:"bytes,14,opt,name=attribute_key,json=attributeKey,proto3" json:"attribute_key,omitempty"`
	AttributeVal   *FormatConfig_Style    `protobuf:"bytes,15,opt,name=attribute_val,json=attributeVal,proto3" json:"attribute_val,omitempty"`
	StatusMessage  *FormatConfig_Style    `protobuf:"bytes,16,opt,name=status_message,json=statusMessage,proto3" json:"status_message,omitempty"`
	StatusCode     *FormatConfig_Style    `protobuf:"bytes,17,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`
	EventTime      *FormatConfig_Style    `protobuf:"bytes,18,opt,name=event_time,json=eventTime,proto3" json:"event_time,omitempty"`
	EventName      *FormatConfig_Style    `protobuf:"bytes,19,opt,name=event_name,json=eventName,proto3" json:"event_name,omitempty"`
	EventKey       *FormatConfig_Style    `protobuf:"bytes,20,opt,name=event_key,json=eventKey,proto3" json:"event_key,omitempty"`
	EventVal       *FormatConfig_Style    `protobuf:"bytes,21,opt,name=event_val,json=eventVal,proto3" json:"event_val,omitempty"`
	LinkTraceId    *FormatConfig_Style    `protobuf:"bytes,22,opt,name=link_trace_id,json=linkTraceId,proto3" json:"link_trace_id,omitempty"`
	LinkSpanId     *FormatConfig_Style    `protobuf:"bytes,23,opt,name=link_span_id,json=linkSpanId,proto3" json:"link_span_id,omitempty"`
	LinkTraceState *FormatConfig_Style    `protobuf:"bytes,24,opt,name=link_trace_state,json=linkTraceState,proto3" json:"link_trace_state,omitempty"`
	LinkKey        *FormatConfig_Style    `protobuf:"bytes,25,opt,name=link_key,json=linkKey,proto3" json:"link_key,omitempty"`
	LinkVal        *FormatConfig_Style    `protobuf:"bytes,26,opt,name=link_val,json=linkVal,proto3" json:"link_val,omitempty"`
	// how to style messages that are missing
	AbsentParentSpanId *FormatConfig_Style `protobuf:"bytes,401,opt,name=absent_parent_span_id,json=absentParentSpanId,proto3" json:"absent_parent_span_id,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *FormatConfig_SpanTheme) Reset() {
	*x = FormatConfig_SpanTheme{}
	mi := &file_types_v1_localhost_config_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FormatConfig_SpanTheme) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FormatConfig_SpanTheme) ProtoMessage() {}

func (x *FormatConfig_SpanTheme) ProtoReflect() protoreflect.Message {
	mi := &file_types_v1_localhost_config_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FormatConfig_SpanTheme.ProtoReflect.Descriptor instead.
func (*FormatConfig_SpanTheme) Descriptor() ([]byte, []int) {
	return file_types_v1_localhost_config_proto_rawDescGZIP(), []int{0, 5}
}

func (x *FormatConfig_SpanTheme) GetTraceId() *FormatConfig_Style {
	if x != nil {
		return x.TraceId
	}
	return nil
}

func (x *FormatConfig_SpanTheme) GetSpanId() *FormatConfig_Style {
	if x != nil {
		return x.SpanId
	}
	return nil
}

func (x *FormatConfig_SpanTheme) GetTraceState() *FormatConfig_Style {
	if x != nil {
		return x.TraceState
	}
	return nil
}

func (x *FormatConfig_SpanTheme) GetParentSpanId() *FormatConfig_Style {
	if x != nil {
		return x.ParentSpanId
	}
	return nil
}

func (x *FormatConfig_SpanTheme) GetName() *FormatConfig_Style {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *FormatConfig_SpanTheme) GetKind() *FormatConfig_Style {
	if x != nil {
		return x.Kind
	}
	return nil
}

func (x *FormatConfig_SpanTheme) GetServiceName() *FormatConfig_Style {
	if x != nil {
		return x.ServiceName
	}
	return nil
}

func (x *FormatConfig_SpanTheme) GetScopeName() *FormatConfig_Style {
	if x != nil {
		return x.ScopeName
	}
	return nil
}

func (x *FormatConfig_SpanTheme) GetScopeVersion() *FormatConfig_Style {
	if x != nil {
		return x.ScopeVersion
	}
	return nil
}

func (x *FormatConfig_SpanTheme) GetTime() *FormatConfig_Style {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *FormatConfig_SpanTheme) GetDuration() *FormatConfig_Style {
	if x != nil {
		return x.Duration
	}
	return nil
}

func (x *FormatConfig_SpanTheme) GetResourceKey() *FormatConfig_Style {
	if x != nil {
		return x.ResourceKey
	}
	return nil
}

func (x *FormatConfig_SpanTheme) GetResourceVal() *FormatConfig_Style {
	if x != nil {
		return x.ResourceVal
	}
	return nil
}

func (x *FormatConfig_SpanTheme) GetAttributeKey() *FormatConfig_Style {
	if x != nil {
		return x.AttributeKey
	}
	return nil
}

func (x *FormatConfig_SpanTheme) GetAttributeVal() *FormatConfig_Style {
	if x != nil {
		return x.AttributeVal
	}
	return nil
}

func (x *FormatConfig_SpanTheme) GetStatusMessage() *FormatConfig_Style {
	if x != nil {
		return x.StatusMessage
	}
	return nil
}

func (x *FormatConfig_SpanTheme) GetStatusCode() *FormatConfig_Style {
	if x != nil {
		return x.StatusCode
	}
	return nil
}

func (x *FormatConfig_SpanTheme) GetEventTime() *FormatConfig_Style {
	if x != nil {
		return x.EventTime
	}
	return nil
}

func (x *FormatConfig_SpanTheme) GetEventName() *FormatConfig_Style {
	if x != nil {
		return x.EventName
	}
	return nil
}

func (x *FormatConfig_SpanTheme) GetEventKey() *FormatConfig_Style {
	if x != nil {
		return x.EventKey
	}
	return nil
}

func (x *FormatConfig_SpanTheme) GetEventVal() *FormatConfig_Style {
	if x != nil {
		return x.EventVal
	}
	return nil
}

func (x *FormatConfig_SpanTheme) GetLinkTraceId() *FormatConfig_Style {
	if x != nil {
		return x.LinkTraceId
	}
	return nil
}

func (x *FormatConfig_SpanTheme) GetLinkSpanId() *FormatConfig_Style {
	if x != nil {
		return x.LinkSpanId
	}
	return nil
}

func (x *FormatConfig_SpanTheme) GetLinkTraceState() *FormatConfig_Style {
	if x != nil {
		return x.LinkTraceState
	}
	return nil
}

func (x *FormatConfig_SpanTheme) GetLinkKey() *FormatConfig_Style {
	if x != nil {
		return x.LinkKey
	}
	return nil
}

func (x *FormatConfig_SpanTheme) GetLinkVal() *FormatConfig_Style {
	if x != nil {
		return x.LinkVal
	}
	return nil
}

func (x *FormatConfig_SpanTheme) GetAbsentParentSpanId() *FormatConfig_Style {
	if x != nil {
		return x.AbsentParentSpanId
	}
	return nil
}

type FormatConfig_TableTheme struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ColumnName    *FormatConfig_Style    `protobuf:"bytes,1,opt,name=column_name,json=columnName,proto3" json:"column_name,omitempty"`
	ColumnType    *FormatConfig_Style    `protobuf:"bytes,2,opt,name=column_type,json=columnType,proto3" json:"column_type,omitempty"`
	Value         *FormatConfig_Style    `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FormatConfig_TableTheme) Reset() {
	*x = FormatConfig_TableTheme{}
	mi := &file_types_v1_localhost_config_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FormatConfig_TableTheme) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FormatConfig_TableTheme) ProtoMessage() {}

func (x *FormatConfig_TableTheme) ProtoReflect() protoreflect.Message {
	mi := &file_types_v1_localhost_config_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FormatConfig_TableTheme.ProtoReflect.Descriptor instead.
func (*FormatConfig_TableTheme) Descriptor() ([]byte, []int) {
	return file_types_v1_localhost_config_proto_rawDescGZIP(), []int{0, 6}
}

func (x *FormatConfig_TableTheme) GetColumnName() *FormatConfig_Style {
	if x != nil {
		return x.ColumnName
	}
	return nil
}

func (x *FormatConfig_TableTheme) GetColumnType() *FormatConfig_Style {
	if x != nil {
		return x.ColumnType
	}
	return nil
}

func (x *FormatConfig_TableTheme) GetValue() *FormatConfig_Style {
	if x != nil {
		return x.Value
	}
	return nil
}

type FormatConfig_Theme struct {
	state  protoimpl.MessageState   `protogen:"open.v1"`
	Key    *FormatConfig_Style      `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value  *FormatConfig_Style      `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	Time   *FormatConfig_Style      `protobuf:"bytes,3,opt,name=time,proto3" json:"time,omitempty"`
	Msg    *FormatConfig_Style      `protobuf:"bytes,4,opt,name=msg,proto3" json:"msg,omitempty"`
	Levels *FormatConfig_LevelStyle `protobuf:"bytes,5,opt,name=levels,proto3" json:"levels,omitempty"`
	// how to style messages that are missing
	AbsentMsg     *FormatConfig_Style      `protobuf:"bytes,6,opt,name=absent_msg,json=absentMsg,proto3" json:"absent_msg,omitempty"`
	AbsentTime    *FormatConfig_Style      `protobuf:"bytes,7,opt,name=absent_time,json=absentTime,proto3" json:"absent_time,omitempty"`
	Logs          *FormatConfig_LogTheme   `protobuf:"bytes,100,opt,name=logs,proto3" json:"logs,omitempty"`
	Spans         *FormatConfig_SpanTheme  `protobuf:"bytes,101,opt,name=spans,proto3" json:"spans,omitempty"`
	Tables        *FormatConfig_TableTheme `protobuf:"bytes,102,opt,name=tables,proto3" json:"tables,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FormatConfig_Theme) Reset() {
	*x = FormatConfig_Theme{}
	mi := &file_types_v1_localhost_config_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FormatConfig_Theme) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FormatConfig_Theme) ProtoMessage() {}

func (x *FormatConfig_Theme) ProtoReflect() protoreflect.Message {
	mi := &file_types_v1_localhost_config_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FormatConfig_Theme.ProtoReflect.Descriptor instead.
func (*FormatConfig_Theme) Descriptor() ([]byte, []int) {
	return file_types_v1_localhost_config_proto_rawDescGZIP(), []int{0, 7}
}

func (x *FormatConfig_Theme) GetKey() *FormatConfig_Style {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *FormatConfig_Theme) GetValue() *FormatConfig_Style {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *FormatConfig_Theme) GetTime() *FormatConfig_Style {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *FormatConfig_Theme) GetMsg() *FormatConfig_Style {
	if x != nil {
		return x.Msg
	}
	return nil
}

func (x *FormatConfig_Theme) GetLevels() *FormatConfig_LevelStyle {
	if x != nil {
		return x.Levels
	}
	return nil
}

func (x *FormatConfig_Theme) GetAbsentMsg() *FormatConfig_Style {
	if x != nil {
		return x.AbsentMsg
	}
	return nil
}

func (x *FormatConfig_Theme) GetAbsentTime() *FormatConfig_Style {
	if x != nil {
		return x.AbsentTime
	}
	return nil
}

func (x *FormatConfig_Theme) GetLogs() *FormatConfig_LogTheme {
	if x != nil {
		return x.Logs
	}
	return nil
}

func (x *FormatConfig_Theme) GetSpans() *FormatConfig_SpanTheme {
	if x != nil {
		return x.Spans
	}
	return nil
}

func (x *FormatConfig_Theme) GetTables() *FormatConfig_TableTheme {
	if x != nil {
		return x.Tables
	}
	return nil
}

type FormatConfig_Themes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Light         *FormatConfig_Theme    `protobuf:"bytes,1,opt,name=light,proto3" json:"light,omitempty"`
	Dark          *FormatConfig_Theme    `protobuf:"bytes,2,opt,name=dark,proto3" json:"dark,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FormatConfig_Themes) Reset() {
	*x = FormatConfig_Themes{}
	mi := &file_types_v1_localhost_config_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FormatConfig_Themes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FormatConfig_Themes) ProtoMessage() {}

func (x *FormatConfig_Themes) ProtoReflect() protoreflect.Message {
	mi := &file_types_v1_localhost_config_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FormatConfig_Themes.ProtoReflect.Descriptor instead.
func (*FormatConfig_Themes) Descriptor() ([]byte, []int) {
	return file_types_v1_localhost_config_proto_rawDescGZIP(), []int{0, 8}
}

func (x *FormatConfig_Themes) GetLight() *FormatConfig_Theme {
	if x != nil {
		return x.Light
	}
	return nil
}

func (x *FormatConfig_Themes) GetDark() *FormatConfig_Theme {
	if x != nil {
		return x.Dark
	}
	return nil
}

type FormatConfig_Truncation struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Length        int64                  `protobuf:"varint,1,opt,name=length,proto3" json:"length,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FormatConfig_Truncation) Reset() {
	*x = FormatConfig_Truncation{}
	mi := &file_types_v1_localhost_config_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FormatConfig_Truncation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FormatConfig_Truncation) ProtoMessage() {}

func (x *FormatConfig_Truncation) ProtoReflect() protoreflect.Message {
	mi := &file_types_v1_localhost_config_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FormatConfig_Truncation.ProtoReflect.Descriptor instead.
func (*FormatConfig_Truncation) Descriptor() ([]byte, []int) {
	return file_types_v1_localhost_config_proto_rawDescGZIP(), []int{0, 9}
}

func (x *FormatConfig_Truncation) GetLength() int64 {
	if x != nil {
		return x.Length
	}
	return 0
}

type FormatConfig_Time struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	Format             *string                `protobuf:"bytes,1,opt,name=format,proto3,oneof" json:"format,omitempty"`
	Timezone           *string                `protobuf:"bytes,2,opt,name=timezone,proto3,oneof" json:"timezone,omitempty"`
	AbsentDefaultValue *string                `protobuf:"bytes,3,opt,name=absent_default_value,json=absentDefaultValue,proto3,oneof" json:"absent_default_value,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *FormatConfig_Time) Reset() {
	*x = FormatConfig_Time{}
	mi := &file_types_v1_localhost_config_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FormatConfig_Time) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FormatConfig_Time) ProtoMessage() {}

func (x *FormatConfig_Time) ProtoReflect() protoreflect.Message {
	mi := &file_types_v1_localhost_config_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FormatConfig_Time.ProtoReflect.Descriptor instead.
func (*FormatConfig_Time) Descriptor() ([]byte, []int) {
	return file_types_v1_localhost_config_proto_rawDescGZIP(), []int{0, 10}
}

func (x *FormatConfig_Time) GetFormat() string {
	if x != nil && x.Format != nil {
		return *x.Format
	}
	return ""
}

func (x *FormatConfig_Time) GetTimezone() string {
	if x != nil && x.Timezone != nil {
		return *x.Timezone
	}
	return ""
}

func (x *FormatConfig_Time) GetAbsentDefaultValue() string {
	if x != nil && x.AbsentDefaultValue != nil {
		return *x.AbsentDefaultValue
	}
	return ""
}

type FormatConfig_Message struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	AbsentDefaultValue *string                `protobuf:"bytes,1,opt,name=absent_default_value,json=absentDefaultValue,proto3,oneof" json:"absent_default_value,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *FormatConfig_Message) Reset() {
	*x = FormatConfig_Message{}
	mi := &file_types_v1_localhost_config_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FormatConfig_Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FormatConfig_Message) ProtoMessage() {}

func (x *FormatConfig_Message) ProtoReflect() protoreflect.Message {
	mi := &file_types_v1_localhost_config_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FormatConfig_Message.ProtoReflect.Descriptor instead.
func (*FormatConfig_Message) Descriptor() ([]byte, []int) {
	return file_types_v1_localhost_config_proto_rawDescGZIP(), []int{0, 11}
}

func (x *FormatConfig_Message) GetAbsentDefaultValue() string {
	if x != nil && x.AbsentDefaultValue != nil {
		return *x.AbsentDefaultValue
	}
	return ""
}

type ParseConfig_Time struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FieldNames    []string               `protobuf:"bytes,1,rep,name=field_names,json=fieldNames,proto3" json:"field_names,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ParseConfig_Time) Reset() {
	*x = ParseConfig_Time{}
	mi := &file_types_v1_localhost_config_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ParseConfig_Time) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParseConfig_Time) ProtoMessage() {}

func (x *ParseConfig_Time) ProtoReflect() protoreflect.Message {
	mi := &file_types_v1_localhost_config_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParseConfig_Time.ProtoReflect.Descriptor instead.
func (*ParseConfig_Time) Descriptor() ([]byte, []int) {
	return file_types_v1_localhost_config_proto_rawDescGZIP(), []int{1, 0}
}

func (x *ParseConfig_Time) GetFieldNames() []string {
	if x != nil {
		return x.FieldNames
	}
	return nil
}

type ParseConfig_Message struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FieldNames    []string               `protobuf:"bytes,1,rep,name=field_names,json=fieldNames,proto3" json:"field_names,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ParseConfig_Message) Reset() {
	*x = ParseConfig_Message{}
	mi := &file_types_v1_localhost_config_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ParseConfig_Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParseConfig_Message) ProtoMessage() {}

func (x *ParseConfig_Message) ProtoReflect() protoreflect.Message {
	mi := &file_types_v1_localhost_config_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParseConfig_Message.ProtoReflect.Descriptor instead.
func (*ParseConfig_Message) Descriptor() ([]byte, []int) {
	return file_types_v1_localhost_config_proto_rawDescGZIP(), []int{1, 1}
}

func (x *ParseConfig_Message) GetFieldNames() []string {
	if x != nil {
		return x.FieldNames
	}
	return nil
}

type ParseConfig_Level struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FieldNames    []string               `protobuf:"bytes,1,rep,name=field_names,json=fieldNames,proto3" json:"field_names,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ParseConfig_Level) Reset() {
	*x = ParseConfig_Level{}
	mi := &file_types_v1_localhost_config_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ParseConfig_Level) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParseConfig_Level) ProtoMessage() {}

func (x *ParseConfig_Level) ProtoReflect() protoreflect.Message {
	mi := &file_types_v1_localhost_config_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParseConfig_Level.ProtoReflect.Descriptor instead.
func (*ParseConfig_Level) Descriptor() ([]byte, []int) {
	return file_types_v1_localhost_config_proto_rawDescGZIP(), []int{1, 2}
}

func (x *ParseConfig_Level) GetFieldNames() []string {
	if x != nil {
		return x.FieldNames
	}
	return nil
}

type ServeLocalhostConfig_OTLP struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	GrpcPort      int64                  `protobuf:"varint,1,opt,name=grpc_port,json=grpcPort,proto3" json:"grpc_port,omitempty"`
	HttpPort      int64                  `protobuf:"varint,2,opt,name=http_port,json=httpPort,proto3" json:"http_port,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ServeLocalhostConfig_OTLP) Reset() {
	*x = ServeLocalhostConfig_OTLP{}
	mi := &file_types_v1_localhost_config_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ServeLocalhostConfig_OTLP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServeLocalhostConfig_OTLP) ProtoMessage() {}

func (x *ServeLocalhostConfig_OTLP) ProtoReflect() protoreflect.Message {
	mi := &file_types_v1_localhost_config_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServeLocalhostConfig_OTLP.ProtoReflect.Descriptor instead.
func (*ServeLocalhostConfig_OTLP) Descriptor() ([]byte, []int) {
	return file_types_v1_localhost_config_proto_rawDescGZIP(), []int{2, 0}
}

func (x *ServeLocalhostConfig_OTLP) GetGrpcPort() int64 {
	if x != nil {
		return x.GrpcPort
	}
	return 0
}

func (x *ServeLocalhostConfig_OTLP) GetHttpPort() int64 {
	if x != nil {
		return x.HttpPort
	}
	return 0
}

type RuntimeConfig_Features struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RuntimeConfig_Features) Reset() {
	*x = RuntimeConfig_Features{}
	mi := &file_types_v1_localhost_config_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RuntimeConfig_Features) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RuntimeConfig_Features) ProtoMessage() {}

func (x *RuntimeConfig_Features) ProtoReflect() protoreflect.Message {
	mi := &file_types_v1_localhost_config_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RuntimeConfig_Features.ProtoReflect.Descriptor instead.
func (*RuntimeConfig_Features) Descriptor() ([]byte, []int) {
	return file_types_v1_localhost_config_proto_rawDescGZIP(), []int{3, 0}
}

type RuntimeConfig_ExperimentalFeatures struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	ReleaseChannel  *string                `protobuf:"bytes,1,opt,name=release_channel,json=releaseChannel,proto3,oneof" json:"release_channel,omitempty"`
	SendLogsToCloud *bool                  `protobuf:"varint,2,opt,name=send_logs_to_cloud,json=sendLogsToCloud,proto3,oneof" json:"send_logs_to_cloud,omitempty"`
	ServeLocalhost  *ServeLocalhostConfig  `protobuf:"bytes,3,opt,name=serve_localhost,json=serveLocalhost,proto3,oneof" json:"serve_localhost,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *RuntimeConfig_ExperimentalFeatures) Reset() {
	*x = RuntimeConfig_ExperimentalFeatures{}
	mi := &file_types_v1_localhost_config_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RuntimeConfig_ExperimentalFeatures) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RuntimeConfig_ExperimentalFeatures) ProtoMessage() {}

func (x *RuntimeConfig_ExperimentalFeatures) ProtoReflect() protoreflect.Message {
	mi := &file_types_v1_localhost_config_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RuntimeConfig_ExperimentalFeatures.ProtoReflect.Descriptor instead.
func (*RuntimeConfig_ExperimentalFeatures) Descriptor() ([]byte, []int) {
	return file_types_v1_localhost_config_proto_rawDescGZIP(), []int{3, 1}
}

func (x *RuntimeConfig_ExperimentalFeatures) GetReleaseChannel() string {
	if x != nil && x.ReleaseChannel != nil {
		return *x.ReleaseChannel
	}
	return ""
}

func (x *RuntimeConfig_ExperimentalFeatures) GetSendLogsToCloud() bool {
	if x != nil && x.SendLogsToCloud != nil {
		return *x.SendLogsToCloud
	}
	return false
}

func (x *RuntimeConfig_ExperimentalFeatures) GetServeLocalhost() *ServeLocalhostConfig {
	if x != nil {
		return x.ServeLocalhost
	}
	return nil
}

type RuntimeConfig_ClientConfig struct {
	state         protoimpl.MessageState                   `protogen:"open.v1"`
	HttpProtocol  *RuntimeConfig_ClientConfig_HTTPProtocol `protobuf:"varint,1,opt,name=http_protocol,json=httpProtocol,proto3,enum=types.v1.RuntimeConfig_ClientConfig_HTTPProtocol,oneof" json:"http_protocol,omitempty"`
	RpcProtocol   *RuntimeConfig_ClientConfig_RPCProtocol  `protobuf:"varint,2,opt,name=rpc_protocol,json=rpcProtocol,proto3,enum=types.v1.RuntimeConfig_ClientConfig_RPCProtocol,oneof" json:"rpc_protocol,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RuntimeConfig_ClientConfig) Reset() {
	*x = RuntimeConfig_ClientConfig{}
	mi := &file_types_v1_localhost_config_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RuntimeConfig_ClientConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RuntimeConfig_ClientConfig) ProtoMessage() {}

func (x *RuntimeConfig_ClientConfig) ProtoReflect() protoreflect.Message {
	mi := &file_types_v1_localhost_config_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RuntimeConfig_ClientConfig.ProtoReflect.Descriptor instead.
func (*RuntimeConfig_ClientConfig) Descriptor() ([]byte, []int) {
	return file_types_v1_localhost_config_proto_rawDescGZIP(), []int{3, 2}
}

func (x *RuntimeConfig_ClientConfig) GetHttpProtocol() RuntimeConfig_ClientConfig_HTTPProtocol {
	if x != nil && x.HttpProtocol != nil {
		return *x.HttpProtocol
	}
	return RuntimeConfig_ClientConfig_HTTP2
}

func (x *RuntimeConfig_ClientConfig) GetRpcProtocol() RuntimeConfig_ClientConfig_RPCProtocol {
	if x != nil && x.RpcProtocol != nil {
		return *x.RpcProtocol
	}
	return RuntimeConfig_ClientConfig_GRPC
}

var File_types_v1_localhost_config_proto protoreflect.FileDescriptor

var file_types_v1_localhost_config_proto_rawDesc = string([]byte{
	0x0a, 0x1f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
	0x68, 0x6f, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x08, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x82, 0x26, 0x0a, 0x0c, 0x46, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x35, 0x0a, 0x06, 0x74, 0x68,
	0x65, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x73, 0x52, 0x06, 0x74, 0x68, 0x65, 0x6d, 0x65,
	0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x6b, 0x69, 0x70, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6b, 0x65, 0x65, 0x70, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x6b, 0x65, 0x65, 0x70, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x73, 0x12, 0x26, 0x0a, 0x0c, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x6c, 0x6f, 0x6e, 0x67,
	0x65, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x6f, 0x72,
	0x74, 0x4c, 0x6f, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x73,
	0x6b, 0x69, 0x70, 0x5f, 0x75, 0x6e, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x48, 0x01, 0x52, 0x0d, 0x73, 0x6b, 0x69, 0x70, 0x55, 0x6e, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x46, 0x0a, 0x0a, 0x74, 0x72, 0x75, 0x6e, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x54, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x02,
	0x52, 0x0a, 0x74, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12,
	0x34, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x48, 0x03, 0x52, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x04, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x55, 0x0a, 0x13, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c,
	0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x20, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x4d,
	0x6f, 0x64, 0x65, 0x48, 0x05, 0x52, 0x11, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x43,
	0x6f, 0x6c, 0x6f, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x1a, 0x2d, 0x0a, 0x05, 0x43,
	0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x24, 0x0a, 0x0e, 0x68, 0x74, 0x6d, 0x6c, 0x5f, 0x68, 0x65, 0x78,
	0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x68, 0x74,
	0x6d, 0x6c, 0x48, 0x65, 0x78, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x1a, 0x9f, 0x03, 0x0a, 0x05, 0x53,
	0x74, 0x79, 0x6c, 0x65, 0x12, 0x3c, 0x0a, 0x0a, 0x66, 0x6f, 0x72, 0x65, 0x67, 0x72, 0x6f, 0x75,
	0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x0a, 0x66, 0x6f, 0x72, 0x65, 0x67, 0x72, 0x6f, 0x75,
	0x6e, 0x64, 0x12, 0x41, 0x0a, 0x0a, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43,
	0x6f, 0x6c, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x0a, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75,
	0x6e, 0x64, 0x88, 0x01, 0x01, 0x12, 0x18, 0x0a, 0x04, 0x62, 0x6f, 0x6c, 0x64, 0x18, 0xac, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x01, 0x52, 0x04, 0x62, 0x6f, 0x6c, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x1c, 0x0a, 0x06, 0x69, 0x74, 0x61, 0x6c, 0x69, 0x63, 0x18, 0xad, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x48, 0x02, 0x52, 0x06, 0x69, 0x74, 0x61, 0x6c, 0x69, 0x63, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a,
	0x05, 0x66, 0x61, 0x69, 0x6e, 0x74, 0x18, 0xae, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x03, 0x52,
	0x05, 0x66, 0x61, 0x69, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x05, 0x62, 0x6c, 0x69,
	0x6e, 0x6b, 0x18, 0xaf, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x04, 0x52, 0x05, 0x62, 0x6c, 0x69,
	0x6e, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0d, 0x73, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x74,
	0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x18, 0xb0, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x05, 0x52,
	0x0d, 0x73, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x88, 0x01,
	0x01, 0x12, 0x22, 0x0a, 0x09, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0xb1,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x06, 0x52, 0x09, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x69,
	0x6e, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72,
	0x6f, 0x75, 0x6e, 0x64, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x62, 0x6f, 0x6c, 0x64, 0x42, 0x09, 0x0a,
	0x07, 0x5f, 0x69, 0x74, 0x61, 0x6c, 0x69, 0x63, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x66, 0x61, 0x69,
	0x6e, 0x74, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x62, 0x6c, 0x69, 0x6e, 0x6b, 0x42, 0x10, 0x0a, 0x0e,
	0x5f, 0x73, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x42, 0x0c,
	0x0a, 0x0a, 0x5f, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x1a, 0x59, 0x0a, 0x09,
	0x4e, 0x75, 0x6c, 0x6c, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x32, 0x0a, 0x05, 0x73, 0x74, 0x79,
	0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x52, 0x05, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x1a, 0xfe, 0x02, 0x0a, 0x0a, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x32, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18,
	0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x74,
	0x79, 0x6c, 0x65, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x12, 0x31, 0x0a, 0x04, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0xc8, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x31, 0x0a,
	0x04, 0x77, 0x61, 0x72, 0x6e, 0x18, 0xac, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x52, 0x04, 0x77, 0x61, 0x72, 0x6e,
	0x12, 0x33, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x90, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x52, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x33, 0x0a, 0x05, 0x70, 0x61, 0x6e, 0x69, 0x63, 0x18, 0xf4,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x74,
	0x79, 0x6c, 0x65, 0x52, 0x05, 0x70, 0x61, 0x6e, 0x69, 0x63, 0x12, 0x33, 0x0a, 0x05, 0x66, 0x61,
	0x74, 0x61, 0x6c, 0x18, 0xd8, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x52, 0x05, 0x66, 0x61, 0x74, 0x61, 0x6c, 0x12,
	0x37, 0x0a, 0x07, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x18, 0xbc, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x52,
	0x07, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x1a, 0x87, 0x03, 0x0a, 0x08, 0x4c, 0x6f, 0x67,
	0x54, 0x68, 0x65, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x74, 0x79, 0x6c, 0x65,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x32, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x74, 0x79,
	0x6c, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x30, 0x0a, 0x04, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x53, 0x74, 0x79, 0x6c, 0x65, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x03, 0x6d,
	0x73, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x39, 0x0a, 0x06, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x52, 0x06,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x12, 0x3b, 0x0a, 0x0a, 0x61, 0x62, 0x73, 0x65, 0x6e, 0x74,
	0x5f, 0x6d, 0x73, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x52, 0x09, 0x61, 0x62, 0x73, 0x65, 0x6e, 0x74,
	0x4d, 0x73, 0x67, 0x12, 0x3d, 0x0a, 0x0b, 0x61, 0x62, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x52, 0x0a, 0x61, 0x62, 0x73, 0x65, 0x6e, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x1a, 0x99, 0x0d, 0x0a, 0x09, 0x53, 0x70, 0x61, 0x6e, 0x54, 0x68, 0x65, 0x6d, 0x65,
	0x12, 0x37, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x74, 0x79, 0x6c, 0x65,
	0x52, 0x07, 0x74, 0x72, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x07, 0x73, 0x70, 0x61,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x52, 0x06, 0x73, 0x70, 0x61, 0x6e, 0x49, 0x64,
	0x12, 0x3d, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x74,
	0x79, 0x6c, 0x65, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x42, 0x0a, 0x0e, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x70, 0x61, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x53, 0x74, 0x79, 0x6c, 0x65, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x70, 0x61,
	0x6e, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x46,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x74, 0x79, 0x6c,
	0x65, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x3f, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x52, 0x0b, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0a, 0x73, 0x63, 0x6f, 0x70,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x52, 0x09, 0x73, 0x63, 0x6f, 0x70,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x41, 0x0a, 0x0d, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x5f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x52, 0x0c, 0x73, 0x63, 0x6f, 0x70,
	0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53,
	0x74, 0x79, 0x6c, 0x65, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x08, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x6b, 0x65, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x52, 0x0b, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x3f, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x5f, 0x76, 0x61, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x52, 0x0b, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x56, 0x61, 0x6c, 0x12, 0x41, 0x0a, 0x0d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x52, 0x0c, 0x61, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x41, 0x0a, 0x0d, 0x61, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x52, 0x0c,
	0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x12, 0x43, 0x0a, 0x0e,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x74, 0x79,
	0x6c, 0x65, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x3d, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53,
	0x74, 0x79, 0x6c, 0x65, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x3b, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x74, 0x79,
	0x6c, 0x65, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a,
	0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x52,
	0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x09, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x52, 0x08, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x39, 0x0a, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x76,
	0x61, 0x6c, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x52, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x56, 0x61, 0x6c,
	0x12, 0x40, 0x0a, 0x0d, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x53, 0x74, 0x79, 0x6c, 0x65, 0x52, 0x0b, 0x6c, 0x69, 0x6e, 0x6b, 0x54, 0x72, 0x61, 0x63, 0x65,
	0x49, 0x64, 0x12, 0x3e, 0x0a, 0x0c, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x73, 0x70, 0x61, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x52, 0x0a, 0x6c, 0x69, 0x6e, 0x6b, 0x53, 0x70, 0x61, 0x6e,
	0x49, 0x64, 0x12, 0x46, 0x0a, 0x10, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x65,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x52, 0x0e, 0x6c, 0x69, 0x6e, 0x6b,
	0x54, 0x72, 0x61, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x37, 0x0a, 0x08, 0x6c, 0x69,
	0x6e, 0x6b, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x52, 0x07, 0x6c, 0x69, 0x6e, 0x6b,
	0x4b, 0x65, 0x79, 0x12, 0x37, 0x0a, 0x08, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x76, 0x61, 0x6c, 0x18,
	0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x74,
	0x79, 0x6c, 0x65, 0x52, 0x07, 0x6c, 0x69, 0x6e, 0x6b, 0x56, 0x61, 0x6c, 0x12, 0x50, 0x0a, 0x15,
	0x61, 0x62, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x70,
	0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x91, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x52, 0x12, 0x61, 0x62, 0x73, 0x65,
	0x6e, 0x74, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x70, 0x61, 0x6e, 0x49, 0x64, 0x1a, 0xbe,
	0x01, 0x0a, 0x0a, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x12, 0x3d, 0x0a,
	0x0b, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x74, 0x79, 0x6c, 0x65,
	0x52, 0x0a, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x0b,
	0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x52,
	0x0a, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x32, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a,
	0xac, 0x04, 0x0a, 0x05, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53,
	0x74, 0x79, 0x6c, 0x65, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x32, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x30, 0x0a,
	0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12,
	0x2e, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12,
	0x39, 0x0a, 0x06, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x53, 0x74, 0x79,
	0x6c, 0x65, 0x52, 0x06, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x12, 0x3b, 0x0a, 0x0a, 0x61, 0x62,
	0x73, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x52, 0x09, 0x61, 0x62,
	0x73, 0x65, 0x6e, 0x74, 0x4d, 0x73, 0x67, 0x12, 0x3d, 0x0a, 0x0b, 0x61, 0x62, 0x73, 0x65, 0x6e,
	0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x52, 0x0a, 0x61, 0x62, 0x73, 0x65,
	0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x6c, 0x6f, 0x67, 0x73, 0x18, 0x64,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4c, 0x6f, 0x67,
	0x54, 0x68, 0x65, 0x6d, 0x65, 0x52, 0x04, 0x6c, 0x6f, 0x67, 0x73, 0x12, 0x36, 0x0a, 0x05, 0x73,
	0x70, 0x61, 0x6e, 0x73, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x53, 0x70, 0x61, 0x6e, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x52, 0x05, 0x73, 0x70,
	0x61, 0x6e, 0x73, 0x12, 0x39, 0x0a, 0x06, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x66, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x46,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x52, 0x06, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x1a, 0x6e,
	0x0a, 0x06, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x73, 0x12, 0x32, 0x0a, 0x05, 0x6c, 0x69, 0x67, 0x68,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x54, 0x68, 0x65, 0x6d, 0x65, 0x52, 0x05, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x12, 0x30, 0x0a, 0x04,
	0x64, 0x61, 0x72, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x52, 0x04, 0x64, 0x61, 0x72, 0x6b, 0x1a, 0x24,
	0x0a, 0x0a, 0x54, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06,
	0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x1a, 0xac, 0x01, 0x0a, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a,
	0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x74, 0x69,
	0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x08,
	0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x14, 0x61,
	0x62, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x12, 0x61, 0x62, 0x73,
	0x65, 0x6e, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x88,
	0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x42, 0x0b, 0x0a,
	0x09, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x61,
	0x62, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x1a, 0x59, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x35,
	0x0a, 0x14, 0x61, 0x62, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x12,
	0x61, 0x62, 0x73, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x88, 0x01, 0x01, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x61, 0x62, 0x73, 0x65, 0x6e, 0x74,
	0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x4e,
	0x0a, 0x09, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x0e, 0x43,
	0x4f, 0x4c, 0x4f, 0x52, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x41, 0x55, 0x54, 0x4f, 0x10, 0x00, 0x12,
	0x15, 0x0a, 0x11, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x45, 0x4e, 0x41,
	0x42, 0x4c, 0x45, 0x44, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x4d,
	0x4f, 0x44, 0x45, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x10, 0x02, 0x42, 0x0f,
	0x0a, 0x0d, 0x5f, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x6c, 0x6f, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x42,
	0x11, 0x0a, 0x0f, 0x5f, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x75, 0x6e, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x74, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x69,
	0x6e, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x22, 0xb2,
	0x02, 0x0a, 0x0b, 0x50, 0x61, 0x72, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x38,
	0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x72,
	0x73, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x37, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x72, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x31, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x72, 0x73,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x05, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x1a, 0x27, 0x0a, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x1a, 0x2a, 0x0a,
	0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x1a, 0x28, 0x0a, 0x05, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x22, 0xe6, 0x02, 0x0a, 0x14, 0x53, 0x65, 0x72, 0x76, 0x65, 0x4c, 0x6f, 0x63,
	0x61, 0x6c, 0x68, 0x6f, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x12, 0x0a, 0x04,
	0x70, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x12, 0x3c, 0x0a, 0x0d, 0x65, 0x6e, 0x67, 0x69,
	0x6e, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x0c, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2b, 0x0a, 0x0f, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x69,
	0x6e, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x72, 0x61, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x00, 0x52, 0x0d, 0x73, 0x68, 0x6f, 0x77, 0x49, 0x6e, 0x53, 0x79, 0x73, 0x74, 0x72, 0x61, 0x79,
	0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x6c, 0x6f, 0x67, 0x5f, 0x64, 0x69, 0x72, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x06, 0x6c, 0x6f, 0x67, 0x44, 0x69, 0x72, 0x88, 0x01,
	0x01, 0x12, 0x37, 0x0a, 0x04, 0x6f, 0x74, 0x6c, 0x70, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x68, 0x6f, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x4f, 0x54, 0x4c, 0x50, 0x52, 0x04, 0x6f, 0x74, 0x6c, 0x70, 0x1a, 0x40, 0x0a, 0x04, 0x4f, 0x54,
	0x4c, 0x50, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x67, 0x72, 0x70, 0x63, 0x50, 0x6f, 0x72, 0x74, 0x12,
	0x1b, 0x0a, 0x09, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x68, 0x74, 0x74, 0x70, 0x50, 0x6f, 0x72, 0x74, 0x42, 0x12, 0x0a, 0x10,
	0x5f, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x69, 0x6e, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x72, 0x61, 0x79,
	0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x64, 0x69, 0x72, 0x22, 0xd4, 0x07, 0x0a,
	0x0d, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x21,
	0x0a, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x72, 0x75, 0x70, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x48, 0x00, 0x52, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x72, 0x75, 0x70, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x38, 0x0a, 0x16, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f,
	0x66, 0x6f, 0x72, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x48, 0x01, 0x52, 0x13, 0x73, 0x6b, 0x69, 0x70, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x46, 0x6f,
	0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x88, 0x01, 0x01, 0x12, 0x3c, 0x0a, 0x08, 0x66,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x52,
	0x08, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x61, 0x0a, 0x15, 0x65, 0x78, 0x70,
	0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x5f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x46, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x52, 0x14, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65,
	0x6e, 0x74, 0x61, 0x6c, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x43, 0x0a, 0x0a,
	0x61, 0x70, 0x69, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x75, 0x6e, 0x74,
	0x69, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x09, 0x61, 0x70, 0x69, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x1a, 0x0a, 0x0a, 0x08, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x1a, 0x83, 0x02,
	0x0a, 0x14, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x46, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x0f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x0e, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x12, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x6c, 0x6f, 0x67,
	0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x48, 0x01, 0x52, 0x0f, 0x73, 0x65, 0x6e, 0x64, 0x4c, 0x6f, 0x67, 0x73, 0x54, 0x6f, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x88, 0x01, 0x01, 0x12, 0x4c, 0x0a, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x5f,
	0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x68, 0x6f, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48,
	0x02, 0x52, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x68, 0x6f, 0x73,
	0x74, 0x88, 0x01, 0x01, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x73, 0x65, 0x6e,
	0x64, 0x5f, 0x6c, 0x6f, 0x67, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x42,
	0x12, 0x0a, 0x10, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x68,
	0x6f, 0x73, 0x74, 0x1a, 0xc4, 0x02, 0x0a, 0x0c, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x5b, 0x0a, 0x0d, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x48, 0x00,
	0x52, 0x0c, 0x68, 0x74, 0x74, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x88, 0x01,
	0x01, 0x12, 0x58, 0x0a, 0x0c, 0x72, 0x70, 0x63, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x50,
	0x43, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x48, 0x01, 0x52, 0x0b, 0x72, 0x70, 0x63,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x88, 0x01, 0x01, 0x22, 0x24, 0x0a, 0x0c, 0x48,
	0x54, 0x54, 0x50, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x09, 0x0a, 0x05, 0x48,
	0x54, 0x54, 0x50, 0x32, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x48, 0x54, 0x54, 0x50, 0x31, 0x10,
	0x01, 0x22, 0x34, 0x0a, 0x0b, 0x52, 0x50, 0x43, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x12, 0x08, 0x0a, 0x04, 0x47, 0x52, 0x50, 0x43, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x47, 0x52,
	0x50, 0x43, 0x5f, 0x57, 0x45, 0x42, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x50, 0x52, 0x4f, 0x54,
	0x4f, 0x4a, 0x53, 0x4f, 0x4e, 0x10, 0x02, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x68, 0x74, 0x74, 0x70,
	0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x72, 0x70,
	0x63, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x72, 0x75, 0x70, 0x74, 0x42, 0x19, 0x0a, 0x17, 0x5f, 0x73, 0x6b, 0x69,
	0x70, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x73, 0x22, 0xc3, 0x01, 0x0a, 0x0f, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x68, 0x6f, 0x73,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x34, 0x0a, 0x09, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x74, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x09, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x74, 0x65, 0x72, 0x12, 0x2d, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x73, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x61, 0x72, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06,
	0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x12, 0x31, 0x0a, 0x07, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x07, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x94, 0x01, 0x0a, 0x0c, 0x63, 0x6f,
	0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x42, 0x14, 0x4c, 0x6f, 0x63, 0x61,
	0x6c, 0x68, 0x6f, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x50, 0x01, 0x5a, 0x2d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x68,
	0x75, 0x6d, 0x61, 0x6e, 0x6c, 0x6f, 0x67, 0x69, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x6f,
	0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x3b, 0x74, 0x79, 0x70, 0x65, 0x73, 0x76,
	0x31, 0xa2, 0x02, 0x03, 0x54, 0x58, 0x58, 0xaa, 0x02, 0x08, 0x54, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x56, 0x31, 0xca, 0x02, 0x08, 0x54, 0x79, 0x70, 0x65, 0x73, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x14,
	0x54, 0x79, 0x70, 0x65, 0x73, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x09, 0x54, 0x79, 0x70, 0x65, 0x73, 0x3a, 0x3a, 0x56, 0x31,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_types_v1_localhost_config_proto_rawDescOnce sync.Once
	file_types_v1_localhost_config_proto_rawDescData []byte
)

func file_types_v1_localhost_config_proto_rawDescGZIP() []byte {
	file_types_v1_localhost_config_proto_rawDescOnce.Do(func() {
		file_types_v1_localhost_config_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_types_v1_localhost_config_proto_rawDesc), len(file_types_v1_localhost_config_proto_rawDesc)))
	})
	return file_types_v1_localhost_config_proto_rawDescData
}

var file_types_v1_localhost_config_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_types_v1_localhost_config_proto_msgTypes = make([]protoimpl.MessageInfo, 24)
var file_types_v1_localhost_config_proto_goTypes = []any{
	(FormatConfig_ColorMode)(0),                  // 0: types.v1.FormatConfig.ColorMode
	(RuntimeConfig_ClientConfig_HTTPProtocol)(0), // 1: types.v1.RuntimeConfig.ClientConfig.HTTPProtocol
	(RuntimeConfig_ClientConfig_RPCProtocol)(0),  // 2: types.v1.RuntimeConfig.ClientConfig.RPCProtocol
	(*FormatConfig)(nil),                         // 3: types.v1.FormatConfig
	(*ParseConfig)(nil),                          // 4: types.v1.ParseConfig
	(*ServeLocalhostConfig)(nil),                 // 5: types.v1.ServeLocalhostConfig
	(*RuntimeConfig)(nil),                        // 6: types.v1.RuntimeConfig
	(*LocalhostConfig)(nil),                      // 7: types.v1.LocalhostConfig
	(*FormatConfig_Color)(nil),                   // 8: types.v1.FormatConfig.Color
	(*FormatConfig_Style)(nil),                   // 9: types.v1.FormatConfig.Style
	(*FormatConfig_NullStyle)(nil),               // 10: types.v1.FormatConfig.NullStyle
	(*FormatConfig_LevelStyle)(nil),              // 11: types.v1.FormatConfig.LevelStyle
	(*FormatConfig_LogTheme)(nil),                // 12: types.v1.FormatConfig.LogTheme
	(*FormatConfig_SpanTheme)(nil),               // 13: types.v1.FormatConfig.SpanTheme
	(*FormatConfig_TableTheme)(nil),              // 14: types.v1.FormatConfig.TableTheme
	(*FormatConfig_Theme)(nil),                   // 15: types.v1.FormatConfig.Theme
	(*FormatConfig_Themes)(nil),                  // 16: types.v1.FormatConfig.Themes
	(*FormatConfig_Truncation)(nil),              // 17: types.v1.FormatConfig.Truncation
	(*FormatConfig_Time)(nil),                    // 18: types.v1.FormatConfig.Time
	(*FormatConfig_Message)(nil),                 // 19: types.v1.FormatConfig.Message
	(*ParseConfig_Time)(nil),                     // 20: types.v1.ParseConfig.Time
	(*ParseConfig_Message)(nil),                  // 21: types.v1.ParseConfig.Message
	(*ParseConfig_Level)(nil),                    // 22: types.v1.ParseConfig.Level
	(*ServeLocalhostConfig_OTLP)(nil),            // 23: types.v1.ServeLocalhostConfig.OTLP
	(*RuntimeConfig_Features)(nil),               // 24: types.v1.RuntimeConfig.Features
	(*RuntimeConfig_ExperimentalFeatures)(nil),   // 25: types.v1.RuntimeConfig.ExperimentalFeatures
	(*RuntimeConfig_ClientConfig)(nil),           // 26: types.v1.RuntimeConfig.ClientConfig
	(*structpb.Struct)(nil),                      // 27: google.protobuf.Struct
}
var file_types_v1_localhost_config_proto_depIdxs = []int32{
	16, // 0: types.v1.FormatConfig.themes:type_name -> types.v1.FormatConfig.Themes
	17, // 1: types.v1.FormatConfig.truncation:type_name -> types.v1.FormatConfig.Truncation
	18, // 2: types.v1.FormatConfig.time:type_name -> types.v1.FormatConfig.Time
	19, // 3: types.v1.FormatConfig.message:type_name -> types.v1.FormatConfig.Message
	0,  // 4: types.v1.FormatConfig.terminal_color_mode:type_name -> types.v1.FormatConfig.ColorMode
	20, // 5: types.v1.ParseConfig.timestamp:type_name -> types.v1.ParseConfig.Time
	21, // 6: types.v1.ParseConfig.message:type_name -> types.v1.ParseConfig.Message
	22, // 7: types.v1.ParseConfig.level:type_name -> types.v1.ParseConfig.Level
	27, // 8: types.v1.ServeLocalhostConfig.engine_config:type_name -> google.protobuf.Struct
	23, // 9: types.v1.ServeLocalhostConfig.otlp:type_name -> types.v1.ServeLocalhostConfig.OTLP
	24, // 10: types.v1.RuntimeConfig.features:type_name -> types.v1.RuntimeConfig.Features
	25, // 11: types.v1.RuntimeConfig.experimental_features:type_name -> types.v1.RuntimeConfig.ExperimentalFeatures
	26, // 12: types.v1.RuntimeConfig.api_client:type_name -> types.v1.RuntimeConfig.ClientConfig
	3,  // 13: types.v1.LocalhostConfig.formatter:type_name -> types.v1.FormatConfig
	4,  // 14: types.v1.LocalhostConfig.parser:type_name -> types.v1.ParseConfig
	6,  // 15: types.v1.LocalhostConfig.runtime:type_name -> types.v1.RuntimeConfig
	8,  // 16: types.v1.FormatConfig.Style.foreground:type_name -> types.v1.FormatConfig.Color
	8,  // 17: types.v1.FormatConfig.Style.background:type_name -> types.v1.FormatConfig.Color
	9,  // 18: types.v1.FormatConfig.NullStyle.style:type_name -> types.v1.FormatConfig.Style
	9,  // 19: types.v1.FormatConfig.LevelStyle.debug:type_name -> types.v1.FormatConfig.Style
	9,  // 20: types.v1.FormatConfig.LevelStyle.info:type_name -> types.v1.FormatConfig.Style
	9,  // 21: types.v1.FormatConfig.LevelStyle.warn:type_name -> types.v1.FormatConfig.Style
	9,  // 22: types.v1.FormatConfig.LevelStyle.error:type_name -> types.v1.FormatConfig.Style
	9,  // 23: types.v1.FormatConfig.LevelStyle.panic:type_name -> types.v1.FormatConfig.Style
	9,  // 24: types.v1.FormatConfig.LevelStyle.fatal:type_name -> types.v1.FormatConfig.Style
	9,  // 25: types.v1.FormatConfig.LevelStyle.unknown:type_name -> types.v1.FormatConfig.Style
	9,  // 26: types.v1.FormatConfig.LogTheme.key:type_name -> types.v1.FormatConfig.Style
	9,  // 27: types.v1.FormatConfig.LogTheme.value:type_name -> types.v1.FormatConfig.Style
	9,  // 28: types.v1.FormatConfig.LogTheme.time:type_name -> types.v1.FormatConfig.Style
	9,  // 29: types.v1.FormatConfig.LogTheme.msg:type_name -> types.v1.FormatConfig.Style
	11, // 30: types.v1.FormatConfig.LogTheme.levels:type_name -> types.v1.FormatConfig.LevelStyle
	9,  // 31: types.v1.FormatConfig.LogTheme.absent_msg:type_name -> types.v1.FormatConfig.Style
	9,  // 32: types.v1.FormatConfig.LogTheme.absent_time:type_name -> types.v1.FormatConfig.Style
	9,  // 33: types.v1.FormatConfig.SpanTheme.trace_id:type_name -> types.v1.FormatConfig.Style
	9,  // 34: types.v1.FormatConfig.SpanTheme.span_id:type_name -> types.v1.FormatConfig.Style
	9,  // 35: types.v1.FormatConfig.SpanTheme.trace_state:type_name -> types.v1.FormatConfig.Style
	9,  // 36: types.v1.FormatConfig.SpanTheme.parent_span_id:type_name -> types.v1.FormatConfig.Style
	9,  // 37: types.v1.FormatConfig.SpanTheme.name:type_name -> types.v1.FormatConfig.Style
	9,  // 38: types.v1.FormatConfig.SpanTheme.kind:type_name -> types.v1.FormatConfig.Style
	9,  // 39: types.v1.FormatConfig.SpanTheme.service_name:type_name -> types.v1.FormatConfig.Style
	9,  // 40: types.v1.FormatConfig.SpanTheme.scope_name:type_name -> types.v1.FormatConfig.Style
	9,  // 41: types.v1.FormatConfig.SpanTheme.scope_version:type_name -> types.v1.FormatConfig.Style
	9,  // 42: types.v1.FormatConfig.SpanTheme.time:type_name -> types.v1.FormatConfig.Style
	9,  // 43: types.v1.FormatConfig.SpanTheme.duration:type_name -> types.v1.FormatConfig.Style
	9,  // 44: types.v1.FormatConfig.SpanTheme.resource_key:type_name -> types.v1.FormatConfig.Style
	9,  // 45: types.v1.FormatConfig.SpanTheme.resource_val:type_name -> types.v1.FormatConfig.Style
	9,  // 46: types.v1.FormatConfig.SpanTheme.attribute_key:type_name -> types.v1.FormatConfig.Style
	9,  // 47: types.v1.FormatConfig.SpanTheme.attribute_val:type_name -> types.v1.FormatConfig.Style
	9,  // 48: types.v1.FormatConfig.SpanTheme.status_message:type_name -> types.v1.FormatConfig.Style
	9,  // 49: types.v1.FormatConfig.SpanTheme.status_code:type_name -> types.v1.FormatConfig.Style
	9,  // 50: types.v1.FormatConfig.SpanTheme.event_time:type_name -> types.v1.FormatConfig.Style
	9,  // 51: types.v1.FormatConfig.SpanTheme.event_name:type_name -> types.v1.FormatConfig.Style
	9,  // 52: types.v1.FormatConfig.SpanTheme.event_key:type_name -> types.v1.FormatConfig.Style
	9,  // 53: types.v1.FormatConfig.SpanTheme.event_val:type_name -> types.v1.FormatConfig.Style
	9,  // 54: types.v1.FormatConfig.SpanTheme.link_trace_id:type_name -> types.v1.FormatConfig.Style
	9,  // 55: types.v1.FormatConfig.SpanTheme.link_span_id:type_name -> types.v1.FormatConfig.Style
	9,  // 56: types.v1.FormatConfig.SpanTheme.link_trace_state:type_name -> types.v1.FormatConfig.Style
	9,  // 57: types.v1.FormatConfig.SpanTheme.link_key:type_name -> types.v1.FormatConfig.Style
	9,  // 58: types.v1.FormatConfig.SpanTheme.link_val:type_name -> types.v1.FormatConfig.Style
	9,  // 59: types.v1.FormatConfig.SpanTheme.absent_parent_span_id:type_name -> types.v1.FormatConfig.Style
	9,  // 60: types.v1.FormatConfig.TableTheme.column_name:type_name -> types.v1.FormatConfig.Style
	9,  // 61: types.v1.FormatConfig.TableTheme.column_type:type_name -> types.v1.FormatConfig.Style
	9,  // 62: types.v1.FormatConfig.TableTheme.value:type_name -> types.v1.FormatConfig.Style
	9,  // 63: types.v1.FormatConfig.Theme.key:type_name -> types.v1.FormatConfig.Style
	9,  // 64: types.v1.FormatConfig.Theme.value:type_name -> types.v1.FormatConfig.Style
	9,  // 65: types.v1.FormatConfig.Theme.time:type_name -> types.v1.FormatConfig.Style
	9,  // 66: types.v1.FormatConfig.Theme.msg:type_name -> types.v1.FormatConfig.Style
	11, // 67: types.v1.FormatConfig.Theme.levels:type_name -> types.v1.FormatConfig.LevelStyle
	9,  // 68: types.v1.FormatConfig.Theme.absent_msg:type_name -> types.v1.FormatConfig.Style
	9,  // 69: types.v1.FormatConfig.Theme.absent_time:type_name -> types.v1.FormatConfig.Style
	12, // 70: types.v1.FormatConfig.Theme.logs:type_name -> types.v1.FormatConfig.LogTheme
	13, // 71: types.v1.FormatConfig.Theme.spans:type_name -> types.v1.FormatConfig.SpanTheme
	14, // 72: types.v1.FormatConfig.Theme.tables:type_name -> types.v1.FormatConfig.TableTheme
	15, // 73: types.v1.FormatConfig.Themes.light:type_name -> types.v1.FormatConfig.Theme
	15, // 74: types.v1.FormatConfig.Themes.dark:type_name -> types.v1.FormatConfig.Theme
	5,  // 75: types.v1.RuntimeConfig.ExperimentalFeatures.serve_localhost:type_name -> types.v1.ServeLocalhostConfig
	1,  // 76: types.v1.RuntimeConfig.ClientConfig.http_protocol:type_name -> types.v1.RuntimeConfig.ClientConfig.HTTPProtocol
	2,  // 77: types.v1.RuntimeConfig.ClientConfig.rpc_protocol:type_name -> types.v1.RuntimeConfig.ClientConfig.RPCProtocol
	78, // [78:78] is the sub-list for method output_type
	78, // [78:78] is the sub-list for method input_type
	78, // [78:78] is the sub-list for extension type_name
	78, // [78:78] is the sub-list for extension extendee
	0,  // [0:78] is the sub-list for field type_name
}

func init() { file_types_v1_localhost_config_proto_init() }
func file_types_v1_localhost_config_proto_init() {
	if File_types_v1_localhost_config_proto != nil {
		return
	}
	file_types_v1_localhost_config_proto_msgTypes[0].OneofWrappers = []any{}
	file_types_v1_localhost_config_proto_msgTypes[2].OneofWrappers = []any{}
	file_types_v1_localhost_config_proto_msgTypes[3].OneofWrappers = []any{}
	file_types_v1_localhost_config_proto_msgTypes[6].OneofWrappers = []any{}
	file_types_v1_localhost_config_proto_msgTypes[15].OneofWrappers = []any{}
	file_types_v1_localhost_config_proto_msgTypes[16].OneofWrappers = []any{}
	file_types_v1_localhost_config_proto_msgTypes[22].OneofWrappers = []any{}
	file_types_v1_localhost_config_proto_msgTypes[23].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_types_v1_localhost_config_proto_rawDesc), len(file_types_v1_localhost_config_proto_rawDesc)),
			NumEnums:      3,
			NumMessages:   24,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_types_v1_localhost_config_proto_goTypes,
		DependencyIndexes: file_types_v1_localhost_config_proto_depIdxs,
		EnumInfos:         file_types_v1_localhost_config_proto_enumTypes,
		MessageInfos:      file_types_v1_localhost_config_proto_msgTypes,
	}.Build()
	File_types_v1_localhost_config_proto = out.File
	file_types_v1_localhost_config_proto_goTypes = nil
	file_types_v1_localhost_config_proto_depIdxs = nil
}
