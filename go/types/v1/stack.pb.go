// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        (unknown)
// source: types/v1/stack.proto

package typesv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type StackPointer struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Scheme:
	//
	//	*StackPointer_Remote
	//	*StackPointer_Localhost
	//	*StackPointer_Db
	Scheme        isStackPointer_Scheme `protobuf_oneof:"scheme"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StackPointer) Reset() {
	*x = StackPointer{}
	mi := &file_types_v1_stack_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StackPointer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StackPointer) ProtoMessage() {}

func (x *StackPointer) ProtoReflect() protoreflect.Message {
	mi := &file_types_v1_stack_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StackPointer.ProtoReflect.Descriptor instead.
func (*StackPointer) Descriptor() ([]byte, []int) {
	return file_types_v1_stack_proto_rawDescGZIP(), []int{0}
}

func (x *StackPointer) GetScheme() isStackPointer_Scheme {
	if x != nil {
		return x.Scheme
	}
	return nil
}

func (x *StackPointer) GetRemote() *StackPointer_Git {
	if x != nil {
		if x, ok := x.Scheme.(*StackPointer_Remote); ok {
			return x.Remote
		}
	}
	return nil
}

func (x *StackPointer) GetLocalhost() *StackPointer_Git {
	if x != nil {
		if x, ok := x.Scheme.(*StackPointer_Localhost); ok {
			return x.Localhost
		}
	}
	return nil
}

func (x *StackPointer) GetDb() *StackPointer_Virtual {
	if x != nil {
		if x, ok := x.Scheme.(*StackPointer_Db); ok {
			return x.Db
		}
	}
	return nil
}

type isStackPointer_Scheme interface {
	isStackPointer_Scheme()
}

type StackPointer_Remote struct {
	Remote *StackPointer_Git `protobuf:"bytes,1,opt,name=remote,proto3,oneof"`
}

type StackPointer_Localhost struct {
	Localhost *StackPointer_Git `protobuf:"bytes,2,opt,name=localhost,proto3,oneof"`
}

type StackPointer_Db struct {
	Db *StackPointer_Virtual `protobuf:"bytes,3,opt,name=db,proto3,oneof"`
}

func (*StackPointer_Remote) isStackPointer_Scheme() {}

func (*StackPointer_Localhost) isStackPointer_Scheme() {}

func (*StackPointer_Db) isStackPointer_Scheme() {}

type Stack struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Pointer       *StackPointer          `protobuf:"bytes,3,opt,name=pointer,proto3" json:"pointer,omitempty"`
	CreatedAt     *timestamppb.Timestamp `protobuf:"bytes,400,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt     *timestamppb.Timestamp `protobuf:"bytes,401,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Stack) Reset() {
	*x = Stack{}
	mi := &file_types_v1_stack_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Stack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Stack) ProtoMessage() {}

func (x *Stack) ProtoReflect() protoreflect.Message {
	mi := &file_types_v1_stack_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Stack.ProtoReflect.Descriptor instead.
func (*Stack) Descriptor() ([]byte, []int) {
	return file_types_v1_stack_proto_rawDescGZIP(), []int{1}
}

func (x *Stack) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Stack) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Stack) GetPointer() *StackPointer {
	if x != nil {
		return x.Pointer
	}
	return nil
}

func (x *Stack) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Stack) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type StackPointer_Git struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Uri           string                 `protobuf:"bytes,2,opt,name=uri,proto3" json:"uri,omitempty"`
	Path          string                 `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`
	Ref           string                 `protobuf:"bytes,4,opt,name=ref,proto3" json:"ref,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StackPointer_Git) Reset() {
	*x = StackPointer_Git{}
	mi := &file_types_v1_stack_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StackPointer_Git) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StackPointer_Git) ProtoMessage() {}

func (x *StackPointer_Git) ProtoReflect() protoreflect.Message {
	mi := &file_types_v1_stack_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StackPointer_Git.ProtoReflect.Descriptor instead.
func (*StackPointer_Git) Descriptor() ([]byte, []int) {
	return file_types_v1_stack_proto_rawDescGZIP(), []int{0, 0}
}

func (x *StackPointer_Git) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

func (x *StackPointer_Git) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *StackPointer_Git) GetRef() string {
	if x != nil {
		return x.Ref
	}
	return ""
}

type StackPointer_Virtual struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Uri           string                 `protobuf:"bytes,1,opt,name=uri,proto3" json:"uri,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StackPointer_Virtual) Reset() {
	*x = StackPointer_Virtual{}
	mi := &file_types_v1_stack_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StackPointer_Virtual) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StackPointer_Virtual) ProtoMessage() {}

func (x *StackPointer_Virtual) ProtoReflect() protoreflect.Message {
	mi := &file_types_v1_stack_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StackPointer_Virtual.ProtoReflect.Descriptor instead.
func (*StackPointer_Virtual) Descriptor() ([]byte, []int) {
	return file_types_v1_stack_proto_rawDescGZIP(), []int{0, 1}
}

func (x *StackPointer_Virtual) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

var File_types_v1_stack_proto protoreflect.FileDescriptor

var file_types_v1_stack_proto_rawDesc = string([]byte{
	0x0a, 0x14, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x74, 0x61, 0x63, 0x6b,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31,
	0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x98, 0x02, 0x0a, 0x0c, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x12, 0x34, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74,
	0x61, 0x63, 0x6b, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x47, 0x69, 0x74, 0x48, 0x00,
	0x52, 0x06, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x12, 0x3a, 0x0a, 0x09, 0x6c, 0x6f, 0x63, 0x61,
	0x6c, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x2e, 0x47, 0x69, 0x74, 0x48, 0x00, 0x52, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
	0x68, 0x6f, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x02, 0x64, 0x62, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x63,
	0x6b, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c,
	0x48, 0x00, 0x52, 0x02, 0x64, 0x62, 0x1a, 0x3d, 0x0a, 0x03, 0x47, 0x69, 0x74, 0x12, 0x10, 0x0a,
	0x03, 0x75, 0x72, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x69, 0x12,
	0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70,
	0x61, 0x74, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x66, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x72, 0x65, 0x66, 0x1a, 0x1b, 0x0a, 0x07, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c,
	0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75,
	0x72, 0x69, 0x42, 0x08, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x22, 0xd5, 0x01, 0x0a,
	0x05, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x07, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x52, 0x07, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x3a, 0x0a, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x90, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3a, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x91, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x42, 0x8a, 0x01, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x76, 0x31, 0x42, 0x0a, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x50, 0x01, 0x5a, 0x2d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x68, 0x75, 0x6d, 0x61, 0x6e, 0x6c, 0x6f, 0x67, 0x69, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67,
	0x6f, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x3b, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x76, 0x31, 0xa2, 0x02, 0x03, 0x54, 0x58, 0x58, 0xaa, 0x02, 0x08, 0x54, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x56, 0x31, 0xca, 0x02, 0x08, 0x54, 0x79, 0x70, 0x65, 0x73, 0x5c, 0x56, 0x31, 0xe2, 0x02,
	0x14, 0x54, 0x79, 0x70, 0x65, 0x73, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x09, 0x54, 0x79, 0x70, 0x65, 0x73, 0x3a, 0x3a, 0x56,
	0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_types_v1_stack_proto_rawDescOnce sync.Once
	file_types_v1_stack_proto_rawDescData []byte
)

func file_types_v1_stack_proto_rawDescGZIP() []byte {
	file_types_v1_stack_proto_rawDescOnce.Do(func() {
		file_types_v1_stack_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_types_v1_stack_proto_rawDesc), len(file_types_v1_stack_proto_rawDesc)))
	})
	return file_types_v1_stack_proto_rawDescData
}

var file_types_v1_stack_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_types_v1_stack_proto_goTypes = []any{
	(*StackPointer)(nil),          // 0: types.v1.StackPointer
	(*Stack)(nil),                 // 1: types.v1.Stack
	(*StackPointer_Git)(nil),      // 2: types.v1.StackPointer.Git
	(*StackPointer_Virtual)(nil),  // 3: types.v1.StackPointer.Virtual
	(*timestamppb.Timestamp)(nil), // 4: google.protobuf.Timestamp
}
var file_types_v1_stack_proto_depIdxs = []int32{
	2, // 0: types.v1.StackPointer.remote:type_name -> types.v1.StackPointer.Git
	2, // 1: types.v1.StackPointer.localhost:type_name -> types.v1.StackPointer.Git
	3, // 2: types.v1.StackPointer.db:type_name -> types.v1.StackPointer.Virtual
	0, // 3: types.v1.Stack.pointer:type_name -> types.v1.StackPointer
	4, // 4: types.v1.Stack.created_at:type_name -> google.protobuf.Timestamp
	4, // 5: types.v1.Stack.updated_at:type_name -> google.protobuf.Timestamp
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_types_v1_stack_proto_init() }
func file_types_v1_stack_proto_init() {
	if File_types_v1_stack_proto != nil {
		return
	}
	file_types_v1_stack_proto_msgTypes[0].OneofWrappers = []any{
		(*StackPointer_Remote)(nil),
		(*StackPointer_Localhost)(nil),
		(*StackPointer_Db)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_types_v1_stack_proto_rawDesc), len(file_types_v1_stack_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_types_v1_stack_proto_goTypes,
		DependencyIndexes: file_types_v1_stack_proto_depIdxs,
		MessageInfos:      file_types_v1_stack_proto_msgTypes,
	}.Build()
	File_types_v1_stack_proto = out.File
	file_types_v1_stack_proto_goTypes = nil
	file_types_v1_stack_proto_depIdxs = nil
}
