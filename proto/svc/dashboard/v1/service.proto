syntax = "proto3";

package svc.dashboard.v1;

import "types/v1/cursor.proto";
import "types/v1/dashboard.proto";

option go_package = "svc/dashboard/v1;dashboardv1";

service DashboardService {
  rpc CreateDashboard(CreateDashboardRequest) returns (CreateDashboardResponse);
  rpc GetDashboard(GetDashboardRequest) returns (GetDashboardResponse);
  rpc UpdateDashboard(UpdateDashboardRequest) returns (UpdateDashboardResponse);
  rpc DeleteDashboard(DeleteDashboardRequest) returns (DeleteDashboardResponse);
  rpc ListDashboard(ListDashboardRequest) returns (ListDashboardResponse);
}

message CreateDashboardRequest {
  int64 environment_id = 101;
  string project_name = 102;
  types.v1.DashboardSpec spec = 1;
}

message CreateDashboardResponse {
  types.v1.Dashboard dashboard = 1;
}

message GetDashboardRequest {
  int64 environment_id = 101;
  string project_name = 102;
  string id = 1;
}

message GetDashboardResponse {
  types.v1.Dashboard dashboard = 1;
}

message UpdateDashboardRequest {
  int64 environment_id = 101;
  string project_name = 102;
  string id = 1;
  types.v1.DashboardSpec spec = 2;
}

message UpdateDashboardResponse {
  types.v1.Dashboard dashboard = 1;
}

message DeleteDashboardRequest {
  int64 environment_id = 101;
  string project_name = 102;
  string id = 1;
}

message DeleteDashboardResponse {}

message ListDashboardRequest {
  int64 environment_id = 101;
  string project_name = 102;
  types.v1.Cursor cursor = 1;
  int32 limit = 2;
  int64 dashboard_id = 3;
}

message ListDashboardResponse {
  types.v1.Cursor next = 1;
  message ListItem {
    types.v1.Dashboard dashboard = 1;
  }
  repeated ListItem items = 2;
}
