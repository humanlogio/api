syntax = "proto3";

package types.v1;

import "google/protobuf/timestamp.proto";
import "types/v1/types.proto";

option go_package = "types/v1;typesv1";

// kv["user.id"] == 42 | group_by(kv["group"]) | kv["access_level"] == "admin" | timechart

message LogQuery {
  Timerange timerange = 1;
  Context context = 2;
  Statements query = 3;
}

message Timerange {
  Expr from = 1;
  optional Expr to = 2;
}

message Context {
  optional Expr machine_id = 101;
  optional Expr session_id = 102;
}

message Statements {
  // statements are `|` separated
  repeated Statement statements = 1;
  RenderStatement render = 2;
}

message Statement {
  oneof stmt {
    FilterOperator filter = 1;
    SummarizeOperator summarize = 2;
    ProjectOperator project = 3;
  }
}

message FilterOperator {
  Expr expr = 1;
}

message SummarizeOperator {
  message Parameters {
    repeated Parameter parameters = 1;
  }
  message Parameter {
    optional Identifier column = 1;
    FuncCall aggregate_function = 2;
  }
  message ByGroupExpressions {
    repeated ByGroupExpression groups = 2;
  }
  message ByGroupExpression {
    optional Identifier column = 1;
    Expr scalar = 2;
  }
  Parameters parameters = 1;
  optional ByGroupExpressions by_group_expressions = 2;
}

message ProjectOperator {
  message Projection {
    Identifier column = 1;
    optional Expr value = 2;
  }
  repeated Projection projections = 1;
}

message RenderStatement {
  oneof stmt {
    SplitOperator split = 1;
  }
}

message SplitOperator {
  message ByOperator {
    repeated Expr scalars = 1;
  }
  ByOperator by = 2;
}

message Expr {
  oneof expr {
    Val literal = 101;
    UnaryOp unary = 102;
    BinaryOp binary = 103;
    FuncCall func_call = 104;
    Identifier identifier = 105;
    Selector selector = 106; // msg.hello.world
    Indexor indexor = 107; // kvs['hello']
  }
}

message UnaryOp {
  enum Operator {
    INVALID = 0;
    NOT = 1;
    NEG = 2;
  }
  Operator op = 1;
  Expr arg = 2;
}

message BinaryOp {
  enum Operator {
    INVALID = 0;
    LOG_AND = 101;
    LOG_OR = 102;
    NUM_ADD = 201;
    NUM_SUB = 202;
    NUM_DIV = 203;
    NUM_MUL = 204;
    CMP_EQ = 301;
    CMP_NOTEQ = 302;
    CMP_GT = 303;
    CMP_GTE = 304;
    CMP_LT = 305;
    CMP_LTE = 306;
    SET_IN = 401;
    SET_NOTIN = 402;
  }
  Expr lhs = 1;
  Operator op = 2;
  Expr rhs = 3;
}

message FuncCall {
  string name = 1;
  repeated Expr args = 2;
}

message Identifier {
  string name = 1;
}

message Selector {
  Expr x = 1;
  Identifier identifier = 2;
}

message Indexor {
  Expr x = 1;
  Expr index = 2;
}
